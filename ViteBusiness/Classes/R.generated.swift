//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = VitePodRawBundle(path: Bundle(for: R.Class.self).path(forResource: "ViteBusiness", ofType: "bundle")!)!
  
  public static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 296 images.
  public struct image {
    /// Image `aboutus_logo`.
    public static let aboutus_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutus_logo")
    /// Image `background_add_button_white`.
    public static let background_add_button_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_add_button_white")
    /// Image `background_address_add_button_white`.
    public static let background_address_add_button_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_address_add_button_white")
    /// Image `background_button_blue`.
    public static let background_button_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_button_blue")
    /// Image `background_button_gray`.
    public static let background_button_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_button_gray")
    /// Image `background_button_white`.
    public static let background_button_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_button_white")
    /// Image `beifen`.
    public static let beifen = Rswift.ImageResource(bundle: R.hostingBundle, name: "beifen")
    /// Image `blue_dotted_line`.
    public static let blue_dotted_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue_dotted_line")
    /// Image `bnb_transaction_icon`.
    public static let bnb_transaction_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bnb_transaction_icon")
    /// Image `bnb_transaction_other_icon`.
    public static let bnb_transaction_other_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bnb_transaction_other_icon")
    /// Image `btn_path_bg`.
    public static let btn_path_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_path_bg")
    /// Image `bubble_left`.
    public static let bubble_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubble_left")
    /// Image `bubble_right`.
    public static let bubble_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubble_right")
    /// Image `crosschain_depoist`.
    public static let crosschain_depoist = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosschain_depoist")
    /// Image `crosschain_deposie_switch`.
    public static let crosschain_deposie_switch = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosschain_deposie_switch")
    /// Image `crosschain_operat_deposit`.
    public static let crosschain_operat_deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosschain_operat_deposit")
    /// Image `crosschain_operat_withdraw`.
    public static let crosschain_operat_withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosschain_operat_withdraw")
    /// Image `crosschain_status_confirm`.
    public static let crosschain_status_confirm = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosschain_status_confirm")
    /// Image `crosschain_status_failure`.
    public static let crosschain_status_failure = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosschain_status_failure")
    /// Image `crosschain_status_gateway`.
    public static let crosschain_status_gateway = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosschain_status_gateway")
    /// Image `crosschain_status_vite`.
    public static let crosschain_status_vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosschain_status_vite")
    /// Image `crosschain_withdrwa`.
    public static let crosschain_withdrwa = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosschain_withdrwa")
    /// Image `dex_nav_bg`.
    public static let dex_nav_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "dex_nav_bg")
    /// Image `dotted_line`.
    public static let dotted_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "dotted_line")
    /// Image `empty`.
    public static let empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty")
    /// Image `exchange_arrow`.
    public static let exchange_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "exchange_arrow")
    /// Image `exchange_button_icon`.
    public static let exchange_button_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "exchange_button_icon")
    /// Image `exchange_hisrory_arrow`.
    public static let exchange_hisrory_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "exchange_hisrory_arrow")
    /// Image `exchange_icon`.
    public static let exchange_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "exchange_icon")
    /// Image `exchange_middle_line`.
    public static let exchange_middle_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "exchange_middle_line")
    /// Image `exchange_txs`.
    public static let exchange_txs = Rswift.ImageResource(bundle: R.hostingBundle, name: "exchange_txs")
    /// Image `face_id`.
    public static let face_id = Rswift.ImageResource(bundle: R.hostingBundle, name: "face_id")
    /// Image `fetch_gift_bg`.
    public static let fetch_gift_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "fetch_gift_bg")
    /// Image `fetch_gift_icon`.
    public static let fetch_gift_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "fetch_gift_icon")
    /// Image `fingerprint`.
    public static let fingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "fingerprint")
    /// Image `gasSlider`.
    public static let gasSlider = Rswift.ImageResource(bundle: R.hostingBundle, name: "gasSlider")
    /// Image `gateway_label_layer`.
    public static let gateway_label_layer = Rswift.ImageResource(bundle: R.hostingBundle, name: "gateway_label_layer")
    /// Image `gateway`.
    public static let gateway = Rswift.ImageResource(bundle: R.hostingBundle, name: "gateway")
    /// Image `gift`.
    public static let gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "gift")
    /// Image `grin_detail_cancled_gray`.
    public static let grin_detail_cancled_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_cancled_gray")
    /// Image `grin_detail_cancled`.
    public static let grin_detail_cancled = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_cancled")
    /// Image `grin_detail_confirmed_gray`.
    public static let grin_detail_confirmed_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_confirmed_gray")
    /// Image `grin_detail_confirmed`.
    public static let grin_detail_confirmed = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_confirmed")
    /// Image `grin_detail_confirmedconbase`.
    public static let grin_detail_confirmedconbase = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_confirmedconbase")
    /// Image `grin_detail_created_gray`.
    public static let grin_detail_created_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_created_gray")
    /// Image `grin_detail_created`.
    public static let grin_detail_created = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_created")
    /// Image `grin_detail_gateway_confirmed_gray`.
    public static let grin_detail_gateway_confirmed_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_gateway_confirmed_gray")
    /// Image `grin_detail_gateway_confirmed`.
    public static let grin_detail_gateway_confirmed = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_gateway_confirmed")
    /// Image `grin_detail_gateway_received_gray`.
    public static let grin_detail_gateway_received_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_gateway_received_gray")
    /// Image `grin_detail_gateway_received`.
    public static let grin_detail_gateway_received = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_gateway_received")
    /// Image `grin_detail_gateway`.
    public static let grin_detail_gateway = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_gateway")
    /// Image `grin_detail_line_blue`.
    public static let grin_detail_line_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_line_blue")
    /// Image `grin_detail_line_gray`.
    public static let grin_detail_line_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_line_gray")
    /// Image `grin_detail_normal`.
    public static let grin_detail_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_normal")
    /// Image `grin_detail_poasting_gray`.
    public static let grin_detail_poasting_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_poasting_gray")
    /// Image `grin_detail_poasting`.
    public static let grin_detail_poasting = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_poasting")
    /// Image `grin_detail_received_gray`.
    public static let grin_detail_received_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_received_gray")
    /// Image `grin_detail_received`.
    public static let grin_detail_received = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_received")
    /// Image `grin_detail_vite`.
    public static let grin_detail_vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_vite")
    /// Image `grin_detail_waitToFinzlize_gray`.
    public static let grin_detail_waitToFinzlize_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_waitToFinzlize_gray")
    /// Image `grin_detail_waitToFinzlize`.
    public static let grin_detail_waitToFinzlize = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_waitToFinzlize")
    /// Image `grin_detail_waitToSign_gray`.
    public static let grin_detail_waitToSign_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_waitToSign_gray")
    /// Image `grin_detail_waitToSign`.
    public static let grin_detail_waitToSign = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_detail_waitToSign")
    /// Image `grin_gray`.
    public static let grin_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_gray")
    /// Image `grin_help`.
    public static let grin_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_help")
    /// Image `grin_methd_bg`.
    public static let grin_methd_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_methd_bg")
    /// Image `grin_node_edit`.
    public static let grin_node_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_node_edit")
    /// Image `grin_node_selected`.
    public static let grin_node_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_node_selected")
    /// Image `grin_node_unselected`.
    public static let grin_node_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_node_unselected")
    /// Image `grin_teach_file_cn`.
    public static let grin_teach_file_cn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_teach_file_cn")
    /// Image `grin_teach_file`.
    public static let grin_teach_file = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_teach_file")
    /// Image `grin_teach_http_receive_cn`.
    public static let grin_teach_http_receive_cn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_teach_http_receive_cn")
    /// Image `grin_teach_http_receive`.
    public static let grin_teach_http_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_teach_http_receive")
    /// Image `grin_teach_http_send_cn`.
    public static let grin_teach_http_send_cn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_teach_http_send_cn")
    /// Image `grin_teach_http_send`.
    public static let grin_teach_http_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_teach_http_send")
    /// Image `grin_teach_vite_cn`.
    public static let grin_teach_vite_cn = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_teach_vite_cn")
    /// Image `grin_teach_vite`.
    public static let grin_teach_vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_teach_vite")
    /// Image `grin_tx_file_finalize`.
    public static let grin_tx_file_finalize = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_tx_file_finalize")
    /// Image `grin_tx_file_init`.
    public static let grin_tx_file_init = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_tx_file_init")
    /// Image `grin_tx_file_receive`.
    public static let grin_tx_file_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_tx_file_receive")
    /// Image `grin_tx_receive`.
    public static let grin_tx_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_tx_receive")
    /// Image `grin_tx_send`.
    public static let grin_tx_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_tx_send")
    /// Image `grin_txlist_cancled`.
    public static let grin_txlist_cancled = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_cancled")
    /// Image `grin_txlist_confirmedConebase`.
    public static let grin_txlist_confirmedConebase = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_confirmedConebase")
    /// Image `grin_txlist_confirmed`.
    public static let grin_txlist_confirmed = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_confirmed")
    /// Image `grin_txlist_receive_gatewayConfirmed`.
    public static let grin_txlist_receive_gatewayConfirmed = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_receive_gatewayConfirmed")
    /// Image `grin_txlist_receive_gatewayReceived`.
    public static let grin_txlist_receive_gatewayReceived = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_receive_gatewayReceived")
    /// Image `grin_txlist_receive_received`.
    public static let grin_txlist_receive_received = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_receive_received")
    /// Image `grin_txlist_receive_waitToReceive`.
    public static let grin_txlist_receive_waitToReceive = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_receive_waitToReceive")
    /// Image `grin_txlist_send_created`.
    public static let grin_txlist_send_created = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_send_created")
    /// Image `grin_txlist_send_posting`.
    public static let grin_txlist_send_posting = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_send_posting")
    /// Image `grin_txlist_send_waitToFinalize`.
    public static let grin_txlist_send_waitToFinalize = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin_txlist_send_waitToFinalize")
    /// Image `grin`.
    public static let grin = Rswift.ImageResource(bundle: R.hostingBundle, name: "grin")
    /// Image `icon_address_default_title_frame`.
    public static let icon_address_default_title_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_address_default_title_frame")
    /// Image `icon_address_name_blue`.
    public static let icon_address_name_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_address_name_blue")
    /// Image `icon_address_name`.
    public static let icon_address_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_address_name")
    /// Image `icon_background`.
    public static let icon_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_background")
    /// Image `icon_balance_detail_arrows`.
    public static let icon_balance_detail_arrows = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_balance_detail_arrows")
    /// Image `icon_balance_detail_exchange`.
    public static let icon_balance_detail_exchange = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_balance_detail_exchange")
    /// Image `icon_balance_detail_pledge`.
    public static let icon_balance_detail_pledge = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_balance_detail_pledge")
    /// Image `icon_balance_detail_vote`.
    public static let icon_balance_detail_vote = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_balance_detail_vote")
    /// Image `icon_balance_quota_arrows`.
    public static let icon_balance_quota_arrows = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_balance_quota_arrows")
    /// Image `icon_bifrost_right_arrow`.
    public static let icon_bifrost_right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bifrost_right_arrow")
    /// Image `icon_button_add`.
    public static let icon_button_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_add")
    /// Image `icon_button_address_add`.
    public static let icon_button_address_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_address_add")
    /// Image `icon_button_address_scan`.
    public static let icon_button_address_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_address_scan")
    /// Image `icon_button_address_type`.
    public static let icon_button_address_type = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_address_type")
    /// Image `icon_button_bitcointalk`.
    public static let icon_button_bitcointalk = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_bitcointalk")
    /// Image `icon_button_discord`.
    public static let icon_button_discord = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_discord")
    /// Image `icon_button_facebook`.
    public static let icon_button_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_facebook")
    /// Image `icon_button_forum`.
    public static let icon_button_forum = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_forum")
    /// Image `icon_button_github`.
    public static let icon_button_github = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_github")
    /// Image `icon_button_infor`.
    public static let icon_button_infor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_infor")
    /// Image `icon_button_light`.
    public static let icon_button_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_light")
    /// Image `icon_button_medium`.
    public static let icon_button_medium = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_medium")
    /// Image `icon_button_paste_blue`.
    public static let icon_button_paste_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_blue")
    /// Image `icon_button_paste_gray`.
    public static let icon_button_paste_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_gray")
    /// Image `icon_button_paste_light_gray`.
    public static let icon_button_paste_light_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_light_gray")
    /// Image `icon_button_paste_white`.
    public static let icon_button_paste_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_white")
    /// Image `icon_button_reddit`.
    public static let icon_button_reddit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_reddit")
    /// Image `icon_button_scan_gray`.
    public static let icon_button_scan_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_scan_gray")
    /// Image `icon_button_telegram`.
    public static let icon_button_telegram = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_telegram")
    /// Image `icon_button_tip`.
    public static let icon_button_tip = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_tip")
    /// Image `icon_button_twitter`.
    public static let icon_button_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_twitter")
    /// Image `icon_button_vb_disconnect`.
    public static let icon_button_vb_disconnect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_vb_disconnect")
    /// Image `icon_button_wechat-1`.
    public static let icon_button_wechat1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_wechat-1")
    /// Image `icon_button_wechat`.
    public static let icon_button_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_wechat")
    /// Image `icon_button_weibo`.
    public static let icon_button_weibo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_weibo")
    /// Image `icon_button_youtube`.
    public static let icon_button_youtube = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_youtube")
    /// Image `icon_cell_select`.
    public static let icon_cell_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_select")
    /// Image `icon_cell_unselect`.
    public static let icon_cell_unselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_unselect")
    /// Image `icon_contacts_contact_blue`.
    public static let icon_contacts_contact_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_contacts_contact_blue")
    /// Image `icon_contacts_contact`.
    public static let icon_contacts_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_contacts_contact")
    /// Image `icon_contacts_empty`.
    public static let icon_contacts_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_contacts_empty")
    /// Image `icon_contacts`.
    public static let icon_contacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_contacts")
    /// Image `icon_dex_home_address_arrows`.
    public static let icon_dex_home_address_arrows = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_home_address_arrows")
    /// Image `icon_dex_home_hide_selected`.
    public static let icon_dex_home_hide_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_home_hide_selected")
    /// Image `icon_dex_home_hide`.
    public static let icon_dex_home_hide = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_home_hide")
    /// Image `icon_dex_home_sort_a2z`.
    public static let icon_dex_home_sort_a2z = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_home_sort_a2z")
    /// Image `icon_dex_home_sort_default`.
    public static let icon_dex_home_sort_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_home_sort_default")
    /// Image `icon_dex_home_sort_z2a`.
    public static let icon_dex_home_sort_z2a = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_home_sort_z2a")
    /// Image `icon_dex_token_deposit`.
    public static let icon_dex_token_deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_token_deposit")
    /// Image `icon_dex_token_send`.
    public static let icon_dex_token_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_token_send")
    /// Image `icon_dex_token_trading`.
    public static let icon_dex_token_trading = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_token_trading")
    /// Image `icon_dex_token_transfer`.
    public static let icon_dex_token_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_token_transfer")
    /// Image `icon_dex_token_withdraw`.
    public static let icon_dex_token_withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_token_withdraw")
    /// Image `icon_dex_transfer_in`.
    public static let icon_dex_transfer_in = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_transfer_in")
    /// Image `icon_dex_transfer_out`.
    public static let icon_dex_transfer_out = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dex_transfer_out")
    /// Image `icon_edit_name`.
    public static let icon_edit_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_edit_name")
    /// Image `icon_eth_detail_falied`.
    public static let icon_eth_detail_falied = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eth_detail_falied")
    /// Image `icon_eth_detail_success`.
    public static let icon_eth_detail_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eth_detail_success")
    /// Image `icon_eth_detail_wait`.
    public static let icon_eth_detail_wait = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eth_detail_wait")
    /// Image `icon_genesis_button`.
    public static let icon_genesis_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_genesis_button")
    /// Image `icon_hide_pwd`.
    public static let icon_hide_pwd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_hide_pwd")
    /// Image `icon_logo_chain_bnb`.
    public static let icon_logo_chain_bnb = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_logo_chain_bnb")
    /// Image `icon_logo_chain_eth`.
    public static let icon_logo_chain_eth = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_logo_chain_eth")
    /// Image `icon_logo_chain_vite`.
    public static let icon_logo_chain_vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_logo_chain_vite")
    /// Image `icon_logo`.
    public static let icon_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_logo")
    /// Image `icon_market_anonymous`.
    public static let icon_market_anonymous = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_anonymous")
    /// Image `icon_market_change`.
    public static let icon_market_change = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_change")
    /// Image `icon_market_detail_discord`.
    public static let icon_market_detail_discord = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_detail_discord")
    /// Image `icon_market_detail_facebook`.
    public static let icon_market_detail_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_detail_facebook")
    /// Image `icon_market_detail_reddit`.
    public static let icon_market_detail_reddit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_detail_reddit")
    /// Image `icon_market_detail_telegram`.
    public static let icon_market_detail_telegram = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_detail_telegram")
    /// Image `icon_market_detail_twitter`.
    public static let icon_market_detail_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_detail_twitter")
    /// Image `icon_market_down`.
    public static let icon_market_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_down")
    /// Image `icon_market_fav`.
    public static let icon_market_fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_fav")
    /// Image `icon_market_kline_type`.
    public static let icon_market_kline_type = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_kline_type")
    /// Image `icon_market_logo`.
    public static let icon_market_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_logo")
    /// Image `icon_market_orderbook_self`.
    public static let icon_market_orderbook_self = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_orderbook_self")
    /// Image `icon_market_un_fav`.
    public static let icon_market_un_fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_un_fav")
    /// Image `icon_market_up`.
    public static let icon_market_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_up")
    /// Image `icon_market_zero_fee`.
    public static let icon_market_zero_fee = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_market_zero_fee")
    /// Image `icon_mining_staking_add_bg`.
    public static let icon_mining_staking_add_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mining_staking_add_bg")
    /// Image `icon_mining_staking_list_bg`.
    public static let icon_mining_staking_list_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mining_staking_list_bg")
    /// Image `icon_mining_trading_btc`.
    public static let icon_mining_trading_btc = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mining_trading_btc")
    /// Image `icon_mining_trading_eth`.
    public static let icon_mining_trading_eth = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mining_trading_eth")
    /// Image `icon_mining_trading_infor`.
    public static let icon_mining_trading_infor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mining_trading_infor")
    /// Image `icon_mining_trading_item`.
    public static let icon_mining_trading_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mining_trading_item")
    /// Image `icon_mining_trading_right_white`.
    public static let icon_mining_trading_right_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mining_trading_right_white")
    /// Image `icon_mining_trading_usdt`.
    public static let icon_mining_trading_usdt = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mining_trading_usdt")
    /// Image `icon_mining_trading_vite`.
    public static let icon_mining_trading_vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mining_trading_vite")
    /// Image `icon_mnemonic`.
    public static let icon_mnemonic = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mnemonic")
    /// Image `icon_my_home_forum`.
    public static let icon_my_home_forum = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my_home_forum")
    /// Image `icon_my_home_invite`.
    public static let icon_my_home_invite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my_home_invite")
    /// Image `icon_my_home_reward`.
    public static let icon_my_home_reward = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_my_home_reward")
    /// Image `icon_nav_add`.
    public static let icon_nav_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_add")
    /// Image `icon_nav_back_black_gray`.
    public static let icon_nav_back_black_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_back_black_gray")
    /// Image `icon_nav_back_black_offset`.
    public static let icon_nav_back_black_offset = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_back_black_offset")
    /// Image `icon_nav_back_black`.
    public static let icon_nav_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_back_black")
    /// Image `icon_nav_close_black`.
    public static let icon_nav_close_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_close_black")
    /// Image `icon_nav_mine`.
    public static let icon_nav_mine = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_mine")
    /// Image `icon_nav_more`.
    public static let icon_nav_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_more")
    /// Image `icon_nav_photo_black`.
    public static let icon_nav_photo_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_photo_black")
    /// Image `icon_nav_qrcode_black`.
    public static let icon_nav_qrcode_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_qrcode_black")
    /// Image `icon_nav_refresh`.
    public static let icon_nav_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_refresh")
    /// Image `icon_nav_scan_black`.
    public static let icon_nav_scan_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_scan_black")
    /// Image `icon_nav_search`.
    public static let icon_nav_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_search")
    /// Image `icon_nav_share_black`.
    public static let icon_nav_share_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_share_black")
    /// Image `icon_price_hide_button`.
    public static let icon_price_hide_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_price_hide_button")
    /// Image `icon_price_show_button`.
    public static let icon_price_show_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_price_show_button")
    /// Image `icon_quota_close`.
    public static let icon_quota_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_quota_close")
    /// Image `icon_quota_time`.
    public static let icon_quota_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_quota_time")
    /// Image `icon_quota`.
    public static let icon_quota = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_quota")
    /// Image `icon_receive_logo`.
    public static let icon_receive_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_receive_logo")
    /// Image `icon_right_white`.
    public static let icon_right_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_right_white")
    /// Image `icon_search`.
    public static let icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search")
    /// Image `icon_security`.
    public static let icon_security = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_security")
    /// Image `icon_setting`.
    public static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `icon_show_pwd`.
    public static let icon_show_pwd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_show_pwd")
    /// Image `icon_spot_add`.
    public static let icon_spot_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_add")
    /// Image `icon_spot_bubble_center`.
    public static let icon_spot_bubble_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_bubble_center")
    /// Image `icon_spot_bubble_left`.
    public static let icon_spot_bubble_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_bubble_left")
    /// Image `icon_spot_bubble_right`.
    public static let icon_spot_bubble_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_bubble_right")
    /// Image `icon_spot_filter`.
    public static let icon_spot_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_filter")
    /// Image `icon_spot_history_arrows`.
    public static let icon_spot_history_arrows = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_history_arrows")
    /// Image `icon_spot_kilne`.
    public static let icon_spot_kilne = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_kilne")
    /// Image `icon_spot_order_cancel_button_frame`.
    public static let icon_spot_order_cancel_button_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_order_cancel_button_frame")
    /// Image `icon_spot_sub`.
    public static let icon_spot_sub = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_sub")
    /// Image `icon_spot_transfer`.
    public static let icon_spot_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_transfer")
    /// Image `icon_spot_vip_close`.
    public static let icon_spot_vip_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_vip_close")
    /// Image `icon_spot_vip_open`.
    public static let icon_spot_vip_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot_vip_open")
    /// Image `icon_tabbar_debug_select`.
    public static let icon_tabbar_debug_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_debug_select")
    /// Image `icon_tabbar_debug`.
    public static let icon_tabbar_debug = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_debug")
    /// Image `icon_tabbar_dex_select`.
    public static let icon_tabbar_dex_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_dex_select")
    /// Image `icon_tabbar_dex`.
    public static let icon_tabbar_dex = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_dex")
    /// Image `icon_tabbar_market_select`.
    public static let icon_tabbar_market_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_market_select")
    /// Image `icon_tabbar_market`.
    public static let icon_tabbar_market = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_market")
    /// Image `icon_tabbar_trading_select`.
    public static let icon_tabbar_trading_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_trading_select")
    /// Image `icon_tabbar_trading`.
    public static let icon_tabbar_trading = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_trading")
    /// Image `icon_tabbar_wallet_select`.
    public static let icon_tabbar_wallet_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_wallet_select")
    /// Image `icon_tabbar_wallet`.
    public static let icon_tabbar_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_wallet")
    /// Image `icon_tick`.
    public static let icon_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tick")
    /// Image `icon_token_info_add_button`.
    public static let icon_token_info_add_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_token_info_add_button")
    /// Image `icon_token_info_frame`.
    public static let icon_token_info_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_token_info_frame")
    /// Image `icon_token_vite_white`.
    public static let icon_token_vite_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_token_vite_white")
    /// Image `icon_token_vite`.
    public static let icon_token_vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_token_vite")
    /// Image `icon_trading_segment_selected_fram`.
    public static let icon_trading_segment_selected_fram = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_trading_segment_selected_fram")
    /// Image `icon_trading_segment_unselected_fram`.
    public static let icon_trading_segment_unselected_fram = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_trading_segment_unselected_fram")
    /// Image `icon_tutorial`.
    public static let icon_tutorial = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tutorial")
    /// Image `icon_tx_coin`.
    public static let icon_tx_coin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_coin")
    /// Image `icon_tx_contract`.
    public static let icon_tx_contract = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_contract")
    /// Image `icon_tx_pledge`.
    public static let icon_tx_pledge = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_pledge")
    /// Image `icon_tx_receive`.
    public static let icon_tx_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_receive")
    /// Image `icon_tx_register`.
    public static let icon_tx_register = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_register")
    /// Image `icon_tx_reward`.
    public static let icon_tx_reward = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_reward")
    /// Image `icon_tx_send`.
    public static let icon_tx_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_send")
    /// Image `icon_tx_vote`.
    public static let icon_tx_vote = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_vote")
    /// Image `icon_vb_placeholder_busy`.
    public static let icon_vb_placeholder_busy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vb_placeholder_busy")
    /// Image `icon_vb_placeholder_free`.
    public static let icon_vb_placeholder_free = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vb_placeholder_free")
    /// Image `icon_vite_exchange`.
    public static let icon_vite_exchange = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vite_exchange")
    /// Image `icon_vite_logo`.
    public static let icon_vite_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vite_logo")
    /// Image `icon_vitex_transfer_down_arrows`.
    public static let icon_vitex_transfer_down_arrows = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vitex_transfer_down_arrows")
    /// Image `icon_vote_rank`.
    public static let icon_vote_rank = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vote_rank")
    /// Image `icon_voteaddress`.
    public static let icon_voteaddress = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_voteaddress")
    /// Image `icon_votecount`.
    public static let icon_votecount = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_votecount")
    /// Image `icon_wallet_home_nav_bg`.
    public static let icon_wallet_home_nav_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_home_nav_bg")
    /// Image `image_wechat_qrcode`.
    public static let image_wechat_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_wechat_qrcode")
    /// Image `infor_white`.
    public static let infor_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "infor_white")
    /// Image `intro_en`.
    public static let intro_en = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_en")
    /// Image `intro_icon_0`.
    public static let intro_icon_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_icon_0")
    /// Image `intro_icon_1`.
    public static let intro_icon_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_icon_1")
    /// Image `intro_icon_2`.
    public static let intro_icon_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_icon_2")
    /// Image `intro_icon_3`.
    public static let intro_icon_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_icon_3")
    /// Image `intro_zh`.
    public static let intro_zh = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_zh")
    /// Image `lock_page_user`.
    public static let lock_page_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_page_user")
    /// Image `login_bg`.
    public static let login_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_bg")
    /// Image `login_logo`.
    public static let login_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_logo")
    /// Image `market_ascend_default`.
    public static let market_ascend_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_ascend_default")
    /// Image `market_history_delet`.
    public static let market_history_delet = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_history_delet")
    /// Image `market_mining_both_num`.
    public static let market_mining_both_num = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_mining_both_num")
    /// Image `market_mining_both`.
    public static let market_mining_both = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_mining_both")
    /// Image `market_mining_order_num`.
    public static let market_mining_order_num = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_mining_order_num")
    /// Image `market_mining_order`.
    public static let market_mining_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_mining_order")
    /// Image `market_mining_trade`.
    public static let market_mining_trade = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_mining_trade")
    /// Image `market_search`.
    public static let market_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_search")
    /// Image `market_star_gray`.
    public static let market_star_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_star_gray")
    /// Image `market_star_yellow`.
    public static let market_star_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_star_yellow")
    /// Image `market_top_bg`.
    public static let market_top_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "market_top_bg")
    /// Image `marketr_ascending`.
    public static let marketr_ascending = Rswift.ImageResource(bundle: R.hostingBundle, name: "marketr_ascending")
    /// Image `marketr_descending`.
    public static let marketr_descending = Rswift.ImageResource(bundle: R.hostingBundle, name: "marketr_descending")
    /// Image `network_error`.
    public static let network_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "network_error")
    /// Image `point`.
    public static let point = Rswift.ImageResource(bundle: R.hostingBundle, name: "point")
    /// Image `quota_bell`.
    public static let quota_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "quota_bell")
    /// Image `selected`.
    public static let selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected")
    /// Image `splash_slogen`.
    public static let splash_slogen = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_slogen")
    /// Image `success`.
    public static let success = Rswift.ImageResource(bundle: R.hostingBundle, name: "success")
    /// Image `switch_mode_icon`.
    public static let switch_mode_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch_mode_icon")
    /// Image `tabber_shadow`.
    public static let tabber_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabber_shadow")
    /// Image `unselected`.
    public static let unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselected")
    /// Image `vite`.
    public static let vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "vite")
    /// Image `vitex_balance_left`.
    public static let vitex_balance_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "vitex_balance_left")
    /// Image `vitex_balance_switch`.
    public static let vitex_balance_switch = Rswift.ImageResource(bundle: R.hostingBundle, name: "vitex_balance_switch")
    /// Image `vote_info_bg`.
    public static let vote_info_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_info_bg")
    /// Image `vote_info_dot`.
    public static let vote_info_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_info_dot")
    /// Image `vote_info_icon`.
    public static let vote_info_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_info_icon")
    
    /// `UIImage(named: "aboutus_logo", bundle: ..., traitCollection: ...)`
    public static func aboutus_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutus_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_add_button_white", bundle: ..., traitCollection: ...)`
    public static func background_add_button_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_add_button_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_address_add_button_white", bundle: ..., traitCollection: ...)`
    public static func background_address_add_button_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_address_add_button_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_button_blue", bundle: ..., traitCollection: ...)`
    public static func background_button_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_button_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_button_gray", bundle: ..., traitCollection: ...)`
    public static func background_button_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_button_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_button_white", bundle: ..., traitCollection: ...)`
    public static func background_button_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_button_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "beifen", bundle: ..., traitCollection: ...)`
    public static func beifen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.beifen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blue_dotted_line", bundle: ..., traitCollection: ...)`
    public static func blue_dotted_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue_dotted_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bnb_transaction_icon", bundle: ..., traitCollection: ...)`
    public static func bnb_transaction_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bnb_transaction_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bnb_transaction_other_icon", bundle: ..., traitCollection: ...)`
    public static func bnb_transaction_other_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bnb_transaction_other_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_path_bg", bundle: ..., traitCollection: ...)`
    public static func btn_path_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_path_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubble_left", bundle: ..., traitCollection: ...)`
    public static func bubble_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubble_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubble_right", bundle: ..., traitCollection: ...)`
    public static func bubble_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubble_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crosschain_depoist", bundle: ..., traitCollection: ...)`
    public static func crosschain_depoist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosschain_depoist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crosschain_deposie_switch", bundle: ..., traitCollection: ...)`
    public static func crosschain_deposie_switch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosschain_deposie_switch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crosschain_operat_deposit", bundle: ..., traitCollection: ...)`
    public static func crosschain_operat_deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosschain_operat_deposit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crosschain_operat_withdraw", bundle: ..., traitCollection: ...)`
    public static func crosschain_operat_withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosschain_operat_withdraw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crosschain_status_confirm", bundle: ..., traitCollection: ...)`
    public static func crosschain_status_confirm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosschain_status_confirm, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crosschain_status_failure", bundle: ..., traitCollection: ...)`
    public static func crosschain_status_failure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosschain_status_failure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crosschain_status_gateway", bundle: ..., traitCollection: ...)`
    public static func crosschain_status_gateway(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosschain_status_gateway, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crosschain_status_vite", bundle: ..., traitCollection: ...)`
    public static func crosschain_status_vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosschain_status_vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crosschain_withdrwa", bundle: ..., traitCollection: ...)`
    public static func crosschain_withdrwa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosschain_withdrwa, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dex_nav_bg", bundle: ..., traitCollection: ...)`
    public static func dex_nav_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dex_nav_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dotted_line", bundle: ..., traitCollection: ...)`
    public static func dotted_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotted_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "empty", bundle: ..., traitCollection: ...)`
    public static func empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exchange_arrow", bundle: ..., traitCollection: ...)`
    public static func exchange_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exchange_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exchange_button_icon", bundle: ..., traitCollection: ...)`
    public static func exchange_button_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exchange_button_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exchange_hisrory_arrow", bundle: ..., traitCollection: ...)`
    public static func exchange_hisrory_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exchange_hisrory_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exchange_icon", bundle: ..., traitCollection: ...)`
    public static func exchange_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exchange_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exchange_middle_line", bundle: ..., traitCollection: ...)`
    public static func exchange_middle_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exchange_middle_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exchange_txs", bundle: ..., traitCollection: ...)`
    public static func exchange_txs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exchange_txs, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "face_id", bundle: ..., traitCollection: ...)`
    public static func face_id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face_id, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fetch_gift_bg", bundle: ..., traitCollection: ...)`
    public static func fetch_gift_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fetch_gift_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fetch_gift_icon", bundle: ..., traitCollection: ...)`
    public static func fetch_gift_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fetch_gift_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fingerprint", bundle: ..., traitCollection: ...)`
    public static func fingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fingerprint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gasSlider", bundle: ..., traitCollection: ...)`
    public static func gasSlider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gasSlider, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gateway", bundle: ..., traitCollection: ...)`
    public static func gateway(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gateway, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gateway_label_layer", bundle: ..., traitCollection: ...)`
    public static func gateway_label_layer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gateway_label_layer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gift", bundle: ..., traitCollection: ...)`
    public static func gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gift, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin", bundle: ..., traitCollection: ...)`
    public static func grin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_cancled", bundle: ..., traitCollection: ...)`
    public static func grin_detail_cancled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_cancled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_cancled_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_cancled_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_cancled_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_confirmed", bundle: ..., traitCollection: ...)`
    public static func grin_detail_confirmed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_confirmed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_confirmed_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_confirmed_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_confirmed_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_confirmedconbase", bundle: ..., traitCollection: ...)`
    public static func grin_detail_confirmedconbase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_confirmedconbase, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_created", bundle: ..., traitCollection: ...)`
    public static func grin_detail_created(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_created, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_created_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_created_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_created_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_gateway", bundle: ..., traitCollection: ...)`
    public static func grin_detail_gateway(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_gateway, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_gateway_confirmed", bundle: ..., traitCollection: ...)`
    public static func grin_detail_gateway_confirmed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_gateway_confirmed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_gateway_confirmed_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_gateway_confirmed_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_gateway_confirmed_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_gateway_received", bundle: ..., traitCollection: ...)`
    public static func grin_detail_gateway_received(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_gateway_received, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_gateway_received_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_gateway_received_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_gateway_received_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_line_blue", bundle: ..., traitCollection: ...)`
    public static func grin_detail_line_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_line_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_line_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_line_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_line_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_normal", bundle: ..., traitCollection: ...)`
    public static func grin_detail_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_poasting", bundle: ..., traitCollection: ...)`
    public static func grin_detail_poasting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_poasting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_poasting_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_poasting_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_poasting_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_received", bundle: ..., traitCollection: ...)`
    public static func grin_detail_received(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_received, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_received_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_received_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_received_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_vite", bundle: ..., traitCollection: ...)`
    public static func grin_detail_vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_waitToFinzlize", bundle: ..., traitCollection: ...)`
    public static func grin_detail_waitToFinzlize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_waitToFinzlize, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_waitToFinzlize_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_waitToFinzlize_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_waitToFinzlize_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_waitToSign", bundle: ..., traitCollection: ...)`
    public static func grin_detail_waitToSign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_waitToSign, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_detail_waitToSign_gray", bundle: ..., traitCollection: ...)`
    public static func grin_detail_waitToSign_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_detail_waitToSign_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_gray", bundle: ..., traitCollection: ...)`
    public static func grin_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_help", bundle: ..., traitCollection: ...)`
    public static func grin_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_methd_bg", bundle: ..., traitCollection: ...)`
    public static func grin_methd_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_methd_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_node_edit", bundle: ..., traitCollection: ...)`
    public static func grin_node_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_node_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_node_selected", bundle: ..., traitCollection: ...)`
    public static func grin_node_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_node_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_node_unselected", bundle: ..., traitCollection: ...)`
    public static func grin_node_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_node_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_teach_file", bundle: ..., traitCollection: ...)`
    public static func grin_teach_file(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_teach_file, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_teach_file_cn", bundle: ..., traitCollection: ...)`
    public static func grin_teach_file_cn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_teach_file_cn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_teach_http_receive", bundle: ..., traitCollection: ...)`
    public static func grin_teach_http_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_teach_http_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_teach_http_receive_cn", bundle: ..., traitCollection: ...)`
    public static func grin_teach_http_receive_cn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_teach_http_receive_cn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_teach_http_send", bundle: ..., traitCollection: ...)`
    public static func grin_teach_http_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_teach_http_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_teach_http_send_cn", bundle: ..., traitCollection: ...)`
    public static func grin_teach_http_send_cn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_teach_http_send_cn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_teach_vite", bundle: ..., traitCollection: ...)`
    public static func grin_teach_vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_teach_vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_teach_vite_cn", bundle: ..., traitCollection: ...)`
    public static func grin_teach_vite_cn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_teach_vite_cn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_tx_file_finalize", bundle: ..., traitCollection: ...)`
    public static func grin_tx_file_finalize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_tx_file_finalize, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_tx_file_init", bundle: ..., traitCollection: ...)`
    public static func grin_tx_file_init(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_tx_file_init, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_tx_file_receive", bundle: ..., traitCollection: ...)`
    public static func grin_tx_file_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_tx_file_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_tx_receive", bundle: ..., traitCollection: ...)`
    public static func grin_tx_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_tx_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_tx_send", bundle: ..., traitCollection: ...)`
    public static func grin_tx_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_tx_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_cancled", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_cancled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_cancled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_confirmed", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_confirmed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_confirmed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_confirmedConebase", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_confirmedConebase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_confirmedConebase, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_receive_gatewayConfirmed", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_receive_gatewayConfirmed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_receive_gatewayConfirmed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_receive_gatewayReceived", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_receive_gatewayReceived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_receive_gatewayReceived, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_receive_received", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_receive_received(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_receive_received, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_receive_waitToReceive", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_receive_waitToReceive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_receive_waitToReceive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_send_created", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_send_created(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_send_created, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_send_posting", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_send_posting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_send_posting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "grin_txlist_send_waitToFinalize", bundle: ..., traitCollection: ...)`
    public static func grin_txlist_send_waitToFinalize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grin_txlist_send_waitToFinalize, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_address_default_title_frame", bundle: ..., traitCollection: ...)`
    public static func icon_address_default_title_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_address_default_title_frame, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_address_name", bundle: ..., traitCollection: ...)`
    public static func icon_address_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_address_name, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_address_name_blue", bundle: ..., traitCollection: ...)`
    public static func icon_address_name_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_address_name_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_background", bundle: ..., traitCollection: ...)`
    public static func icon_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_balance_detail_arrows", bundle: ..., traitCollection: ...)`
    public static func icon_balance_detail_arrows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_balance_detail_arrows, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_balance_detail_exchange", bundle: ..., traitCollection: ...)`
    public static func icon_balance_detail_exchange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_balance_detail_exchange, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_balance_detail_pledge", bundle: ..., traitCollection: ...)`
    public static func icon_balance_detail_pledge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_balance_detail_pledge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_balance_detail_vote", bundle: ..., traitCollection: ...)`
    public static func icon_balance_detail_vote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_balance_detail_vote, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_balance_quota_arrows", bundle: ..., traitCollection: ...)`
    public static func icon_balance_quota_arrows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_balance_quota_arrows, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bifrost_right_arrow", bundle: ..., traitCollection: ...)`
    public static func icon_bifrost_right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bifrost_right_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_add", bundle: ..., traitCollection: ...)`
    public static func icon_button_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_address_add", bundle: ..., traitCollection: ...)`
    public static func icon_button_address_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_address_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_address_scan", bundle: ..., traitCollection: ...)`
    public static func icon_button_address_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_address_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_address_type", bundle: ..., traitCollection: ...)`
    public static func icon_button_address_type(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_address_type, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_bitcointalk", bundle: ..., traitCollection: ...)`
    public static func icon_button_bitcointalk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_bitcointalk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_discord", bundle: ..., traitCollection: ...)`
    public static func icon_button_discord(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_discord, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_facebook", bundle: ..., traitCollection: ...)`
    public static func icon_button_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_forum", bundle: ..., traitCollection: ...)`
    public static func icon_button_forum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_forum, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_github", bundle: ..., traitCollection: ...)`
    public static func icon_button_github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_github, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_infor", bundle: ..., traitCollection: ...)`
    public static func icon_button_infor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_infor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_light", bundle: ..., traitCollection: ...)`
    public static func icon_button_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_medium", bundle: ..., traitCollection: ...)`
    public static func icon_button_medium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_medium, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_blue", bundle: ..., traitCollection: ...)`
    public static func icon_button_paste_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_gray", bundle: ..., traitCollection: ...)`
    public static func icon_button_paste_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_light_gray", bundle: ..., traitCollection: ...)`
    public static func icon_button_paste_light_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_light_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_white", bundle: ..., traitCollection: ...)`
    public static func icon_button_paste_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_reddit", bundle: ..., traitCollection: ...)`
    public static func icon_button_reddit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_reddit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_scan_gray", bundle: ..., traitCollection: ...)`
    public static func icon_button_scan_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_scan_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_telegram", bundle: ..., traitCollection: ...)`
    public static func icon_button_telegram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_telegram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_tip", bundle: ..., traitCollection: ...)`
    public static func icon_button_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_tip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_twitter", bundle: ..., traitCollection: ...)`
    public static func icon_button_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_vb_disconnect", bundle: ..., traitCollection: ...)`
    public static func icon_button_vb_disconnect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_vb_disconnect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_wechat", bundle: ..., traitCollection: ...)`
    public static func icon_button_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_wechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_wechat-1", bundle: ..., traitCollection: ...)`
    public static func icon_button_wechat1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_wechat1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_weibo", bundle: ..., traitCollection: ...)`
    public static func icon_button_weibo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_weibo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_youtube", bundle: ..., traitCollection: ...)`
    public static func icon_button_youtube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_youtube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cell_select", bundle: ..., traitCollection: ...)`
    public static func icon_cell_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cell_unselect", bundle: ..., traitCollection: ...)`
    public static func icon_cell_unselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_unselect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_contacts", bundle: ..., traitCollection: ...)`
    public static func icon_contacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_contacts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_contacts_contact", bundle: ..., traitCollection: ...)`
    public static func icon_contacts_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_contacts_contact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_contacts_contact_blue", bundle: ..., traitCollection: ...)`
    public static func icon_contacts_contact_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_contacts_contact_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_contacts_empty", bundle: ..., traitCollection: ...)`
    public static func icon_contacts_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_contacts_empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_home_address_arrows", bundle: ..., traitCollection: ...)`
    public static func icon_dex_home_address_arrows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_home_address_arrows, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_home_hide", bundle: ..., traitCollection: ...)`
    public static func icon_dex_home_hide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_home_hide, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_home_hide_selected", bundle: ..., traitCollection: ...)`
    public static func icon_dex_home_hide_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_home_hide_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_home_sort_a2z", bundle: ..., traitCollection: ...)`
    public static func icon_dex_home_sort_a2z(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_home_sort_a2z, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_home_sort_default", bundle: ..., traitCollection: ...)`
    public static func icon_dex_home_sort_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_home_sort_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_home_sort_z2a", bundle: ..., traitCollection: ...)`
    public static func icon_dex_home_sort_z2a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_home_sort_z2a, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_token_deposit", bundle: ..., traitCollection: ...)`
    public static func icon_dex_token_deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_token_deposit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_token_send", bundle: ..., traitCollection: ...)`
    public static func icon_dex_token_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_token_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_token_trading", bundle: ..., traitCollection: ...)`
    public static func icon_dex_token_trading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_token_trading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_token_transfer", bundle: ..., traitCollection: ...)`
    public static func icon_dex_token_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_token_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_token_withdraw", bundle: ..., traitCollection: ...)`
    public static func icon_dex_token_withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_token_withdraw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_transfer_in", bundle: ..., traitCollection: ...)`
    public static func icon_dex_transfer_in(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_transfer_in, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_dex_transfer_out", bundle: ..., traitCollection: ...)`
    public static func icon_dex_transfer_out(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dex_transfer_out, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_edit_name", bundle: ..., traitCollection: ...)`
    public static func icon_edit_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_edit_name, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eth_detail_falied", bundle: ..., traitCollection: ...)`
    public static func icon_eth_detail_falied(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eth_detail_falied, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eth_detail_success", bundle: ..., traitCollection: ...)`
    public static func icon_eth_detail_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eth_detail_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_eth_detail_wait", bundle: ..., traitCollection: ...)`
    public static func icon_eth_detail_wait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eth_detail_wait, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_genesis_button", bundle: ..., traitCollection: ...)`
    public static func icon_genesis_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_genesis_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_hide_pwd", bundle: ..., traitCollection: ...)`
    public static func icon_hide_pwd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_hide_pwd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_logo", bundle: ..., traitCollection: ...)`
    public static func icon_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_logo_chain_bnb", bundle: ..., traitCollection: ...)`
    public static func icon_logo_chain_bnb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_logo_chain_bnb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_logo_chain_eth", bundle: ..., traitCollection: ...)`
    public static func icon_logo_chain_eth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_logo_chain_eth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_logo_chain_vite", bundle: ..., traitCollection: ...)`
    public static func icon_logo_chain_vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_logo_chain_vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_anonymous", bundle: ..., traitCollection: ...)`
    public static func icon_market_anonymous(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_anonymous, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_change", bundle: ..., traitCollection: ...)`
    public static func icon_market_change(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_change, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_detail_discord", bundle: ..., traitCollection: ...)`
    public static func icon_market_detail_discord(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_detail_discord, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_detail_facebook", bundle: ..., traitCollection: ...)`
    public static func icon_market_detail_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_detail_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_detail_reddit", bundle: ..., traitCollection: ...)`
    public static func icon_market_detail_reddit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_detail_reddit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_detail_telegram", bundle: ..., traitCollection: ...)`
    public static func icon_market_detail_telegram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_detail_telegram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_detail_twitter", bundle: ..., traitCollection: ...)`
    public static func icon_market_detail_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_detail_twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_down", bundle: ..., traitCollection: ...)`
    public static func icon_market_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_fav", bundle: ..., traitCollection: ...)`
    public static func icon_market_fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_fav, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_kline_type", bundle: ..., traitCollection: ...)`
    public static func icon_market_kline_type(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_kline_type, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_logo", bundle: ..., traitCollection: ...)`
    public static func icon_market_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_orderbook_self", bundle: ..., traitCollection: ...)`
    public static func icon_market_orderbook_self(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_orderbook_self, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_un_fav", bundle: ..., traitCollection: ...)`
    public static func icon_market_un_fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_un_fav, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_up", bundle: ..., traitCollection: ...)`
    public static func icon_market_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_market_zero_fee", bundle: ..., traitCollection: ...)`
    public static func icon_market_zero_fee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_market_zero_fee, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mining_staking_add_bg", bundle: ..., traitCollection: ...)`
    public static func icon_mining_staking_add_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mining_staking_add_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mining_staking_list_bg", bundle: ..., traitCollection: ...)`
    public static func icon_mining_staking_list_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mining_staking_list_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mining_trading_btc", bundle: ..., traitCollection: ...)`
    public static func icon_mining_trading_btc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mining_trading_btc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mining_trading_eth", bundle: ..., traitCollection: ...)`
    public static func icon_mining_trading_eth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mining_trading_eth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mining_trading_infor", bundle: ..., traitCollection: ...)`
    public static func icon_mining_trading_infor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mining_trading_infor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mining_trading_item", bundle: ..., traitCollection: ...)`
    public static func icon_mining_trading_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mining_trading_item, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mining_trading_right_white", bundle: ..., traitCollection: ...)`
    public static func icon_mining_trading_right_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mining_trading_right_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mining_trading_usdt", bundle: ..., traitCollection: ...)`
    public static func icon_mining_trading_usdt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mining_trading_usdt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mining_trading_vite", bundle: ..., traitCollection: ...)`
    public static func icon_mining_trading_vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mining_trading_vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mnemonic", bundle: ..., traitCollection: ...)`
    public static func icon_mnemonic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mnemonic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_my_home_forum", bundle: ..., traitCollection: ...)`
    public static func icon_my_home_forum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my_home_forum, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_my_home_invite", bundle: ..., traitCollection: ...)`
    public static func icon_my_home_invite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my_home_invite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_my_home_reward", bundle: ..., traitCollection: ...)`
    public static func icon_my_home_reward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_my_home_reward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_add", bundle: ..., traitCollection: ...)`
    public static func icon_nav_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_back_black", bundle: ..., traitCollection: ...)`
    public static func icon_nav_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_back_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_back_black_gray", bundle: ..., traitCollection: ...)`
    public static func icon_nav_back_black_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_back_black_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_back_black_offset", bundle: ..., traitCollection: ...)`
    public static func icon_nav_back_black_offset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_back_black_offset, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_close_black", bundle: ..., traitCollection: ...)`
    public static func icon_nav_close_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_close_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_mine", bundle: ..., traitCollection: ...)`
    public static func icon_nav_mine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_mine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_more", bundle: ..., traitCollection: ...)`
    public static func icon_nav_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_photo_black", bundle: ..., traitCollection: ...)`
    public static func icon_nav_photo_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_photo_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_qrcode_black", bundle: ..., traitCollection: ...)`
    public static func icon_nav_qrcode_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_qrcode_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_refresh", bundle: ..., traitCollection: ...)`
    public static func icon_nav_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_scan_black", bundle: ..., traitCollection: ...)`
    public static func icon_nav_scan_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_scan_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_search", bundle: ..., traitCollection: ...)`
    public static func icon_nav_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_share_black", bundle: ..., traitCollection: ...)`
    public static func icon_nav_share_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_share_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_price_hide_button", bundle: ..., traitCollection: ...)`
    public static func icon_price_hide_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_price_hide_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_price_show_button", bundle: ..., traitCollection: ...)`
    public static func icon_price_show_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_price_show_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_quota", bundle: ..., traitCollection: ...)`
    public static func icon_quota(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_quota, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_quota_close", bundle: ..., traitCollection: ...)`
    public static func icon_quota_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_quota_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_quota_time", bundle: ..., traitCollection: ...)`
    public static func icon_quota_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_quota_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_receive_logo", bundle: ..., traitCollection: ...)`
    public static func icon_receive_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_receive_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_right_white", bundle: ..., traitCollection: ...)`
    public static func icon_right_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_right_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_search", bundle: ..., traitCollection: ...)`
    public static func icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_security", bundle: ..., traitCollection: ...)`
    public static func icon_security(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_security, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    public static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_show_pwd", bundle: ..., traitCollection: ...)`
    public static func icon_show_pwd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_show_pwd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_add", bundle: ..., traitCollection: ...)`
    public static func icon_spot_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_bubble_center", bundle: ..., traitCollection: ...)`
    public static func icon_spot_bubble_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_bubble_center, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_bubble_left", bundle: ..., traitCollection: ...)`
    public static func icon_spot_bubble_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_bubble_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_bubble_right", bundle: ..., traitCollection: ...)`
    public static func icon_spot_bubble_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_bubble_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_filter", bundle: ..., traitCollection: ...)`
    public static func icon_spot_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_filter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_history_arrows", bundle: ..., traitCollection: ...)`
    public static func icon_spot_history_arrows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_history_arrows, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_kilne", bundle: ..., traitCollection: ...)`
    public static func icon_spot_kilne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_kilne, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_order_cancel_button_frame", bundle: ..., traitCollection: ...)`
    public static func icon_spot_order_cancel_button_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_order_cancel_button_frame, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_sub", bundle: ..., traitCollection: ...)`
    public static func icon_spot_sub(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_sub, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_transfer", bundle: ..., traitCollection: ...)`
    public static func icon_spot_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_vip_close", bundle: ..., traitCollection: ...)`
    public static func icon_spot_vip_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_vip_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot_vip_open", bundle: ..., traitCollection: ...)`
    public static func icon_spot_vip_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot_vip_open, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_debug", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_debug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_debug, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_debug_select", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_debug_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_debug_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_dex", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_dex(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_dex, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_dex_select", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_dex_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_dex_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_market", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_market(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_market, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_market_select", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_market_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_market_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_trading", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_trading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_trading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_trading_select", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_trading_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_trading_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_wallet", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_wallet_select", bundle: ..., traitCollection: ...)`
    public static func icon_tabbar_wallet_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_wallet_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tick", bundle: ..., traitCollection: ...)`
    public static func icon_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_token_info_add_button", bundle: ..., traitCollection: ...)`
    public static func icon_token_info_add_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_token_info_add_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_token_info_frame", bundle: ..., traitCollection: ...)`
    public static func icon_token_info_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_token_info_frame, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_token_vite", bundle: ..., traitCollection: ...)`
    public static func icon_token_vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_token_vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_token_vite_white", bundle: ..., traitCollection: ...)`
    public static func icon_token_vite_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_token_vite_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_trading_segment_selected_fram", bundle: ..., traitCollection: ...)`
    public static func icon_trading_segment_selected_fram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_trading_segment_selected_fram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_trading_segment_unselected_fram", bundle: ..., traitCollection: ...)`
    public static func icon_trading_segment_unselected_fram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_trading_segment_unselected_fram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tutorial", bundle: ..., traitCollection: ...)`
    public static func icon_tutorial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tutorial, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_coin", bundle: ..., traitCollection: ...)`
    public static func icon_tx_coin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_coin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_contract", bundle: ..., traitCollection: ...)`
    public static func icon_tx_contract(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_contract, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_pledge", bundle: ..., traitCollection: ...)`
    public static func icon_tx_pledge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_pledge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_receive", bundle: ..., traitCollection: ...)`
    public static func icon_tx_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_register", bundle: ..., traitCollection: ...)`
    public static func icon_tx_register(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_register, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_reward", bundle: ..., traitCollection: ...)`
    public static func icon_tx_reward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_reward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_send", bundle: ..., traitCollection: ...)`
    public static func icon_tx_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_vote", bundle: ..., traitCollection: ...)`
    public static func icon_tx_vote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_vote, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vb_placeholder_busy", bundle: ..., traitCollection: ...)`
    public static func icon_vb_placeholder_busy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vb_placeholder_busy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vb_placeholder_free", bundle: ..., traitCollection: ...)`
    public static func icon_vb_placeholder_free(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vb_placeholder_free, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vite_exchange", bundle: ..., traitCollection: ...)`
    public static func icon_vite_exchange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vite_exchange, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vite_logo", bundle: ..., traitCollection: ...)`
    public static func icon_vite_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vite_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vitex_transfer_down_arrows", bundle: ..., traitCollection: ...)`
    public static func icon_vitex_transfer_down_arrows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vitex_transfer_down_arrows, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vote_rank", bundle: ..., traitCollection: ...)`
    public static func icon_vote_rank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vote_rank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_voteaddress", bundle: ..., traitCollection: ...)`
    public static func icon_voteaddress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_voteaddress, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_votecount", bundle: ..., traitCollection: ...)`
    public static func icon_votecount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_votecount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_home_nav_bg", bundle: ..., traitCollection: ...)`
    public static func icon_wallet_home_nav_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_home_nav_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_wechat_qrcode", bundle: ..., traitCollection: ...)`
    public static func image_wechat_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_wechat_qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "infor_white", bundle: ..., traitCollection: ...)`
    public static func infor_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infor_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_en", bundle: ..., traitCollection: ...)`
    public static func intro_en(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_en, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_icon_0", bundle: ..., traitCollection: ...)`
    public static func intro_icon_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_icon_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_icon_1", bundle: ..., traitCollection: ...)`
    public static func intro_icon_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_icon_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_icon_2", bundle: ..., traitCollection: ...)`
    public static func intro_icon_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_icon_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_icon_3", bundle: ..., traitCollection: ...)`
    public static func intro_icon_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_icon_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_zh", bundle: ..., traitCollection: ...)`
    public static func intro_zh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_zh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_page_user", bundle: ..., traitCollection: ...)`
    public static func lock_page_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_page_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_bg", bundle: ..., traitCollection: ...)`
    public static func login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_logo", bundle: ..., traitCollection: ...)`
    public static func login_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_ascend_default", bundle: ..., traitCollection: ...)`
    public static func market_ascend_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_ascend_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_history_delet", bundle: ..., traitCollection: ...)`
    public static func market_history_delet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_history_delet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_mining_both", bundle: ..., traitCollection: ...)`
    public static func market_mining_both(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_mining_both, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_mining_both_num", bundle: ..., traitCollection: ...)`
    public static func market_mining_both_num(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_mining_both_num, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_mining_order", bundle: ..., traitCollection: ...)`
    public static func market_mining_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_mining_order, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_mining_order_num", bundle: ..., traitCollection: ...)`
    public static func market_mining_order_num(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_mining_order_num, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_mining_trade", bundle: ..., traitCollection: ...)`
    public static func market_mining_trade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_mining_trade, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_search", bundle: ..., traitCollection: ...)`
    public static func market_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_star_gray", bundle: ..., traitCollection: ...)`
    public static func market_star_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_star_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_star_yellow", bundle: ..., traitCollection: ...)`
    public static func market_star_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_star_yellow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "market_top_bg", bundle: ..., traitCollection: ...)`
    public static func market_top_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.market_top_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "marketr_ascending", bundle: ..., traitCollection: ...)`
    public static func marketr_ascending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marketr_ascending, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "marketr_descending", bundle: ..., traitCollection: ...)`
    public static func marketr_descending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marketr_descending, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "network_error", bundle: ..., traitCollection: ...)`
    public static func network_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.network_error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "point", bundle: ..., traitCollection: ...)`
    public static func point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.point, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "quota_bell", bundle: ..., traitCollection: ...)`
    public static func quota_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quota_bell, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selected", bundle: ..., traitCollection: ...)`
    public static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_slogen", bundle: ..., traitCollection: ...)`
    public static func splash_slogen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_slogen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "success", bundle: ..., traitCollection: ...)`
    public static func success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch_mode_icon", bundle: ..., traitCollection: ...)`
    public static func switch_mode_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switch_mode_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabber_shadow", bundle: ..., traitCollection: ...)`
    public static func tabber_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabber_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unselected", bundle: ..., traitCollection: ...)`
    public static func unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vite", bundle: ..., traitCollection: ...)`
    public static func vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vitex_balance_left", bundle: ..., traitCollection: ...)`
    public static func vitex_balance_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vitex_balance_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vitex_balance_switch", bundle: ..., traitCollection: ...)`
    public static func vitex_balance_switch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vitex_balance_switch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_info_bg", bundle: ..., traitCollection: ...)`
    public static func vote_info_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_info_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_info_dot", bundle: ..., traitCollection: ...)`
    public static func vote_info_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_info_dot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_info_icon", bundle: ..., traitCollection: ...)`
    public static func vote_info_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_info_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  public struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 1142 localization keys.
    public struct localizable {
      /// en translation: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailUnit = Rswift.StringResource(key: "crosschain.tokenDetail.unit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation:      The advice comes from the using environment as below: 1.System device: %@ 2.System version:%@ 3.APP version: %@ 4.Language:%@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageEmailContent = Rswift.StringResource(key: "aboutUs.page.email.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation:  Billion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let unitBillion = Rswift.StringResource(key: "unit.Billion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation:  Million
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let unitMillion = Rswift.StringResource(key: "unit.Million", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation:  Trillion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let unitTrillion = Rswift.StringResource(key: "unit.Trillion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: %@ Chain Unconfirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatusWaitToConfirm = Rswift.StringResource(key: "crosschain.status.waitToConfirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: %@ Confirmations
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionConfirmations = Rswift.StringResource(key: "transaction.list.transaction.confirmations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: %@ UTPS
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageQuotaContent = Rswift.StringResource(key: "send.page.quota.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: %@ contact address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressListPageOtherTitle = Rswift.StringResource(key: "address.list.page.other.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: %@ players are playing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageGameCellPalyNum = Rswift.StringResource(key: "discover.page.game.cell.palyNum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: %@d ago
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageNewsCellTimeDay = Rswift.StringResource(key: "discover.page.news.cell.time.day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: %@h ago
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageNewsCellTimeHour = Rswift.StringResource(key: "discover.page.news.cell.time.hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: %d new asset(s)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenListPageIgnoreLabTitle = Rswift.StringResource(key: "token.list.page.ignore.lab.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: (%@ Quota)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailUnconfirmedQuotaTitle = Rswift.StringResource(key: "balance.info.detail.unconfirmed.quota.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: (%@). Please check the transaction history before trying again
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageEthFailed = Rswift.StringResource(key: "send.page.eth.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 0 Quota/0 Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailPledgeNoneTip = Rswift.StringResource(key: "balance.info.detail.pledge.none.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 1 Day
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterDate1d = Rswift.StringResource(key: "spot.history.page.filter.date.1d", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 1 Month
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterDate1m = Rswift.StringResource(key: "spot.history.page.filter.date.1m", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 1 Week
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterDate1w = Rswift.StringResource(key: "spot.history.page.filter.date.1w", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 1. Initialization is required upon adding GRIN wallet 2. The process is expected to last 15 minutes 3. Do not interrupt or kill the APP during initialization 4. Initialization will consume a large amount of cellular data, it is recommended to continue the process on Wi-Fi.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinInitingDetail = Rswift.StringResource(key: "grin.initing.detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 12H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageKlineTypeHour12Title = Rswift.StringResource(key: "market.detail.page.kline.type.hour12.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 1D
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageKlineTypeDay1Title = Rswift.StringResource(key: "market.detail.page.kline.type.day1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 1H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageKlineTypeHour1Title = Rswift.StringResource(key: "market.detail.page.kline.type.hour1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 1W
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageKlineTypeWeek1Title = Rswift.StringResource(key: "market.detail.page.kline.type.week1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 1m
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageKlineTypeMin1Title = Rswift.StringResource(key: "market.detail.page.kline.type.min1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 24H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageInfoVolTitle = Rswift.StringResource(key: "market.detail.page.info.vol.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 24H Expected Mined
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningOrderPageHeaderEstimate = Rswift.StringResource(key: "mining.order.page.header.estimate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 24H Expected Mined
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningTradingPageHeaderExpect = Rswift.StringResource(key: "mining.trading.page.header.expect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 2H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageKlineTypeHour2Title = Rswift.StringResource(key: "market.detail.page.kline.type.hour2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 3 Months
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterDate3m = Rswift.StringResource(key: "spot.history.page.filter.date.3m", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 30m
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageKlineTypeMin30Title = Rswift.StringResource(key: "market.detail.page.kline.type.min30.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 4H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageKlineTypeHour4Title = Rswift.StringResource(key: "market.detail.page.kline.type.hour4.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 6H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageKlineTypeHour6Title = Rswift.StringResource(key: "market.detail.page.kline.type.hour6.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">About Cross-Chain Deposit</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Making a cross-chain deposit allows %@ to be mapped into the Vite network. After that, you will also be able to make a cross-chain withdrawal. %@ balance in your Vite wallet will be reduced accordingly when you make a cross-chain deposit from your Vite wallet.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositAbout = Rswift.StringResource(key: "crosschain.deposit.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">About Cross-Chain Deposit</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Making a cross-chain deposit allows %@ to be mapped into the Vite network. After that, you will also be able to make a cross-chain withdrawal.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositOtherAbout = Rswift.StringResource(key: "crosschain.deposit.other.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">About Voting</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">You can join and vote for 25 SBPs(Snapshot Block Producer), each round of voting lasts 75s, your votes equals the balance of your vote address. Your vote keeps the same the next rounds unless you revoke your vote or vote for another node. Random 23 out of top 25 candidates plus 2 out of candidates ranking 26th to 100th, 25 nodes in total will be elected as SBPs.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let popPageTipVote = Rswift.StringResource(key: "pop.page.tip.vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">Understand VITE Conversion</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">You can convert ERC20 VITE  into VITE at Vite Pre-Mainnet through VITE conversion. During conversion, your ERC20 VITE will be transferred to Ethereum black hole address: 0x1111111111111111111111111111111111111111, and you will receive the same amount of VITE in your Vite address after the transaction to Ethereum black hole address has completed. During the conversion, fee of transaction to the Ethereum black hole address come from your current ETH address. After submitting the conversion, please wait at least 30 confirmations in Ethereum network, you can find the transaction history in conversion history.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let popPageTipEthViteExchange = Rswift.StringResource(key: "pop.page.tip.ethViteExchange", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is Quota?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">In the Vite system, users do not purchase the gas required for a transaction by paying a fee, but acquire the computing resource through a quota-based model. Required quota for sending a transaction = the basic quota (request) + quota (the attached text data), quota required to accept a transaction = the basic quota (response). This quota-based resource configuration protocol allows users to obtain higher resource quotas in two ways: </p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">a.Staking VITE to obtain quota</p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">b.Running PoW</p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Unit of Quota: UTPS, Unit of Transaction per Second.</p><h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is Staking?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">In the Vite system, the user can stake VITE to obtain a certain amount of quota. The minimum value for staking is 134 VITE, and there is no maximum limit; meanwhile, Vite system also supports that the A-address stakes a part of the VITE and allocates the obtained quota to the B address. When users apply to stake, VITE will be sent to the smart contract address instead of another user, and only the user who applies for staking has access to manage the staking amount.</p><h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is PoW?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Proof of Work (PoW), is a protocol to confirm that you have done a certain amount of work, and is also an economic measure to deter DDoS attacks and other service abuse. It requires the initiator to conduct a certain amount of computing, which means that it may take some time for the computer. In the Vite system, users can obtain a free quota by running the PoW, and also can send a transaction without any annotated information through obtained quota.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let popPageTipQuota = Rswift.StringResource(key: "pop.page.tip.quota", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: <p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">%@ you had voted for has stopped campaigning for SBP, you may vote again or revoke your vote. If you do not do so, your original vote will be recovered after %@ re-registering.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let popPageTipVoteLoser = Rswift.StringResource(key: "pop.page.tip.vote.loser", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: A minimum of 10 VX must be staked to receive dividends. Submission of staking request allows for dividends starting the nearest distribution
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockConfirmTip = Rswift.StringResource(key: "dividends.page.lock.confirm.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: About Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawAboutfee = Rswift.StringResource(key: "crosschain.withdraw.aboutfee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: About Us
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageAboutUsCellTitle = Rswift.StringResource(key: "my.page.aboutUs.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Account Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageTfTitle = Rswift.StringResource(key: "create.page.tf.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Account Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let manageWalletPageNameCellTitle = Rswift.StringResource(key: "manage.wallet.page.name.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Account balances will update after %@ network confirmations. Please be patient.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositMinComfirm = Rswift.StringResource(key: "crosschain.deposit.minComfirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Account name only supports Chinese and English characters as well as underscores.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageErrorTypeNameValid = Rswift.StringResource(key: "mnemonic.backup.page.error.type.nameValid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Active
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let votePageNodeStatusValidTitle = Rswift.StringResource(key: "vote.page.nodeStatus.valid.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Actual Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinReceiveTureAmount = Rswift.StringResource(key: "grin.receive.ture.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Add
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsHomePageAddButtonTitle = Rswift.StringResource(key: "contacts.home.page.add.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Add
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageDetailAddButtonTitle = Rswift.StringResource(key: "mining.staking.page.detail.add.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Add Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageAddressGenerateButtonTitle = Rswift.StringResource(key: "address.manage.address.generate.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Add Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageAddTitle = Rswift.StringResource(key: "contacts.edit.page.add.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Add Custom Node
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let nodeSettingsPageAddButtonTitle = Rswift.StringResource(key: "node.settings.page.add.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Add Custom PoW
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let powSettingsPageAddButtonTitle = Rswift.StringResource(key: "pow.settings.page.add.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Add New Full Node
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinNodeAddNode = Rswift.StringResource(key: "grin.node.addNode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Add up to maximum 100 addresses!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageAddressGenerateButtonToast = Rswift.StringResource(key: "address.manage.address.generate.button.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Add your first address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsHomePageNoContactTip = Rswift.StringResource(key: "contacts.home.page.no.contact.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Adding...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicAffirmPageAddLoading = Rswift.StringResource(key: "mnemonic.affirm.page.add.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostHomePageFreeAddressTitle = Rswift.StringResource(key: "bifrost.home.page.free.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let voteListAddress = Rswift.StringResource(key: "vote.list.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Address Management
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let manageWalletPageAddressManageCellTitle = Rswift.StringResource(key: "manage.wallet.page.addressManage.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Address already exists
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageAddressGenerateButtonAlreadyToast = Rswift.StringResource(key: "address.manage.address.generate.button.already.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Addresses
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageAddressHeaderTitle = Rswift.StringResource(key: "address.manage.address.header.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Adjust Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexAdjustFeesFunctionTitle = Rswift.StringResource(key: "buildin.dex.adjust.fees.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Adjusted Maker Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexAdjustFeesItemMakerTitle = Rswift.StringResource(key: "buildin.dex.adjust.fees.item.maker.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Adjusted Taker Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexAdjustFeesItemTakerTitle = Rswift.StringResource(key: "buildin.dex.adjust.fees.item.taker.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Airdrop is only supported on iOS 11 and above.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let airdropErrorTipNeedUpdate = Rswift.StringResource(key: "airdrop.error.tip.need.update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsHomePageFilterAll = Rswift.StringResource(key: "contacts.home.page.filter.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageExchangeAllButtonTitle = Rswift.StringResource(key: "eth.vite.exchange.page.exchange.all.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundDepositAll = Rswift.StringResource(key: "fund.deposit.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageAllButtonTitle = Rswift.StringResource(key: "send.page.all.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterAll = Rswift.StringResource(key: "spot.history.page.filter.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Already exists
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let powSettingsPageNodeExistError = Rswift.StringResource(key: "pow.settings.page.node.exist.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostCreateContractTitleAmount = Rswift.StringResource(key: "bifrost.create.contract.title.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationTitleAmount = Rswift.StringResource(key: "bifrost.operation.title.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinReissueTokenItem3Title = Rswift.StringResource(key: "buildin.coin.reissue.token.item3.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexBecomeVipItem1Title = Rswift.StringResource(key: "buildin.dex.become.vip.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexCancelStakingAsMiningItem1Title = Rswift.StringResource(key: "buildin.dex.cancel.staking.as.mining.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexCancelVipItem1Title = Rswift.StringResource(key: "buildin.dex.cancel.vip.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexLockVxItem1Title = Rswift.StringResource(key: "buildin.dex.lock.vx.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexStakingAsMiningItem1Title = Rswift.StringResource(key: "buildin.dex.staking.as.mining.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexUnLockVxItem1Title = Rswift.StringResource(key: "buildin.dex.un.lock.vx.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinTransferCrossChainItem0Title = Rswift.StringResource(key: "buildin.transfer.cross.chain.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinTransferUtf8stringItem1Title = Rswift.StringResource(key: "buildin.transfer.utf8string.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionAmountTitle = Rswift.StringResource(key: "confirm.transaction.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockConfirmAmount = Rswift.StringResource(key: "dividends.page.lock.confirm.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockConfirmAmount = Rswift.StringResource(key: "dividends.page.unlock.confirm.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailAmount = Rswift.StringResource(key: "eth.transaction.detail.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentAmount = Rswift.StringResource(key: "grin.sent.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTradeVolTitle = Rswift.StringResource(key: "market.detail.page.trade.vol.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageConfirmAmountTitle = Rswift.StringResource(key: "mining.staking.page.confirm.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageAmountTitle = Rswift.StringResource(key: "send.page.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageDepthVol = Rswift.StringResource(key: "spot.page.depth.vol", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageVolBuyPlaceholder = Rswift.StringResource(key: "spot.page.vol.buy.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageVolSellPlaceholder = Rswift.StringResource(key: "spot.page.vol.sell.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transferAmount = Rswift.StringResource(key: "transfer.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount exceeds the %@-%@ limit, please contact gateway@vite.org to send out.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawGatewayispoor = Rswift.StringResource(key: "crosschain.withdraw.gatewayispoor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount(%@)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageDepthVolTitle = Rswift.StringResource(key: "market.detail.page.depth.vol.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amount: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exchangeAmount = Rswift.StringResource(key: "exchange.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Amt.: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCellVol = Rswift.StringResource(key: "spot.page.cell.vol", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: An ID conflict occurs, please re-submit later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorRpcErrorCodeIdConflict = Rswift.StringResource(key: "vite.error.rpc.error.code.id.conflict", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Anonymous
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoAnonymous = Rswift.StringResource(key: "market.detail.page.token.info.anonymous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Approx %@ days
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageQuotaSnapshootHeightDesc = Rswift.StringResource(key: "quota.manage.page.quota.snapshoot.height.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Are you sure to delete this address?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageDeleteAlertTitle = Rswift.StringResource(key: "contacts.edit.page.delete.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: As shown in the picture above, Vite will do the collection and remit for you when you choose to transfer or receive GRIN through HTTP address. There are transaction fees in both the two steps above.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinReceiveByHttpDesc = Rswift.StringResource(key: "grin.receiveByHttp.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Asset
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tabTitleDex = Rswift.StringResource(key: "tab.title.dex", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Assets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let walletHomeHeaderTitle = Rswift.StringResource(key: "wallet.home.header.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Assets ignored will not be informed again, are you sure to ignore the assets below?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenListPageIgnoreAlterTitle = Rswift.StringResource(key: "token.list.page.ignore.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Auto Sign
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostHomePageFreeAutoSignTitle = Rswift.StringResource(key: "bifrost.home.page.free.auto.sign.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Auto-Lock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellLoginPwd = Rswift.StringResource(key: "system.page.cell.login.pwd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Auto-Receive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellAutoReceiveSettings = Rswift.StringResource(key: "system.page.cell.auto.receive.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Automatic Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockAuto = Rswift.StringResource(key: "dividends.page.lock.auto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Avail.: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageAvailable = Rswift.StringResource(key: "spot.page.available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Available
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailAvailableAmountTitle = Rswift.StringResource(key: "balance.info.detail.available.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Available
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderAvailable = Rswift.StringResource(key: "dex.token.detail.page.header.available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundVitexFound = Rswift.StringResource(key: "fund.vitexFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Available Date %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockListTime = Rswift.StringResource(key: "dividends.page.unlock.list.time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Available Date: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageWithdrawPageLockTime = Rswift.StringResource(key: "mining.staking.page.withdraw.page.lock.time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Available Stake Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockConfirmAmountTotal = Rswift.StringResource(key: "dividends.page.unlock.confirm.amount.total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Available Stake Balance：%@ VITE  It takes 7 days to return unstaked VITE coins to exchange balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageWithdrawPageAlertMessage = Rswift.StringResource(key: "mining.staking.page.withdraw.page.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Avg.: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCellAverage = Rswift.StringResource(key: "spot.page.cell.average", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Awaiting Confirmation
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinBalanceAwaiting = Rswift.StringResource(key: "grin.balance.awaiting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Awaiting Finalization
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxbyfileReceivedStatusSender = Rswift.StringResource(key: "grin.txbyfile.receivedStatus.sender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Awaiting Receiving
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxbyfileInitStatusReceiver = Rswift.StringResource(key: "grin.txbyfile.initStatus.receiver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Awaiting Signature
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostListPageStatusPending = Rswift.StringResource(key: "bifrost.list.page.status.pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: BNB Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbSendPageAddressTitleLabelTitleLabelTitle = Rswift.StringResource(key: "bnb.send.page.addressTitleLabel.titleLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: BNB Contacts
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbSendPageEthContactsButtonTitle = Rswift.StringResource(key: "bnb.send.page.eth.contacts.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Back
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostAlertApproveSessionAnotherAddressCancel = Rswift.StringResource(key: "bifrost.alert.approve.session.another.address.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Back
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowConfirmPageBiometryAuthFailedBack = Rswift.StringResource(key: "workflow.confirm.page.biometryAuthFailed.back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Back Up Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageTipButtonSkipTitle = Rswift.StringResource(key: "create.page.tip.button.skip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Back Up Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageTipSkipTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.skip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Back Up Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupTipAlertCancelTitle = Rswift.StringResource(key: "mnemonic.backup.tip.alert.cancel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Back Up Now
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupTipAlertOkTitle = Rswift.StringResource(key: "mnemonic.backup.tip.alert.ok.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Backed Up
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageTipButtonNextTitle = Rswift.StringResource(key: "create.page.tip.button.next.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Backed Up
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageTipNextBtnTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.nextBtn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Backup Instructions
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageTipTitle = Rswift.StringResource(key: "create.page.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailBalanceTitle = Rswift.StringResource(key: "balance.info.detail.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageTitle = Rswift.StringResource(key: "dex.token.detail.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageMyBalanceTitle = Rswift.StringResource(key: "eth.vite.exchange.page.my.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageMyBalanceTitle = Rswift.StringResource(key: "send.page.my.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let walletHomeBalanceTitle = Rswift.StringResource(key: "wallet.home.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Balance: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transferAvailable = Rswift.StringResource(key: "transfer.available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Become a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexBecomeVipFunctionTitle = Rswift.StringResource(key: "buildin.dex.become.vip.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Become a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexVipTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.vip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Become a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageOpenVip = Rswift.StringResource(key: "spot.page.open.vip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Beneficiary
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let peldgeAddressTitle = Rswift.StringResource(key: "peldge.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Beneficiary Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinReissueTokenItem2Title = Rswift.StringResource(key: "buildin.coin.reissue.token.item2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Benefits
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let airdropProfit = Rswift.StringResource(key: "airdrop.profit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Binance Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenListPageSectionBnbHeader = Rswift.StringResource(key: "token.list.page.section.bnb.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Biometric Verification
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let lockPageFingerprintBtnTitle = Rswift.StringResource(key: "lock.page.fingerprint.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Block
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailBlock = Rswift.StringResource(key: "eth.transaction.detail.block", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Block Height
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageHeightTitle = Rswift.StringResource(key: "vite.transaction.detail.page.height.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Built-in contract error, please try again later(-35004)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorRpcErrorCodeContractDataIllegal = Rswift.StringResource(key: "vite.error.rpc.error.code.contract.data.illegal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Built-in contract method not exist, please try again later(-35006)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorRpcErrorCodeContractMethodNotExist = Rswift.StringResource(key: "vite.error.rpc.error.code.contract.method.not.exist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Bulk generate a specified number of addresses
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageAlertTip = Rswift.StringResource(key: "address.manage.alert.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Burn
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeBurnTokenTitle = Rswift.StringResource(key: "bnb.txType.burnToken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exchangeBuy = Rswift.StringResource(key: "exchange.buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageBuyButtonTitle = Rswift.StringResource(key: "market.detail.page.buy.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterSideBuy = Rswift.StringResource(key: "spot.history.page.filter.side.buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageButtonBuyTitle = Rswift.StringResource(key: "spot.page.button.buy.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCellTypeBuy = Rswift.StringResource(key: "spot.page.cell.type.buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Buy %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexBuyTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.buy.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Buy VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exchangeCardTitle = Rswift.StringResource(key: "exchange.card.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Buy VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowTipFloatViewBuy1 = Rswift.StringResource(key: "quota.pow.tip.float.view.buy.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: By clicking Next, you agree with the %@'s %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementAgree = Rswift.StringResource(key: "crosschain.statement.agree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: By using services from %@, you agree to be bound by %@ %@. If you do not agree to these terms, please refrain from using service from %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementOtherDesc1 = Rswift.StringResource(key: "crosschain.statement.other.desc1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: By using services from %@, you agree to be bound by %@ %@. If you do not agree to these terms, please refrain from using service from %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementViteDesc1 = Rswift.StringResource(key: "crosschain.statement.vite.desc1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Call
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameContract = Rswift.StringResource(key: "transaction.list.transaction.type.name.contract", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Call Contract Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageStateCallFailed = Rswift.StringResource(key: "vite.transaction.detail.page.state.call.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Call Contract Succeeded
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageStateCallSuccess = Rswift.StringResource(key: "vite.transaction.detail.page.state.call.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let cancelButtonTitle = Rswift.StringResource(key: "cancel.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexCancelOrderTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.cancel.order.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let importPageAlertExistCancel = Rswift.StringResource(key: "import.page.alert.exist.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupScanAlertCancelTitle = Rswift.StringResource(key: "mnemonic.backup.scan.alert.cancel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaSubmitPopCancelBtnTitle = Rswift.StringResource(key: "quota.submit.pop.cancel.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageNotEnoughBalanceAlertButton = Rswift.StringResource(key: "send.page.not.enough.balance.alert.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCellButtonCancelTitle = Rswift.StringResource(key: "spot.page.cell.button.cancel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let submitCancel = Rswift.StringResource(key: "Submit.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel Order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeCancelOrderTitle = Rswift.StringResource(key: "bnb.txType.cancelOrder.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel Order on ViteX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationVxCancelOrder = Rswift.StringResource(key: "bifrost.operation.vx.cancel.order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel SBP Registration
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationCancelRegisterSbp = Rswift.StringResource(key: "bifrost.operation.cancel.register.sbp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel Staking as Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexCancelStakingAsMiningFunctionTitle = Rswift.StringResource(key: "buildin.dex.cancel.staking.as.mining.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexCancelVipFunctionTitle = Rswift.StringResource(key: "buildin.dex.cancel.vip.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexCancelVipTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.cancel.vip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancel VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCloseVip = Rswift.StringResource(key: "spot.page.close.vip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Canceled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostListPageStatusCanceled = Rswift.StringResource(key: "bifrost.list.page.status.canceled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Canceled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinCanceled = Rswift.StringResource(key: "grin.canceled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Canceled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxCancele = Rswift.StringResource(key: "grin.tx.Cancele", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Canceled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxTypeCanceled = Rswift.StringResource(key: "grin.txType.Canceled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cancelled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterStatusCanceled = Rswift.StringResource(key: "spot.history.page.filter.status.canceled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Candidate Nodes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let voteListTitle = Rswift.StringResource(key: "vote.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cannot be identified
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowConfirmPageBiometryAuthFailedTitle = Rswift.StringResource(key: "workflow.confirm.page.biometryAuthFailed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Caution! Loss of mnemonic words will result in loss of all digital assets in the wallet.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageTipContent1 = Rswift.StringResource(key: "create.page.tip.content1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Change
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketPercent = Rswift.StringResource(key: "market.percent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Change Password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let changePasswordPageTitle = Rswift.StringResource(key: "change.password.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Change to Non-issuable
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinChangeToNonissuableFunctionTitle = Rswift.StringResource(key: "buildin.coin.change.to.nonissuable.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Check
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinWalletCheck = Rswift.StringResource(key: "grin.wallet.check", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Check Genesis Block Records
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListPageGenesisCellName = Rswift.StringResource(key: "transaction.list.page.genesis.cell.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Check transaction history in Ethereum Explorer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailShowTransactionsButtonTitle = Rswift.StringResource(key: "balance.info.detail.show.transactions.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Claim Rewards
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationExtractReward = Rswift.StringResource(key: "bifrost.operation.extract.reward", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Clear
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterButtonClear = Rswift.StringResource(key: "spot.history.page.filter.button.clear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Close
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Close
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageValueCloseTitle = Rswift.StringResource(key: "market.detail.page.value.close.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Coin Forging Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailAddress = Rswift.StringResource(key: "crosschain.tokenDetail.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Coinbase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailFromMine = Rswift.StringResource(key: "grin.detail.fromMine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Comfirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexVipConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.vip.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Comment
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinTransferUtf8stringItem2Title = Rswift.StringResource(key: "buildin.transfer.utf8string.item2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Comment
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let receivePageTokenNoteLabel = Rswift.StringResource(key: "Receive.page.token.note.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Completed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterStatusCompleted = Rswift.StringResource(key: "spot.history.page.filter.status.completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Computing PoW to Secure Quota for this Transaction...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaFloatViewTitle = Rswift.StringResource(key: "quota.float.view.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Configurate Full Node.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinNodeConfigNode = Rswift.StringResource(key: "grin.node.configNode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirm = Rswift.StringResource(key: "Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmButtonTitle = Rswift.StringResource(key: "confirm.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageEthConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.eth.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageGrinConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.grin.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteCallContractConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.call.contract.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteCancelVoteConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.cancel.vote.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexBuyConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.buy.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexCancelOrderConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.cancel.order.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexCancelVipConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.cancel.vip.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexDepositConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.deposit.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexSellConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.sell.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexWithdrawConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.withdraw.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageVitePledgeConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.pledge.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteVoteConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.vite.vote.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let importPageAlertExistOk = Rswift.StringResource(key: "import.page.alert.exist.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicAffirmPageTitle = Rswift.StringResource(key: "mnemonic.affirm.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupScanAlertOkTitle = Rswift.StringResource(key: "mnemonic.backup.scan.alert.ok.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaSubmitPopSubmitBtnTitle = Rswift.StringResource(key: "quota.submit.pop.submit.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageAlertOk = Rswift.StringResource(key: "spot.page.alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let voteListConfirmRevote = Rswift.StringResource(key: "vote.list.confirm.revote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm account creation with the following mnemonic words?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupScanAlertMessage = Rswift.StringResource(key: "mnemonic.backup.scan.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm to Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageConfirmButtonTitle = Rswift.StringResource(key: "mining.staking.page.confirm.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirm to login
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostAlertApproveSessionAnotherAddressOk = Rswift.StringResource(key: "bifrost.alert.approve.session.another.address.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatusConfirmed = Rswift.StringResource(key: "crosschain.status.confirmed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxTypeConfirmed = Rswift.StringResource(key: "grin.txType.confirmed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionConfirmationsFinished = Rswift.StringResource(key: "transaction.list.transaction.confirmations.finished", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Confirmed Coinbase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxTypeConfirmedCoinbase = Rswift.StringResource(key: "grin.txType.confirmedCoinbase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Connection Error, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostErrorMessageUnknown = Rswift.StringResource(key: "bifrost.error.message.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Connection time out, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostErrorMessageTimeout = Rswift.StringResource(key: "bifrost.error.message.timeout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsHomePageTitle = Rswift.StringResource(key: "contacts.home.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageContactsCellTitle = Rswift.StringResource(key: "my.page.contacts.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Contact Us
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageCellContact = Rswift.StringResource(key: "aboutUs.page.cell.contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Contract Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostCreateContractTitleContractAddress = Rswift.StringResource(key: "bifrost.create.contract.title.contract.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Contract Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationTitleContractAddress = Rswift.StringResource(key: "bifrost.operation.title.contract.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Contract Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contractConfirmInfo = Rswift.StringResource(key: "contract.confirm.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Contract Invoke
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationFunctionTitle = Rswift.StringResource(key: "bifrost.operation.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Conversion Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageAmountTitle = Rswift.StringResource(key: "eth.vite.exchange.page.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Conversion History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageExchangeHistoryButtonTitle = Rswift.StringResource(key: "eth.vite.exchange.page.exchange.history.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Convert
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageEthViteExchangeConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.eth.vite.exchange.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Convert
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageSendButtonTitle = Rswift.StringResource(key: "eth.vite.exchange.page.send.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Convert %@ VITE at most
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageAmountPlaceholder = Rswift.StringResource(key: "eth.vite.exchange.page.amount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Copy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxCopyId = Rswift.StringResource(key: "grin.tx.copyId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Copy HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachHttpReceiveCopyHttpAddress = Rswift.StringResource(key: "grin.teach.http.receive.copyHttpAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Copy VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachViteReceiveCopyViteAddress = Rswift.StringResource(key: "grin.teach.vite.receive.copyViteAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Countdown
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let airdropLeftTime = Rswift.StringResource(key: "airdrop.leftTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Creat and sync, 3 mins estimated
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinCreatSyncronizing = Rswift.StringResource(key: "grin.creat.syncronizing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Create
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageSubmitBtnTitle = Rswift.StringResource(key: "create.page.submit.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Create
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinPayTitleCreat = Rswift.StringResource(key: "grin.pay.title.creat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Create API
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationSignMessageTitle = Rswift.StringResource(key: "bifrost.operation.sign.message.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Create Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createAccount = Rswift.StringResource(key: "create.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Create Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageTitle = Rswift.StringResource(key: "create.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Create Contract
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostCreateContractTitle = Rswift.StringResource(key: "bifrost.create.contract.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Created
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinReceiveSented = Rswift.StringResource(key: "grin.receive.sented", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Created
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxFileInitStatus = Rswift.StringResource(key: "grin.txFile.init.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Created
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxTypeSent = Rswift.StringResource(key: "grin.txType.sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Created
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxbyfileInitStatusSender = Rswift.StringResource(key: "grin.txbyfile.initStatus.sender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Creation Time
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinCreatTime = Rswift.StringResource(key: "grin.creatTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cross-Chain
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoTypeValueOther = Rswift.StringResource(key: "market.detail.page.token.info.type.value.other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cross-Chain Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDeposit = Rswift.StringResource(key: "crosschain.deposit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cross-Chain Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationAcrossChainWithdraw = Rswift.StringResource(key: "bifrost.operation.across.chain.withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cross-Chain Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinTransferCrossChainFunctionTitle = Rswift.StringResource(key: "buildin.transfer.cross.chain.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cross-Chain Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdraw = Rswift.StringResource(key: "crosschain.withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cross-Chain gateway
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoGateway = Rswift.StringResource(key: "market.detail.page.token.info.gateway", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Cross-Chain gateway
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageGateway = Rswift.StringResource(key: "token.info.detail.page.gateway", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Currency
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellChangeCurrency = Rswift.StringResource(key: "system.page.cell.change.currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationSignMessageAddress = Rswift.StringResource(key: "bifrost.operation.sign.message.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexAdjustFeesItem1Title = Rswift.StringResource(key: "buildin.dex.adjust.fees.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexBecomeVipItem0Title = Rswift.StringResource(key: "buildin.dex.become.vip.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexCancelStakeItem0Title = Rswift.StringResource(key: "buildin.dex.cancel.stake.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexCancelStakingAsMiningItem0Title = Rswift.StringResource(key: "buildin.dex.cancel.staking.as.mining.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexCancelVipItem0Title = Rswift.StringResource(key: "buildin.dex.cancel.vip.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexLockVxItem0Title = Rswift.StringResource(key: "buildin.dex.lock.vx.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexOpenTradingPairItem1Title = Rswift.StringResource(key: "buildin.dex.open.trading.pair.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexRecoverTradingPairItem1Title = Rswift.StringResource(key: "buildin.dex.recover.trading.pair.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexStakingAsMiningItem0Title = Rswift.StringResource(key: "buildin.dex.staking.as.mining.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexSuspendTradingPairItem1Title = Rswift.StringResource(key: "buildin.dex.suspend.trading.pair.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexUnLockVxItem0Title = Rswift.StringResource(key: "buildin.dex.un.lock.vx.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current Height
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageCellBlockHeight = Rswift.StringResource(key: "aboutUs.page.cell.blockHeight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current is a beta version, Please don't deposit large amount in your account.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainBetaAlert = Rswift.StringResource(key: "crosschain.beta.alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Current trading fees displayed on this page contains only the 0.2% ViteX base transaction fees, please note that operator fees shall be taken into consideration when calculating mining cost
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningTradingPageHeaderTotalEarningsAlertMessage = Rswift.StringResource(key: "mining.trading.page.header.total.earnings.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Currently Vite App only supports checking staking list, please go to Web Wallet to withdraw staked tokens on due date if needed.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let peldgeMessage = Rswift.StringResource(key: "peldge.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Customer Service
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let gatewayInfoDetailPageEmail = Rswift.StringResource(key: "gateway.info.detail.page.email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: DApps
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageHeaderTitleGame = Rswift.StringResource(key: "discover.page.headerTitle.game", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: DApps
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageVCWebTitleGame = Rswift.StringResource(key: "discover.page.VCWebTitle.game", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: DEX Assets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexHomePageNavTitle = Rswift.StringResource(key: "dex.home.page.nav.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Daily Transaction Limit %@ VITE; Unused Daily Limit: %@ VITE   
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exchangeLimitOneday = Rswift.StringResource(key: "exchange.limit.oneday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Data
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostCreateContractTitleData = Rswift.StringResource(key: "bifrost.create.contract.title.data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Data
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationTitleData = Rswift.StringResource(key: "bifrost.operation.title.data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Date
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterDateTitle = Rswift.StringResource(key: "spot.history.page.filter.date.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Decimals
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem4Title = Rswift.StringResource(key: "buildin.coin.issuance.item4.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Decimals
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailDigit = Rswift.StringResource(key: "crosschain.tokenDetail.digit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Default Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageDefaultAddressCellTitle = Rswift.StringResource(key: "address.manage.default.address.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageDeleteButtonTitle = Rswift.StringResource(key: "contacts.edit.page.delete.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Delete Current Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellDeleteWalletTitle = Rswift.StringResource(key: "system.page.cell.delete.wallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeDepositTitle = Rswift.StringResource(key: "bnb.txType.deposit.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositBtnTitle = Rswift.StringResource(key: "crosschain.deposit.btnTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexHomePageHeaderButtonDepositTitle = Rswift.StringResource(key: "dex.home.page.header.button.deposit.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageButtonDeposit = Rswift.StringResource(key: "dex.token.detail.page.button.deposit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositAddress = Rswift.StringResource(key: "crosschain.deposit.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositAll = Rswift.StringResource(key: "crosschain.deposit.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositAmount = Rswift.StringResource(key: "crosschain.deposit.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatusFailed = Rswift.StringResource(key: "crosschain.status.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositHistory = Rswift.StringResource(key: "crosschain.deposit.history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit by Gateway
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatusGatewayReceived = Rswift.StringResource(key: "crosschain.status.gatewayReceived", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit from Another Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositOtherwallet = Rswift.StringResource(key: "crosschain.deposit.otherwallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit from Vite Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositVitewallet = Rswift.StringResource(key: "crosschain.deposit.vitewallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit to Exchange
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexDepositTransferTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.deposit.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Deposit to Exchange
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundTitleToVitex = Rswift.StringResource(key: "fund.title.toVitex", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Description
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailDesc = Rswift.StringResource(key: "crosschain.tokenDetail.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailPageTitle = Rswift.StringResource(key: "eth.transaction.detail.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Discover
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageTitle = Rswift.StringResource(key: "discover.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Discover
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tabTitleDiscover = Rswift.StringResource(key: "tab.title.discover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Do not ask again in 24 hours
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageConfirmTip = Rswift.StringResource(key: "spot.page.confirm.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Don't show me again
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinNotSeeAgain = Rswift.StringResource(key: "grin.notSeeAgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let finish = Rswift.StringResource(key: "Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: EN
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupLanguageEn = Rswift.StringResource(key: "mnemonic.backup.language.en", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: ETH Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethSendPageMyAddressTitle = Rswift.StringResource(key: "eth.send.page.my.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: ETH Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageMyAddressTitle = Rswift.StringResource(key: "eth.vite.exchange.page.my.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: ETH Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethSendPageEthContactsButtonTitle = Rswift.StringResource(key: "eth.send.page.eth.contacts.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Ecosystem
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageHeaderTitleActivity = Rswift.StringResource(key: "discover.page.headerTitle.activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Ecosystem
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageVCWebTitleActivity = Rswift.StringResource(key: "discover.page.VCWebTitle.activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Edit Account Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageChangeWalletNameAlterTitle = Rswift.StringResource(key: "my.page.change.wallet.name.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Edit Address Alias
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageChangeNameAlertTitle = Rswift.StringResource(key: "address.manage.change.name.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Edit Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageEditTitle = Rswift.StringResource(key: "contacts.edit.page.edit.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Edit Wallet Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let manageWalletPageAlterChangeName = Rswift.StringResource(key: "manage.wallet.page.alter.changeName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Editing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let manageWalletPageChangeNameLoading = Rswift.StringResource(key: "manage.wallet.page.changeName.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Eligible for mining when price is greater than %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageBuyMiningTip = Rswift.StringResource(key: "spot.page.buy.mining.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Eligible for mining when price is less than %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageSellMiningTip = Rswift.StringResource(key: "spot.page.sell.mining.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Empty
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListPageEmpty = Rswift.StringResource(key: "transaction.list.page.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Enter confirm password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let changePasswordPageNew2Title = Rswift.StringResource(key: "change.password.page.new.2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Enter invitation code or scan invitation QR code to enjoy 10% off trading fees and premiere mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageInviteCodeTitle = Rswift.StringResource(key: "create.page.invite.code.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Enter new password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let changePasswordPageNew1Title = Rswift.StringResource(key: "change.password.page.new.1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Enter the old password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let changePasswordPageOldTitle = Rswift.StringResource(key: "change.password.page.old.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Ethereum Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenListPageSectionEthHeader = Rswift.StringResource(key: "token.list.page.section.eth.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Exceed the limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatusTotExceedLimit = Rswift.StringResource(key: "crosschain.status.tot.exceed.limit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Exchange
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketSwitch = Rswift.StringResource(key: "market.switch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Exchange Asset
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundTitleVitex = Rswift.StringResource(key: "fund.title.vitex", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Exchange Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexVipBalance = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.vip.balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Exchange Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockConfirmAmountTotal = Rswift.StringResource(key: "dividends.page.lock.confirm.amount.total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Exchange Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundVitexAvailable = Rswift.StringResource(key: "fund.vitex.available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Exchange Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageConfirmAvailableTitle = Rswift.StringResource(key: "mining.staking.page.confirm.available.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Exchange Total Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundVitexAll = Rswift.StringResource(key: "fund.vitex.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Explorer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoBrowser = Rswift.StringResource(key: "market.detail.page.token.info.browser", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Explorer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageBrowser = Rswift.StringResource(key: "token.info.detail.page.browser", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Export Grin Seed Phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinExportMnemonic = Rswift.StringResource(key: "grin.export.mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Export Seed Phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exportPageTitle = Rswift.StringResource(key: "export.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Export Seed Phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let manageWalletPageImportMnemonicCellTitle = Rswift.StringResource(key: "manage.wallet.page.importMnemonic.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Face ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellLoginFaceId = Rswift.StringResource(key: "system.page.cell.login.faceId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterStatusFailed = Rswift.StringResource(key: "spot.history.page.filter.status.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Failed to connect with the full node.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinNodeSelectCanNotConnect = Rswift.StringResource(key: "grin.node.select.canNotConnect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Failure
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostListPageStatusFailed = Rswift.StringResource(key: "bifrost.list.page.status.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fast
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethPageGasFeeFastTitle = Rswift.StringResource(key: "eth.page.gasFee.fast.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Favorites
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketFavourite = Rswift.StringResource(key: "market.favourite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostCreateContractTitleFee = Rswift.StringResource(key: "bifrost.create.contract.title.fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationTitleFee = Rswift.StringResource(key: "bifrost.operation.title.fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbSendPageFeeViewTitleLabelTitle = Rswift.StringResource(key: "bnb.send.page.feeView.titleLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinTransferCrossChainItem1Title = Rswift.StringResource(key: "buildin.transfer.cross.chain.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionFeeTitle = Rswift.StringResource(key: "confirm.transaction.fee.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainFee = Rswift.StringResource(key: "crosschain.fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fee of single cross-chain withdrawal: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawFeeDesc2 = Rswift.StringResource(key: "crosschain.withdraw.fee.desc2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Feedback
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageEmailTitle = Rswift.StringResource(key: "aboutUs.page.email.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentFee = Rswift.StringResource(key: "grin.sent.fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningTradingPageCellFee = Rswift.StringResource(key: "mining.trading.page.cell.fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Filled: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCellDeal = Rswift.StringResource(key: "spot.page.cell.deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Finalize
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinPayTitleFinalize = Rswift.StringResource(key: "grin.pay.title.finalize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Finalize and Broadcast
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinFinalize = Rswift.StringResource(key: "grin.finalize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Free Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowTipFloatViewNotNow2 = Rswift.StringResource(key: "quota.pow.tip.float.view.notNow.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Freeze Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeFreezeTokenTitle = Rswift.StringResource(key: "bnb.txType.freezeToken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: From
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transferFrom = Rswift.StringResource(key: "transfer.from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Full Node Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinNodeEditNodeAddressTitle = Rswift.StringResource(key: "grin.node.edit.nodeAddressTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: GRIN Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSendPageViteContactsButtonTitle = Rswift.StringResource(key: "grin.sendPageViteContactsButtonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: GRIN Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenListPageSectionGrinHeader = Rswift.StringResource(key: "token.list.page.section.grin.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gas Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethPageGasFeeTitle = Rswift.StringResource(key: "eth.page.gasFee.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gas Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailGasFee = Rswift.StringResource(key: "eth.transaction.detail.gas.fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gas Limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailGasLimit = Rswift.StringResource(key: "eth.transaction.detail.gas.limit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gas Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailGasPrice = Rswift.StringResource(key: "eth.transaction.detail.gas.price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gateway Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainGatewaydetailTitle = Rswift.StringResource(key: "crosschain.gatewaydetail.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gateway Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let gatewayInfoDetailPageTitle = Rswift.StringResource(key: "gateway.info.detail.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gateway Introduction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let gatewayInfoDetailPageBrief = Rswift.StringResource(key: "gateway.info.detail.page.brief", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gateway Link
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let gatewayInfoDetailPageLink = Rswift.StringResource(key: "gateway.info.detail.page.link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gateway Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainGatewaydetailName = Rswift.StringResource(key: "crosschain.gatewaydetail.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gateway Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let gatewayInfoDetailPageName = Rswift.StringResource(key: "gateway.info.detail.page.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gateway Official Site
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let gatewayInfoDetailPageWebside = Rswift.StringResource(key: "gateway.info.detail.page.webside", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Gateway URL
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainGatewaydetailHost = Rswift.StringResource(key: "crosschain.gatewaydetail.host", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Generate New Addresses
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageAlertTitle = Rswift.StringResource(key: "address.manage.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Generate Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentCreatFile = Rswift.StringResource(key: "grin.sent.creatFile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailPledge = Rswift.StringResource(key: "balance.info.detail.pledge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationPledge = Rswift.StringResource(key: "bifrost.operation.pledge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageVitePledgeTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.pledge.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageTitle = Rswift.StringResource(key: "quota.manage.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowTipFloatViewTitle2 = Rswift.StringResource(key: "quota.pow.tip.float.view.title.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Get Started with ViteX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketAbout = Rswift.StringResource(key: "market.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Get TPS quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNamePledge = Rswift.StringResource(key: "transaction.list.transaction.type.name.pledge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Get quota now
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowTipFloatViewPledge1 = Rswift.StringResource(key: "quota.pow.tip.float.view.pledge.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Github
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoGithub = Rswift.StringResource(key: "market.detail.page.token.info.github", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Github
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageGithub = Rswift.StringResource(key: "token.info.detail.page.github", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Grin wallet initializing, please wait a moment.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinCreating = Rswift.StringResource(key: "grin.creating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Grin wallet temporarily unavailable. Access your account on another Grin supported wallet app with your Recovery Phrase.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinCloseTips = Rswift.StringResource(key: "grin.close.tips", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinHttpAddress = Rswift.StringResource(key: "grin.http.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentStillUseHttp = Rswift.StringResource(key: "grin.sent.stillUseHttp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxMethodHttp = Rswift.StringResource(key: "grin.txMethod.http", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Help
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let airdropHelp = Rswift.StringResource(key: "airdrop.help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Hide Small Balances
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexHomePageHeaderButtonHideSmallTitle = Rswift.StringResource(key: "dex.home.page.header.button.hide.small.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: High
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageInfoHighTitle = Rswift.StringResource(key: "market.detail.page.info.high.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: High
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageValueHighTitle = Rswift.StringResource(key: "market.detail.page.value.high.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageListWalletHeaterTitle = Rswift.StringResource(key: "dex.token.detail.page.list.wallet.heater.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageActivityPageTitle2 = Rswift.StringResource(key: "discover.page.activity.page.title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageOrdersButtonTitle = Rswift.StringResource(key: "spot.page.orders.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: I have already read, understood and I agree to our 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageCheckButton3Title = Rswift.StringResource(key: "mnemonic.backup.page.check.button3.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: I know
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageTipAlertOk = Rswift.StringResource(key: "address.manage.tip.alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: I know
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinIknow = Rswift.StringResource(key: "grin.iknow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: I know
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinKnow = Rswift.StringResource(key: "grin.know", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: I understand if I forget or lose the mnemonic words, nobody can help to recover
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageCheckButton2Title = Rswift.StringResource(key: "mnemonic.backup.page.check.button2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: I understand if I lose the mnemonic words, I would never find back my assets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageCheckButton1Title = Rswift.StringResource(key: "mnemonic.backup.page.check.button1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: If the state stays "Unreceived" for a long time, please try "Request for Vite gateway to resend".
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxNotReceivedAndCanAskGatewaytoSend = Rswift.StringResource(key: "grin.detail.txNotReceivedAndCanAskGatewaytoSend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: If you want to send GRIN to a Vite Wallet user, sending through VITE address is recommended for it is safer and cheaper.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentSuggestUseViteDesc = Rswift.StringResource(key: "grin.sent.suggest.useVite.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Ignore
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenListPageIgnoreBtnTitle = Rswift.StringResource(key: "token.list.page.ignore.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Illegal transfer amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSendIllegalAmmount = Rswift.StringResource(key: "grin.send.illegalAmmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Import Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let importAccount = Rswift.StringResource(key: "import.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Import success
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let importPageSubmitSuccess = Rswift.StringResource(key: "import.page.submit.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Import...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let importPageSubmitLoading = Rswift.StringResource(key: "import.page.submit.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Important Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementTitle = Rswift.StringResource(key: "crosschain.statement.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Important reminder
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageAlertTitle = Rswift.StringResource(key: "spot.page.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Importing mnemonic words is the only way to retrieve an account after deleting or reinstalling the App.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageTipContent2 = Rswift.StringResource(key: "create.page.tip.content2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: In Order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderLockPlaceOrder = Rswift.StringResource(key: "dex.token.detail.page.header.lock.place.order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: In case of problems with verification or payment processing, please contact %@ support team at %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementOtherDesc2 = Rswift.StringResource(key: "crosschain.statement.other.desc2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: In case of problems with verification or payment processing, please contact %@ support team at %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementViteDesc2 = Rswift.StringResource(key: "crosschain.statement.vite.desc2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: In process
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageWithdrawPageButtonDisTitle = Rswift.StringResource(key: "mining.staking.page.withdraw.page.button.dis.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Inactive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let votePageNodeStatusInvalidTitle = Rswift.StringResource(key: "vote.page.nodeStatus.invalid.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Incorrect seed phrase!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicAffirmAlterCheckTitle = Rswift.StringResource(key: "mnemonic.affirm.alter.check.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Initializing, click to view details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinInitingDesc = Rswift.StringResource(key: "grin.initing.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Input Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let receivePageTokenAmountAlertTitle = Rswift.StringResource(key: "Receive.page.token.amount.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Input Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let receivePageTokenAmountButtonTitle = Rswift.StringResource(key: "Receive.page.token.amount.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Input a number between 1 and 100
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageAlertPlaceholder = Rswift.StringResource(key: "address.manage.alert.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Instant Purchase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exchangeTitley = Rswift.StringResource(key: "exchange.titley", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Instantly Getting Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowFastGetQuotaTitle = Rswift.StringResource(key: "workflow.fast.get.quota.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageNotEnoughBalanceAlertTitle = Rswift.StringResource(key: "send.page.not.enough.balance.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageToastAmountError = Rswift.StringResource(key: "send.page.toast.amount.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaAlertTitle = Rswift.StringResource(key: "quota.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatusFailedBecausePoor = Rswift.StringResource(key: "crosschain.status.failedBecausePoor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethErrorRpcErrorCodeNotEnoughBalance = Rswift.StringResource(key: "eth.error.rpc.error.code.not.enough.balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorRpcErrorCodeNotEnoughBalance = Rswift.StringResource(key: "vite.error.rpc.error.code.not.enough.balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient exchange balance, stake 10,000 VITE to become a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageOpenVipErrorToast = Rswift.StringResource(key: "spot.page.open.vip.error.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowTipFloatViewTitle1 = Rswift.StringResource(key: "quota.pow.tip.float.view.title.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorRpcErrorCodeNotEnoughQuota = Rswift.StringResource(key: "vite.error.rpc.error.code.not.enough.quota", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Insufficient quota of PoW, we would recommend that you stake VITE to obtain quota.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaAlertNeedQuotaMessage = Rswift.StringResource(key: "quota.alert.need.quota.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Introduction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainGatewaydetailAbstract = Rswift.StringResource(key: "crosschain.gatewaydetail.abstract", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Introduction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoBrief = Rswift.StringResource(key: "market.detail.page.token.info.brief", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Introduction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageBrief = Rswift.StringResource(key: "token.info.detail.page.brief", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Invalid Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let votePageVoteStatusVoteInvalid = Rswift.StringResource(key: "vote.page.voteStatus.voteInvalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Invalid node
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let nodeSettingsPageNodeInvalidError = Rswift.StringResource(key: "node.settings.page.node.invalid.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Invitation Code(Optional)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageInviteCodePlaceholder = Rswift.StringResource(key: "create.page.invite.code.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Issuance Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem0Title = Rswift.StringResource(key: "buildin.coin.issuance.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Issuance Date
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailDate = Rswift.StringResource(key: "crosschain.tokenDetail.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Issuance Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem7Title = Rswift.StringResource(key: "buildin.coin.issuance.item7.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Issue Asset
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeIssueTokenTitle = Rswift.StringResource(key: "bnb.txType.issueToken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: It takes about 7 days to unlock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockConfirmTip = Rswift.StringResource(key: "dividends.page.unlock.confirm.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Key
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinNodeEditApiSecretTitle = Rswift.StringResource(key: "grin.node.edit.apiSecretTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellChangeLanguage = Rswift.StringResource(key: "system.page.cell.change.language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Last Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketPrice = Rswift.StringResource(key: "market.price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Last Trades
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageSegmentLastTradesTitle = Rswift.StringResource(key: "market.detail.page.segment.last.trades.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Latest Events
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageActivityPageTitle1 = Rswift.StringResource(key: "discover.page.activity.page.title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Limit Order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageButtonLimitBuyTitle = Rswift.StringResource(key: "spot.page.button.limit.buy.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Limit of cross-chain withdrawal
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawAmountLimitTitle = Rswift.StringResource(key: "crosschain.withdraw.amount.limit.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Listing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeListTokenTitle = Rswift.StringResource(key: "bnb.txType.listToken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Listing Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexOpenTradingPairItem2Title = Rswift.StringResource(key: "buildin.dex.open.trading.pair.item2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Live Mining Dashboard
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningPageHeaderTotalRealTime = Rswift.StringResource(key: "mining.page.header.total.real.time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Loading
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageCellBlockHeightLoadingTip = Rswift.StringResource(key: "aboutUs.page.cell.blockHeight.loading.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Loading
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Loading...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListPageHeaderRefreshRefreshing = Rswift.StringResource(key: "transaction.list.page.header.refresh.refreshing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Loading...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteRefreshBackFooterRefreshingText = Rswift.StringResource(key: "Vite.RefreshBackFooter.RefreshingText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Lock Expiration Date: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageWithdrawPageWithdrawTime = Rswift.StringResource(key: "mining.staking.page.withdraw.page.withdraw.time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Lock Expiration Snapshot Height: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageWithdrawPageHeight = Rswift.StringResource(key: "mining.staking.page.withdraw.page.height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Lock VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowTipFloatViewPledge2 = Rswift.StringResource(key: "quota.pow.tip.float.view.pledge.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Lock period
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageQuotaSnapshootHeightTitle = Rswift.StringResource(key: "quota.manage.page.quota.snapshoot.height.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Locked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailPledgeAmountTitle = Rswift.StringResource(key: "balance.info.detail.pledge.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Locked Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageQuotaMoneyTitle = Rswift.StringResource(key: "quota.manage.page.quota.money.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Locked Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageMyPledgeTitle = Rswift.StringResource(key: "send.page.my.pledge.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Locked by Previous Transaction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinBalanceLocked = Rswift.StringResource(key: "grin.balance.locked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Locking Record
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let peldgeTitle = Rswift.StringResource(key: "peldge.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Locking Record
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageCheckQuotaListBtnTitle = Rswift.StringResource(key: "quota.manage.page.check.quotaList.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Log Uploaded
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellUploadLogToastSuccess = Rswift.StringResource(key: "system.page.cell.upload.log.toast.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let loginPageBtnLogin = Rswift.StringResource(key: "login.page.btn.login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Login Error
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let toastErrorLogin = Rswift.StringResource(key: "toast.error.login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Login via password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let lockPagePwdBtnTitle = Rswift.StringResource(key: "lock.page.pwd.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Logout
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellLogoutTitle = Rswift.StringResource(key: "system.page.cell.logout.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Logout
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageLogoutLoading = Rswift.StringResource(key: "system.page.logout.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Low
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageInfoLowTitle = Rswift.StringResource(key: "market.detail.page.info.low.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Low
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageValueLowTitle = Rswift.StringResource(key: "market.detail.page.value.low.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Main
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexHomePageSegmentWallet = Rswift.StringResource(key: "dex.home.page.segment.wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Main Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transferWalletAccount = Rswift.StringResource(key: "transfer.wallet.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Make sure to logout ViteConnect?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostAlertQuitTitle = Rswift.StringResource(key: "bifrost.alert.quit.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Make sure to stake %@ to obtain quota, you cannot withdraw until about 3 days after staking comes into effect.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaSubmitPopDesc = Rswift.StringResource(key: "quota.submit.pop.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Market-Making
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningPageSegmentMaking = Rswift.StringResource(key: "mining.page.segment.making", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Markets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketTitle = Rswift.StringResource(key: "market.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Markets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tabTitleMarket = Rswift.StringResource(key: "tab.title.market", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Max Buy: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageBuyable = Rswift.StringResource(key: "spot.page.buyable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Max Sell: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageSellable = Rswift.StringResource(key: "spot.page.sellable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Max Supply
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem6Title = Rswift.StringResource(key: "buildin.coin.issuance.item6.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Max amount of single cross-chain withdrawal: %@ %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawAmountLimitMax = Rswift.StringResource(key: "crosschain.withdraw.amount.limit.max", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Max generation: 100 addresses; Manual address retrieval is required for all other but #1 address on the list
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageTipAlertMessage = Rswift.StringResource(key: "address.manage.tip.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Maximum Amount of Tx
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageMyMaxTxCountTitle = Rswift.StringResource(key: "send.page.my.max.tx.count.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Me
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tabbarItemTitleMy = Rswift.StringResource(key: "tabbar.item.title.my", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Memo
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailNote = Rswift.StringResource(key: "eth.transaction.detail.note", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Memo
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageRemarkTitle = Rswift.StringResource(key: "send.page.remark.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Memo
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageNoteTitle = Rswift.StringResource(key: "vite.transaction.detail.page.note.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Min amount of single cross-chain withdrawal: %@ %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawAmountLimitMin = Rswift.StringResource(key: "crosschain.withdraw.amount.limit.min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Mine
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageAddMyAddressButtonTitle = Rswift.StringResource(key: "send.page.add.my.address.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Minimum 1 VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockConfirmError = Rswift.StringResource(key: "dividends.page.lock.confirm.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Minimum 1 VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockConfirmError = Rswift.StringResource(key: "dividends.page.unlock.confirm.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Minimum Deposit Amount 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositMin = Rswift.StringResource(key: "crosschain.deposit.min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Minimum Withdrawal Amount 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawMin = Rswift.StringResource(key: "crosschain.withdraw.min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningTradingPageHeaderTitle = Rswift.StringResource(key: "mining.trading.page.header.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tradingHomePageSegmentMining = Rswift.StringResource(key: "trading.home.page.segment.mining", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Mining History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningPageListTitle = Rswift.StringResource(key: "mining.page.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Mining Referrals
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageInviteCellTitle = Rswift.StringResource(key: "my.page.invite.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: MintMsg
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeMintTitle = Rswift.StringResource(key: "bnb.txType.mint.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Mnemonic Words
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageMnemonicCellTitle = Rswift.StringResource(key: "my.page.mnemonic.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Mnemonic Words Backup
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageTitle = Rswift.StringResource(key: "mnemonic.backup.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Mnemonic Words Unbacked Up
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupTipAlertTitle = Rswift.StringResource(key: "mnemonic.backup.tip.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Modified successfully
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let changePasswordPageSuccessToast = Rswift.StringResource(key: "change.password.page.success.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My %@ Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManagePageTitle = Rswift.StringResource(key: "address.manage.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My %@ Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageMyAddressTitle = Rswift.StringResource(key: "send.page.my.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundWalletAddress = Rswift.StringResource(key: "fund.walletAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My ETH Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawEthMyAddress = Rswift.StringResource(key: "crosschain.withdraw.eth.myAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My ETH Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethReceivePageMyAddressTitle = Rswift.StringResource(key: "eth.receive.page.my.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My QRCode
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let receivePageMineTitle = Rswift.StringResource(key: "Receive.page.mine.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My Reward (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageMyTitle = Rswift.StringResource(key: "dividends.page.my.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockTitle = Rswift.StringResource(key: "dividends.page.lock.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My Vite Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressListPageMyTitle = Rswift.StringResource(key: "address.list.page.my.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: My Votes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, vi-VN, ru-RU
      public static let votePageVoteInfoNodePollsTitle = Rswift.StringResource(key: "vote.page.voteInfo.nodePolls.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: NO
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem5NoValue = Rswift.StringResource(key: "buildin.coin.issuance.item5.no.value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: NOTICE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let alterTitle = Rswift.StringResource(key: "alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: NOTICE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let walletHomeScanUrlAlertTitle = Rswift.StringResource(key: "wallet.home.scan.url.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexAdjustFeesItem0Title = Rswift.StringResource(key: "buildin.dex.adjust.fees.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexOpenTradingPairItem0Title = Rswift.StringResource(key: "buildin.dex.open.trading.pair.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexRecoverTradingPairItem0Title = Rswift.StringResource(key: "buildin.dex.recover.trading.pair.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexSuspendTradingPairItem0Title = Rswift.StringResource(key: "buildin.dex.suspend.trading.pair.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexTransferPairItem0Title = Rswift.StringResource(key: "buildin.dex.transfer.pair.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageNameTitle = Rswift.StringResource(key: "contacts.edit.page.name.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketName = Rswift.StringResource(key: "market.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Native
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoTypeValueNative = Rswift.StringResource(key: "market.detail.page.token.info.type.value.native", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Network Error
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let appSchemeNetworkError = Rswift.StringResource(key: "app.scheme.network.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: News
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageHeaderTitleNews = Rswift.StringResource(key: "discover.page.headerTitle.news", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: News
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageVCWebTitleNews = Rswift.StringResource(key: "discover.page.VCWebTitle.news", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentNext = Rswift.StringResource(key: "grin.sent.next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageAmountToolbarButtonTitle = Rswift.StringResource(key: "send.page.amount.toolbar.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailIssuanceFalse = Rswift.StringResource(key: "crosschain.tokenDetail.issuance.false", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageAlterCancel = Rswift.StringResource(key: "mnemonic.backup.page.alter.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No %@ address yet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressListPageNoAddressTip = Rswift.StringResource(key: "address.list.page.no.address.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No %@ address yet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsHomePageSingleNoContactTip = Rswift.StringResource(key: "contacts.home.page.single.no.contact.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No QR code found
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let scanPageQccodeNotFound = Rswift.StringResource(key: "Scan.page.qccode.not.found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No VIP staked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCloseVipErrorToast = Rswift.StringResource(key: "spot.page.close.vip.error.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, vi-VN, ru-RU
      public static let votePageInfoNodataTitle = Rswift.StringResource(key: "vote.page.info.nodata.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No more data
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteRefreshBackFooterNoMoreDataText = Rswift.StringResource(key: "Vite.RefreshBackFooter.NoMoreDataText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageOrderEmpty = Rswift.StringResource(key: "spot.page.order.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: No result, please try another input
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let voteListSearchEmpty = Rswift.StringResource(key: "vote.list.search.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Node Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteVoteNodeName = Rswift.StringResource(key: "confirm.transaction.page.vite.vote.node.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Node Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let nodeSettingsPageTitle = Rswift.StringResource(key: "node.settings.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Node Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellNodeSettings = Rswift.StringResource(key: "system.page.cell.node.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Not common stake, please try withdrawal where you placed the stake.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let peldgeCancelPledgeAgentErrorToast = Rswift.StringResource(key: "peldge.cancel.pledge.agent.error.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Note that the selected trading pair %@ is being managed by an Unknown Operator. Trade at your own risk.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageAlertMessage = Rswift.StringResource(key: "spot.page.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostAlertTipTitle = Rswift.StringResource(key: "bifrost.alert.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinNoticeTitle = Rswift.StringResource(key: "grin.notice.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentSuggestUseViteTitle = Rswift.StringResource(key: "grin.sent.suggest.useVite.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningTradingPageHeaderTotalEarningsAlertTitle = Rswift.StringResource(key: "mining.trading.page.header.total.earnings.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupScanAlertTitle = Rswift.StringResource(key: "mnemonic.backup.scan.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let nodeSettingsPageSwitchNodeAlertTitle = Rswift.StringResource(key: "node.settings.page.switch.node.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowCongestionWithPowAlertTitle = Rswift.StringResource(key: "workflow.congestion.with.pow.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowCongestionWithoutPowAlertTitle = Rswift.StringResource(key: "workflow.congestion.without.pow.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Now
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageNewsCellTimeMinute = Rswift.StringResource(key: "discover.page.news.cell.time.minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Official Forum
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageForumCellTitle = Rswift.StringResource(key: "my.page.forum.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Official Website
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainGatewaydetailWebset = Rswift.StringResource(key: "crosschain.gatewaydetail.webset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Official website
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoOfficial = Rswift.StringResource(key: "market.detail.page.token.info.official", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Ongoing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterStatusOpen = Rswift.StringResource(key: "spot.history.page.filter.status.open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Only %1$@ can be deposited to the address below. The minimum deposit is %2$@. Deposits less than %3$@ will be locked and unrecoverable.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositMinAmountDesc = Rswift.StringResource(key: "crosschain.deposit.minAmountDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Open
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageValueOpenTitle = Rswift.StringResource(key: "market.detail.page.value.open.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Open Orders
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageSegmentOpen = Rswift.StringResource(key: "spot.history.page.segment.open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Open Orders
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCurrentOrderTitle = Rswift.StringResource(key: "spot.page.current.order.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Open Trading Pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexOpenTradingPairFunctionTitle = Rswift.StringResource(key: "buildin.dex.open.trading.pair.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Open to Additional Issue
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailIssuance = Rswift.StringResource(key: "crosschain.tokenDetail.issuance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Operation Successful
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostToastOperationSuccess = Rswift.StringResource(key: "bifrost.toast.operation.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Operation failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorOperationFailure = Rswift.StringResource(key: "vite.error.operation.failure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Operator
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageSegmentOperatorIntoTitle = Rswift.StringResource(key: "market.detail.page.segment.operator.into.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Operator
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketOperator = Rswift.StringResource(key: "market.operator", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Operator address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoAddress = Rswift.StringResource(key: "market.detail.page.token.info.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Order Cancelled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowToastCancelOrderSuccess = Rswift.StringResource(key: "workflow.toast.cancel.order.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Order Filter
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterTitle = Rswift.StringResource(key: "spot.history.page.filter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Order History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageSegmentHistory = Rswift.StringResource(key: "spot.history.page.segment.history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Order Placed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowToastPlaceOrderSuccess = Rswift.StringResource(key: "workflow.toast.place.order.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Order book
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageSegmentOrderBookTitle = Rswift.StringResource(key: "market.detail.page.segment.order.book.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Orderly select seed phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicAffirmPageTipTitle = Rswift.StringResource(key: "mnemonic.affirm.page.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Orders
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageTitle = Rswift.StringResource(key: "spot.history.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Out of Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethErrorRpcErrorCodeNotEnoughFee = Rswift.StringResource(key: "eth.error.rpc.error.code.not.enough.fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterTokenTitle = Rswift.StringResource(key: "spot.history.page.filter.token.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostHomePageFreeAutoSignConfirmTitle = Rswift.StringResource(key: "bifrost.home.page.free.auto.sign.confirm.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Passwords do not match
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let changePasswordPageNewErrorToast = Rswift.StringResource(key: "change.password.page.new.error.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Payment
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteCallContractTransferTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.call.contract.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Pending
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailPageStateCallWait = Rswift.StringResource(key: "eth.transaction.detail.page.state.call.wait", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Permission Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationSignMessageType = Rswift.StringResource(key: "bifrost.operation.sign.message.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Pick up 10~1000
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let airdropEnabled = Rswift.StringResource(key: "airdrop.enabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Place Order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeNewOrderTitle = Rswift.StringResource(key: "bnb.txType.newOrder.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Place Order on ViteX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationVxOrder = Rswift.StringResource(key: "bifrost.operation.vx.order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please Input Password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exportPageAlterTitle = Rswift.StringResource(key: "export.page.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please confirm that you'd like to get quota by staking 134 VITE from current address. You can withdraw the staked amount from the Stake History section 3 days later.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowFastGetQuotaMessage = Rswift.StringResource(key: "workflow.fast.get.quota.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please confirm the following link %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostAlertApproveSessionMessage = Rswift.StringResource(key: "bifrost.alert.approve.session.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please confirm transaction information below
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let appSchemeHomePageBusyContent = Rswift.StringResource(key: "app.scheme.home.page.busy.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please confirm transaction information below
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostHomePageBusyContent = Rswift.StringResource(key: "bifrost.home.page.busy.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please do use %@ together with the Deposit Address, or you will lose the token(s).
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositLabelDesc = Rswift.StringResource(key: "crosschain.deposit.labelDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please enter a valid PoW URL
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let powSettingsPageAddAlertTitle = Rswift.StringResource(key: "pow.settings.page.add.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please enter a valid node address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let nodeSettingsPageAddAlertTitle = Rswift.StringResource(key: "node.settings.page.add.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please enter password to back up the Mnemonic Words.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupTipAlertMessage = Rswift.StringResource(key: "mnemonic.backup.tip.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please enter the amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPagePostToastVolEmpty = Rswift.StringResource(key: "spot.page.post.toast.vol.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please enter the price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPagePostToastPriceEmpty = Rswift.StringResource(key: "spot.page.post.toast.price.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please enter the same password!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageErrorTypeDifference = Rswift.StringResource(key: "mnemonic.backup.page.error.type.difference", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please enter transfer amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundDepositPlaceholder = Rswift.StringResource(key: "fund.deposit.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please enter transfer amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundWithdrawPlaceholder = Rswift.StringResource(key: "fund.withdraw.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please finalize the transaction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailPleaseFinalize = Rswift.StringResource(key: "grin.detail.pleaseFinalize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input a number
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageAddressGenerateButtonErrorToast = Rswift.StringResource(key: "address.manage.address.generate.button.error.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input account name or password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageErrorTypeName = Rswift.StringResource(key: "mnemonic.backup.page.error.type.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageAddressTitle = Rswift.StringResource(key: "contacts.edit.page.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input amount, minimum 1 VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockConfirmPlaceholder = Rswift.StringResource(key: "dividends.page.lock.confirm.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input amount, minimum 1 VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockConfirmPlaceholder = Rswift.StringResource(key: "dividends.page.unlock.confirm.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input amount, minimum 134 VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageConfirmAmountPlaceholder = Rswift.StringResource(key: "mining.staking.page.confirm.amount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input amount, minimum 134 VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageQuotaMoneyPlaceholder = Rswift.StringResource(key: "quota.manage.page.quota.money.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageToastAmountEmpty = Rswift.StringResource(key: "send.page.toast.amount.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input beneficiary address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaSubmitPageQuotaAddressPlaceholder = Rswift.StringResource(key: "quota.submit.page.quota.address.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input new alias
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageChangeNameAlertPlaceholder = Rswift.StringResource(key: "address.manage.change.name.alert.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPagePwTitle = Rswift.StringResource(key: "confirm.transaction.page.pw.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPagePwTitle = Rswift.StringResource(key: "create.page.pw.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exportPageAlterTfPlaceholder = Rswift.StringResource(key: "export.page.alter.tf.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input token name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transferSearchPlaceholder = Rswift.StringResource(key: "transfer.search.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input token name or contract address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenListPageSearchTitle = Rswift.StringResource(key: "token.list.page.search.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input your password again
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPagePwRepeateTitle = Rswift.StringResource(key: "create.page.pw.repeate.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please input your seed phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let importPageTitle = Rswift.StringResource(key: "import.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please make sure to share the transaction file with sender
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinMakeSureToShare = Rswift.StringResource(key: "grin.makeSureToShare", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please make sure to share the transaction file with sender
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxbyfileShareReceiveFileDesc = Rswift.StringResource(key: "grin.txbyfile.shareReceiveFileDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please make sure to share the transaction file with the recipient and ask for a confirmation file.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxbyfileShareSentFileDesc = Rswift.StringResource(key: "grin.txbyfile.shareSentFileDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please note that web wallet doesn't support native GRIN. If you receive the VITE transaction with GRIN file, you should contact the sender to cancel the transaction and resend GRIN.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinReceiveByViteDesc = Rswift.StringResource(key: "grin.receiveByVite.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please scan the %@ code
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositScanLabel = Rswift.StringResource(key: "crosschain.deposit.scanLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please scan the address QR code
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositScanAddress = Rswift.StringResource(key: "crosschain.deposit.scanAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please select the correct mainnet or you will be unable to retrieve any lost tokens.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositSelectDesc = Rswift.StringResource(key: "crosschain.deposit.selectDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please sign for the transaction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinShareFileDesc = Rswift.StringResource(key: "grin.shareFile.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please sign for the transaction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxbyfileReceiveSentFileDesc = Rswift.StringResource(key: "grin.txbyfile.receiveSentFileDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please sign the transaction and share the file with the sender, you can choose whichever way you prefer.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailPleaseReciveAndShare = Rswift.StringResource(key: "grin.detail.pleaseReciveAndShare", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please store your mnemonic words in a safe place.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageTipContent3 = Rswift.StringResource(key: "create.page.tip.content3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please wait for the recipient to open Vite wallet and receive the transaction.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailWaitHerOpenViteWalletToReceive = Rswift.StringResource(key: "grin.detail.waitHerOpenViteWalletToReceive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Please wait for the transaction to be broadcast
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailPleaseFinalize2 = Rswift.StringResource(key: "grin.detail.pleaseFinalize2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: PoW Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let powSettingsPageTitle = Rswift.StringResource(key: "pow.settings.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: PoW Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellPowSettings = Rswift.StringResource(key: "system.page.cell.pow.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Posting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxTypeFinalized = Rswift.StringResource(key: "grin.txType.finalized", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTradePriceTitle = Rswift.StringResource(key: "market.detail.page.trade.price.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageDepthPrice = Rswift.StringResource(key: "spot.page.depth.price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPagePriceBuyPlaceholder = Rswift.StringResource(key: "spot.page.price.buy.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPagePriceSellPlaceholder = Rswift.StringResource(key: "spot.page.price.sell.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Price(%@)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageDepthPriceTitle = Rswift.StringResource(key: "market.detail.page.depth.price.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Price: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCellPrice = Rswift.StringResource(key: "spot.page.cell.price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Processing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let loginPageLoadingTitle = Rswift.StringResource(key: "login.page.loading.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Prompt
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let hint = Rswift.StringResource(key: "Hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Proposal Request
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeProposalTitle = Rswift.StringResource(key: "bnb.txType.proposal.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Pull down to refresh
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListPageHeaderRefreshIdle = Rswift.StringResource(key: "transaction.list.page.header.refresh.idle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Pull up to load more
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteRefreshBackFooterIdleText = Rswift.StringResource(key: "vite.RefreshBackFooter.IdleText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Purchase History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exchangeHistory = Rswift.StringResource(key: "exchange.history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: QRCode cannot be identified
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let scanPageQccodeNotIdentifiable = Rswift.StringResource(key: "Scan.page.qccode.not.identifiable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Quit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quit = Rswift.StringResource(key: "Quit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionQuotaTitle = Rswift.StringResource(key: "confirm.transaction.quota.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundQuotaSpend = Rswift.StringResource(key: "fund.quotaSpend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageQuotaQuotaTitle = Rswift.StringResource(key: "quota.manage.page.quota.quota.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Quota Available/Quota Limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailPledgeCountContent = Rswift.StringResource(key: "balance.info.detail.pledge.count.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Quota Available/Quota Limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageMyQuotaTitle = Rswift.StringResource(key: "send.page.my.quota.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Quota Beneficiary
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageInputAddressTitle = Rswift.StringResource(key: "quota.manage.page.input.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Rate: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exchangePrice = Rswift.StringResource(key: "exchange.price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Ratio
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningInvitePageCellPer = Rswift.StringResource(key: "mining.invite.page.cell.per", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Re-issuable
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem5Title = Rswift.StringResource(key: "buildin.coin.issuance.item5.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Re-issue Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinReissueTokenFunctionTitle = Rswift.StringResource(key: "buildin.coin.reissue.token.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailReveiceButtonTitle = Rswift.StringResource(key: "balance.info.detail.reveice.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinReceiveBtnTitle = Rswift.StringResource(key: "grin.receive.BtnTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let receivePageTokenTitle = Rswift.StringResource(key: "Receive.page.token.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receive Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinTransferCrossChainItem2Title = Rswift.StringResource(key: "buildin.transfer.cross.chain.item2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receive GRIN
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinReceiveTitle = Rswift.StringResource(key: "grin.receive.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receive GRIN though HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachHttpReceiveTitle = Rswift.StringResource(key: "grin.teach.http.receive.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receive GRIN through Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachFileReceiveTitle = Rswift.StringResource(key: "grin.teach.file.receive.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receive GRIN through VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachViteReceiveTitle = Rswift.StringResource(key: "grin.teach.vite.receive.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receive and Share
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSignAndShare = Rswift.StringResource(key: "grin.signAndShare", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Received
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxTypeReceived = Rswift.StringResource(key: "grin.txType.received", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Received
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxbyfileReceivedStatusReceiver = Rswift.StringResource(key: "grin.txbyfile.receivedStatus.receiver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Receiving Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailToAddress = Rswift.StringResource(key: "eth.transaction.detail.to.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinTransferOwnershipItem2Title = Rswift.StringResource(key: "buildin.coin.transfer.ownership.item2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexTransferPairItem1Title = Rswift.StringResource(key: "buildin.dex.transfer.pair.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexTransferTokenOwnerItem2Title = Rswift.StringResource(key: "buildin.dex.transfer.token.owner.item2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionAddressTitle = Rswift.StringResource(key: "confirm.transaction.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageToAddressTitle = Rswift.StringResource(key: "send.page.to.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Recover Trading Pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexRecoverTradingPairFunctionTitle = Rswift.StringResource(key: "buildin.dex.recover.trading.pair.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Recover and sync, 3 mins estimated
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinRecoverSyncronizing = Rswift.StringResource(key: "grin.recover.syncronizing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Referral
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningPageSegmentInvite = Rswift.StringResource(key: "mining.page.segment.invite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Referrals
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningInvitePageDetailCountTitle = Rswift.StringResource(key: "mining.invite.page.detail.count.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Referred Market-Making Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningInvitePageListMarketMakingTitle = Rswift.StringResource(key: "mining.invite.page.list.market.making.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Referred Market-Making Proceeds
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningInvitePageDetailMarketMakingTitle = Rswift.StringResource(key: "mining.invite.page.detail.market.making.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Referred Trading Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningInvitePageListTradingTitle = Rswift.StringResource(key: "mining.invite.page.list.trading.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Referred Trading Proceeds
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningInvitePageDetailTradingTitle = Rswift.StringResource(key: "mining.invite.page.detail.trading.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Refresh
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListPageNetworkError = Rswift.StringResource(key: "transaction.list.page.network.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Regenerate
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageTipAnewBtnTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.anewBtn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Register SBP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationRegisterSbp = Rswift.StringResource(key: "bifrost.operation.register.sbp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Registration
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameRegister = Rswift.StringResource(key: "transaction.list.transaction.type.name.register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Release to load more.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteRefreshBackFooterPullingText = Rswift.StringResource(key: "Vite.RefreshBackFooter.PullingText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Release to refresh
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListPageHeaderRefreshPulling = Rswift.StringResource(key: "transaction.list.page.header.refresh.pulling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Repost
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailRepoat = Rswift.StringResource(key: "grin.detail.repoat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Repost
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxRepost = Rswift.StringResource(key: "grin.tx.Repost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Request
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageTypeSend = Rswift.StringResource(key: "vite.transaction.detail.page.type.send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Request for Vite gateway to Resend
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailGatewayResend = Rswift.StringResource(key: "grin.detail.gatewayResend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Response
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageTypeReceive = Rswift.StringResource(key: "vite.transaction.detail.page.type.receive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Restore Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let importPageSubmitBtn = Rswift.StringResource(key: "import.page.submit.btn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retrieve
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexUnLockVxFunctionTitle = Rswift.StringResource(key: "buildin.dex.un.lock.vx.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retrieve Rewards
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameExtractReward = Rswift.StringResource(key: "transaction.list.transaction.type.name.extractReward", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retrieve Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexCancelStakeFunctionTitle = Rswift.StringResource(key: "buildin.dex.cancel.stake.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retrieve Staking for Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationCancelCoin = Rswift.StringResource(key: "bifrost.operation.cancel.coin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retrieve Staking for Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationCancelPledge = Rswift.StringResource(key: "bifrost.operation.cancel.pledge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retrieve staking request has sent
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowToastCancelPledgeSuccess = Rswift.StringResource(key: "workflow.toast.cancel.pledge.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retrieving
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderLockViteMiningCancel = Rswift.StringResource(key: "dex.token.detail.page.header.lock.vite.mining.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retrieving
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderLockVxCancel = Rswift.StringResource(key: "dex.token.detail.page.header.lock.vx.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retry
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let retry = Rswift.StringResource(key: "Retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Retry
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowConfirmPagePasswordAuthFailedRetry = Rswift.StringResource(key: "workflow.confirm.page.passwordAuthFailed.retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Revoke Registration
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameCancelRegister = Rswift.StringResource(key: "transaction.list.transaction.type.name.cancelRegister", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationCancelVote = Rswift.StringResource(key: "bifrost.operation.cancel.vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteCancelVoteTransferTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.cancel.vote.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameCancelVote = Rswift.StringResource(key: "transaction.list.transaction.type.name.cancelVote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Revoking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let votePageVoteStatusCancelVoting = Rswift.StringResource(key: "vote.page.voteStatus.cancelVoting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Reward
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageTitle = Rswift.StringResource(key: "dividends.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Reward
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tradingHomePageSegmentBonus = Rswift.StringResource(key: "trading.home.page.segment.bonus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Reward Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockHeaderTitle = Rswift.StringResource(key: "dividends.page.lock.header.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Reward Pool (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageTotalTitle = Rswift.StringResource(key: "dividends.page.total.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Rewards Enquiry
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageRewardCellTitle = Rswift.StringResource(key: "my.page.reward.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Run PoW
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaAlertPowButtonTitle = Rswift.StringResource(key: "quota.alert.pow.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: SBP Candidates
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinVoteItem0Title = Rswift.StringResource(key: "buildin.vote.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageSaveButtonTitle = Rswift.StringResource(key: "contacts.edit.page.save.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Scan
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let scanPageTitle = Rswift.StringResource(key: "Scan.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Scan
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageScanAddressButtonTitle = Rswift.StringResource(key: "send.page.scan.address.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Scan QR code to follow Vite WeChat Official Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageAboutUsWechatAlertTitle = Rswift.StringResource(key: "my.page.aboutUs.wechat.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Scan and Send %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let receivePageTokenNameLabel = Rswift.StringResource(key: "Receive.page.token.name.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Scan the QR code below with your Vite app installed on another device.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageTip3 = Rswift.StringResource(key: "mnemonic.backup.page.tip3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Search History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketSearchhistory = Rswift.StringResource(key: "market.searchhistory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Search for name or address of candidate nodes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let voteListSearch = Rswift.StringResource(key: "vote.list.search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Security
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageSecurityCellTitle = Rswift.StringResource(key: "my.page.security.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Seed Phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageTipLabTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.lab.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Select Accounts
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let loginPageBtnChooseName = Rswift.StringResource(key: "login.page.btn.chooseName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Select Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainChainSelectTitle = Rswift.StringResource(key: "crosschain.chain.select.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Select Trading pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenMarketSelectorTitle = Rswift.StringResource(key: "dex.token.market.selector.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Select token type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageTypeSelectTitle = Rswift.StringResource(key: "contacts.edit.page.type.select.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Select your account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let selectWalletAccount = Rswift.StringResource(key: "select.wallet.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Sell
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageSellButtonTitle = Rswift.StringResource(key: "market.detail.page.sell.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Sell
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterSideSell = Rswift.StringResource(key: "spot.history.page.filter.side.sell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Sell
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageButtonSellTitle = Rswift.StringResource(key: "spot.page.button.sell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Sell
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCellTypeSell = Rswift.StringResource(key: "spot.page.cell.type.sell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Sell %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexSellTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.sell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailSendButtonTitle = Rswift.StringResource(key: "balance.info.detail.send.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationTransfer = Rswift.StringResource(key: "bifrost.operation.transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageEthTransferTitle = Rswift.StringResource(key: "confirm.transaction.page.eth.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageGrinTransferTitle = Rswift.StringResource(key: "confirm.transaction.page.grin.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteTransferTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageButtonSend = Rswift.StringResource(key: "dex.token.detail.page.button.send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentBtnTitle = Rswift.StringResource(key: "grin.sent.btnTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageSendButtonTitle = Rswift.StringResource(key: "send.page.send.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageTitle = Rswift.StringResource(key: "send.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send GRIN
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinFinalizeTitle = Rswift.StringResource(key: "grin.finalize.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send GRIN
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentTitle = Rswift.StringResource(key: "grin.sent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send GRIN though HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachHttpSentTitle = Rswift.StringResource(key: "grin.teach.http.sent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send GRIN through Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachFileSendTitle = Rswift.StringResource(key: "grin.teach.file.send.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send GRIN through VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachViteSentTitle = Rswift.StringResource(key: "grin.teach.vite.sent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send GRIN through VITE address is sharing transaction file encrypted by Vite through VITE address, which ensures only the real recipient can decrypt the file.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentUseViteDesc = Rswift.StringResource(key: "grin.sent.useVite.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Send Success
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowToastTransferSuccess = Rswift.StringResource(key: "workflow.toast.transfer.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Sending Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailFromAddress = Rswift.StringResource(key: "eth.transaction.detail.from.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Service Mailbox
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainGatewaydetailEmail = Rswift.StringResource(key: "crosschain.gatewaydetail.email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Service Terms
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let gatewayInfoDetailPageAgreement = Rswift.StringResource(key: "gateway.info.detail.page.agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageSystemCellTitle = Rswift.StringResource(key: "my.page.system.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Share Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinShareFile = Rswift.StringResource(key: "grin.shareFile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Share Vite APP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageCellShareUs = Rswift.StringResource(key: "aboutUs.page.cell.shareUs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Short in quota, you can acquire quota by running PoW or staking VITE.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaAlertPowAndQuotaMessage = Rswift.StringResource(key: "quota.alert.pow.and.quota.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Signature Content
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationSignMessageContent = Rswift.StringResource(key: "bifrost.operation.sign.message.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Signed Transactions Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostTaskDetailPageBusyHeader = Rswift.StringResource(key: "bifrost.task.detail.page.busy.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Signing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostListPageStatusProcessing = Rswift.StringResource(key: "bifrost.list.page.status.processing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Signing Transaction List
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostListPageTitle = Rswift.StringResource(key: "bifrost.list.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Single Transaction Limit: %@ - %@ VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exchangeLimitOnetime = Rswift.StringResource(key: "exchange.limit.onetime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Slate ID Copied.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailSlateCopied = Rswift.StringResource(key: "grin.detail.slateCopied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Slow
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethPageGasFeeSlowTitle = Rswift.StringResource(key: "eth.page.gasFee.slow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Snapshot block height is illegal, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorRpcErrorCodeRefrenceSnapshootBlockIllegal = Rswift.StringResource(key: "vite.error.rpc.error.code.refrence.snapshoot.block.illegal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Social Media
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoSocial = Rswift.StringResource(key: "market.detail.page.token.info.social", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Social Media
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageSocial = Rswift.StringResource(key: "token.info.detail.page.social", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Something went wrong with network, click here to check account details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionNetErrorAndShowAccount = Rswift.StringResource(key: "transaction.list.transaction.netErrorAndShowAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Something went wrong with network, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorNetworkError = Rswift.StringResource(key: "vite.error.network.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Something wrong with your seed phrase, please try again!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let importPageSubmitInvalidMnemonic = Rswift.StringResource(key: "import.page.submit.invalid.mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Spendable
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinBalanceSpendable = Rswift.StringResource(key: "grin.balance.spendable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Spendable Quota/Quota Limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundQuotaInfo = Rswift.StringResource(key: "fund.quotaInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Spot
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tradingHomePageSegmentSpot = Rswift.StringResource(key: "trading.home.page.segment.spot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexLockVxFunctionTitle = Rswift.StringResource(key: "buildin.dex.lock.vx.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockConfirmButtonTitle = Rswift.StringResource(key: "dividends.page.lock.confirm.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockLockButtonTitle = Rswift.StringResource(key: "dividends.page.lock.lock.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageCellAmount = Rswift.StringResource(key: "mining.staking.page.cell.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Stake VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaAlertQuotaButtonTitle = Rswift.StringResource(key: "quota.alert.quota.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Stake VITE for Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageConfirmTitle = Rswift.StringResource(key: "mining.staking.page.confirm.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Stake VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockConfirmTitle = Rswift.StringResource(key: "dividends.page.lock.confirm.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderLockViteMining = Rswift.StringResource(key: "dex.token.detail.page.header.lock.vite.mining", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderLockVx = Rswift.StringResource(key: "dex.token.detail.page.header.lock.vx", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staked Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageDetailAmountTitle = Rswift.StringResource(key: "mining.staking.page.detail.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staked for Full Node
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderLockViteFullNode = Rswift.StringResource(key: "dex.token.detail.page.header.lock.vite.full.node", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staked for Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderLockVitePledge = Rswift.StringResource(key: "dex.token.detail.page.header.lock.vite.pledge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staked for SBP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderLockViteSbp = Rswift.StringResource(key: "dex.token.detail.page.header.lock.vite.sbp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningPageSegmentStaking = Rswift.StringResource(key: "mining.page.segment.staking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staking Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockAmount = Rswift.StringResource(key: "dividends.page.lock.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staking Amount for Becoming a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexVipAmount = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.vip.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staking List
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageDetailListButtonTitle = Rswift.StringResource(key: "mining.staking.page.detail.list.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staking amount should not be less than 134
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageToastMoneyError = Rswift.StringResource(key: "quota.manage.page.toast.money.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staking as Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexStakingAsMiningFunctionTitle = Rswift.StringResource(key: "buildin.dex.staking.as.mining.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Staking can be canceled after 3 days. Staked amount will be released after the 7-day waiting period
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageConfirmTip = Rswift.StringResource(key: "mining.staking.page.confirm.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Start to Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachViteSendStartSend = Rswift.StringResource(key: "grin.teach.vite.send.startSend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Status
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterStatusTitle = Rswift.StringResource(key: "spot.history.page.filter.status.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Submit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let changePasswordPageButtonTitle = Rswift.StringResource(key: "change.password.page.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Submit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let submit = Rswift.StringResource(key: "Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Submit Successful
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowToastSubmitSuccess = Rswift.StringResource(key: "workflow.toast.submit.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Submit to lock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaManagePageSubmitBtnTitle = Rswift.StringResource(key: "quota.manage.page.submit.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Success
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostListPageStatusFinished = Rswift.StringResource(key: "bifrost.list.page.status.finished", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Success
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowToastContractSuccess = Rswift.StringResource(key: "workflow.toast.contract.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Successful Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let votePageVoteStatusVoteSuccess = Rswift.StringResource(key: "vote.page.voteStatus.voteSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Successfully added
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageSaveSuccessTip = Rswift.StringResource(key: "contacts.edit.page.save.success.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Successfully copied
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let copyed = Rswift.StringResource(key: "copyed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Successfully copied!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let walletHomeToastCopyAddress = Rswift.StringResource(key: "wallet.home.toast.copy.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Successfully saved
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let contactsEditPageEditSuccessTip = Rswift.StringResource(key: "contacts.edit.page.edit.success.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Successfully send vote request
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowToastVoteSuccess = Rswift.StringResource(key: "workflow.toast.vote.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Suspend Trading Pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexSuspendTradingPairFunctionTitle = Rswift.StringResource(key: "buildin.dex.suspend.trading.pair.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Switch
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageAddressChangeButtonTitle = Rswift.StringResource(key: "eth.vite.exchange.page.address.change.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Switch Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let lockPageChangeUserBtnTitle = Rswift.StringResource(key: "lock.page.changeUser.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Switch Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSwitchAddress = Rswift.StringResource(key: "grin.switchAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Switch to %@ mnemonic words
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageSwitchModeTitle = Rswift.StringResource(key: "mnemonic.backup.page.switch.mode.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailShortname = Rswift.StringResource(key: "crosschain.tokenDetail.shortname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: System verify failed, please try again later (%@)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorRpcErrorCodeVerifyFailure = Rswift.StringResource(key: "vite.error.rpc.error.code.verify.failure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Terms and Conditions
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageClauseButtonTitle = Rswift.StringResource(key: "mnemonic.backup.page.clause.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Terms of Service
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainGatewaydetailStatement = Rswift.StringResource(key: "crosschain.gatewaydetail.statement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Terms of Service
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementDetail = Rswift.StringResource(key: "crosschain.statement.detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The address you scanned now is not consistent with the one on web platform. Continue login with App address? (%@)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostAlertApproveSessionAnotherAddressMessage = Rswift.StringResource(key: "bifrost.alert.approve.session.another.address.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The amount has to be positive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageToastAmountZero = Rswift.StringResource(key: "send.page.toast.amount.zero", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The amount you entered exceeds available balance, please enter again
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundTooBig = Rswift.StringResource(key: "fund.tooBig", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The amount you entered is invalid. A single transaction should be at least %@ VITE and at most %@ VITE, and the daily transaction limit is %@ VITE.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exchangeLimitAlert = Rswift.StringResource(key: "exchange.limit.alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The current network is Mainnet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let powSettingsPageAddAlertTip = Rswift.StringResource(key: "pow.settings.page.add.alert.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The current node is %1$@, and will be switched to %2$@. After switching, the App will be automatically closed, and you need to reopen the App.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let nodeSettingsPageSwitchNodeAlertMessage = Rswift.StringResource(key: "node.settings.page.switch.node.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The current node is %@, network is Mainnet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let nodeSettingsPageAddAlertTip = Rswift.StringResource(key: "node.settings.page.add.alert.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The deposit amount cannot be less than 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainDepositMinAlert = Rswift.StringResource(key: "crosschain.deposit.min.alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The destination address you transfer to is a contract, the note must be written with legal hexadecimal characters
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageToastContractAddressSupportHex = Rswift.StringResource(key: "send.page.toast.contract.address.support.hex", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The following backups are recommend for the security of your assets:
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageTip1 = Rswift.StringResource(key: "mnemonic.backup.page.tip1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The length of notes has reached limitations
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageToastNoteTooLong = Rswift.StringResource(key: "send.page.toast.note.too.long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The minimum withdraw amount is 134 VITE, please stake enough VITE first.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let peldgeCancelPledgeAmountErrorToast = Rswift.StringResource(key: "peldge.cancel.pledge.amount.error.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The network is currently in Dynamic Quota mode. This means your Quota Limit has been reduced and you can send fewer transactions per second. Do you still want to send a transaction now?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowCongestionWithoutPowAlertMessage = Rswift.StringResource(key: "workflow.congestion.without.pow.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The network is currently in Dynamic Quota mode. Your Quota Limit has been reduced and your Spendable Quota is not enough to send this transaction. Please transact later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowCongestionWithPowAlertMessage = Rswift.StringResource(key: "workflow.congestion.with.pow.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The node already exists
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let nodeSettingsPageNodeExistError = Rswift.StringResource(key: "node.settings.page.node.exist.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The old password is wrong
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let changePasswordPageOldErrorToast = Rswift.StringResource(key: "change.password.page.old.error.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The receipt has been confirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxFileReceivedStatus = Rswift.StringResource(key: "grin.txFile.received.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The seed phrase you entered matches an existing account named '%@' on this device. Are you sure you want to overwrite that account?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let importPageAlertExistTitle = Rswift.StringResource(key: "import.page.alert.exist.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: The staking is less than 30 days and cannot be retrieved
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageCloseVipUnExpireErrorToast = Rswift.StringResource(key: "spot.page.close.vip.un.expire.error.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: This Service is provided by %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementViteDesc0 = Rswift.StringResource(key: "crosschain.statement.vite.desc0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: This Service is provided by %@.  By using services from %@, you agree to be bound by %@%@. If you do not agree to these terms, please refrain from using service from %@.  In case of problems with verification or payment processing, please contact %@ support team at %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementViteDesc = Rswift.StringResource(key: "crosschain.statement.vite.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: This Service is provided by %@. Vite Platform assumes no responsibility for the activities performed by %@ and does not play a role in the relationship between %@ and users of Vite Platform.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementOtherDesc0 = Rswift.StringResource(key: "crosschain.statement.other.desc0", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: This Service is provided by %@. Vite Platform assumes no responsibility for the activities performed by %@ and does not play a role in the relationship between %@ and users of Vite Platform.  By using services from %@, you agree to be bound by %@ %@. If you do not agree to these terms, please refrain from using service from %@.  In case of problems with verification or payment processing, please contact %@ support team at %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatementOtherDesc = Rswift.StringResource(key: "crosschain.statement.other.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: This Transaction costs %@Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaFloatViewTip = Rswift.StringResource(key: "quota.float.view.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: This action will regenerate seed phrase, ready to go back?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicAffirmAlterTitle = Rswift.StringResource(key: "mnemonic.affirm.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: This is an estimated gas fee according to the current network traffic. The actual cost may differ.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethPageGasFeeNoticeTitle = Rswift.StringResource(key: "eth.page.gasFee.notice.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: This is your first VITE address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinThisIsFirstViteAddress = Rswift.StringResource(key: "grin.thisIsFirstViteAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: This page is provided by %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let webPageHostTip = Rswift.StringResource(key: "web.page.host.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Time
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTradeTimeTitle = Rswift.StringResource(key: "market.detail.page.trade.time.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Time
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageValueTimeTitle = Rswift.StringResource(key: "market.detail.page.value.time.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Time available to unlock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let peldgeDeadline = Rswift.StringResource(key: "peldge.deadline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: To
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transferTo = Rswift.StringResource(key: "transfer.to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: To transfer using Vite wallet, all you need to do is to open the file, click the "Receive and share" button, and return the confirm-to-receive file with the sender. After clicking "Receive and share",Vite wallet will show App usable in your mobile phone, you can choose whichever way you like, you can also save the file into your mobilephone and share by yourself. Vite wallet supports .grinslate file and .json file, and only when the file name containing "response" will it be recognized and opened successfully.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachFileReceiveDesc = Rswift.StringResource(key: "grin.teach.file.receive.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: To transfer using Vite wallet, all you need to do is to share the transaction file with the recipient, open the file returned by the recipient by Vite wallet and finalize the transaction. After clicking "Share the transaction file", Vite wallet will show App usable in your mobile phone, you can choose whichever way you like, you can also save the file into your mobilephone and share by yourself.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTeachFileSendDesc = Rswift.StringResource(key: "grin.teach.file.send.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageSegmentTokenInfoTitle = Rswift.StringResource(key: "market.detail.page.segment.token.info.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transferToken = Rswift.StringResource(key: "transfer.token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokendetail = Rswift.StringResource(key: "crosschain.tokendetail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageTitle = Rswift.StringResource(key: "token.info.detail.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailId = Rswift.StringResource(key: "crosschain.tokenDetail.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageId = Rswift.StringResource(key: "token.info.detail.page.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Info Error
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageTokenInfoError = Rswift.StringResource(key: "send.page.token.info.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationCoin = Rswift.StringResource(key: "bifrost.operation.coin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceFunctionTitle = Rswift.StringResource(key: "buildin.coin.issuance.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameCoin = Rswift.StringResource(key: "transaction.list.transaction.type.name.coin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinChangeToNonissuableItem0Title = Rswift.StringResource(key: "buildin.coin.change.to.nonissuable.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem1Title = Rswift.StringResource(key: "buildin.coin.issuance.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinReissueTokenItem0Title = Rswift.StringResource(key: "buildin.coin.reissue.token.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinTransferOwnershipItem0Title = Rswift.StringResource(key: "buildin.coin.transfer.ownership.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexTransferTokenOwnerItem0Title = Rswift.StringResource(key: "buildin.dex.transfer.token.owner.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailName = Rswift.StringResource(key: "crosschain.tokenDetail.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageName = Rswift.StringResource(key: "token.info.detail.page.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinChangeToNonissuableItem1Title = Rswift.StringResource(key: "buildin.coin.change.to.nonissuable.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem2Title = Rswift.StringResource(key: "buildin.coin.issuance.item2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinReissueTokenItem1Title = Rswift.StringResource(key: "buildin.coin.reissue.token.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinTransferOwnershipItem1Title = Rswift.StringResource(key: "buildin.coin.transfer.ownership.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexTransferTokenOwnerItem1Title = Rswift.StringResource(key: "buildin.dex.transfer.token.owner.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Token Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageType = Rswift.StringResource(key: "token.info.detail.page.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: TokenID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoTokenId = Rswift.StringResource(key: "market.detail.page.token.info.token.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Tokens in Circulation
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoTotal = Rswift.StringResource(key: "market.detail.page.token.info.total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderTotal = Rswift.StringResource(key: "dex.token.detail.page.header.total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinBalanceTotal = Rswift.StringResource(key: "grin.balance.total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total Income (VX)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningInvitePageHeaderTotalEarnings = Rswift.StringResource(key: "mining.invite.page.header.total.earnings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total Income (VX)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningOrderPageHeaderTotalEarnings = Rswift.StringResource(key: "mining.order.page.header.total.earnings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total Income (VX)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageHeaderTotalEarnings = Rswift.StringResource(key: "mining.staking.page.header.total.earnings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailAmount = Rswift.StringResource(key: "crosschain.tokenDetail.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageTotal = Rswift.StringResource(key: "token.info.detail.page.total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total Reward (VX)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningTradingPageHeaderTotalEarnings = Rswift.StringResource(key: "mining.trading.page.header.total.earnings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total Supply
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem3Title = Rswift.StringResource(key: "buildin.coin.issuance.item3.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total Value (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexHomePageNavBtcValuationTitle = Rswift.StringResource(key: "dex.home.page.nav.btc.valuation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total Value (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let walletHomeBtcTitle = Rswift.StringResource(key: "wallet.home.btc.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total value must be at least %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPagePostToastAmountMin = Rswift.StringResource(key: "spot.page.post.toast.amount.min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageTotal = Rswift.StringResource(key: "spot.page.total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Total: ≈
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockCellTotal = Rswift.StringResource(key: "dividends.page.lock.cell.total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Touch ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellLoginTouchId = Rswift.StringResource(key: "system.page.cell.login.touchId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trade
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationSignMessageTypeTradeValue = Rswift.StringResource(key: "bifrost.operation.sign.message.type.trade.value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trade
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageButtonTrading = Rswift.StringResource(key: "dex.token.detail.page.button.trading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trade
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tabTitleTrading = Rswift.StringResource(key: "tab.title.trading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trading
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexHomePageSegmentDex = Rswift.StringResource(key: "dex.home.page.segment.dex", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trading
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningPageSegmentTrading = Rswift.StringResource(key: "mining.page.segment.trading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trading Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningInvitePageCellFeeAmount = Rswift.StringResource(key: "mining.invite.page.cell.fee.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trading Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningTradingPageHeaderFee = Rswift.StringResource(key: "mining.trading.page.header.fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trading Suspended
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPageButtonClosedTitle = Rswift.StringResource(key: "spot.page.button.closed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trading Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transferDexAccount = Rswift.StringResource(key: "transfer.dex.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Trading pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoPair = Rswift.StringResource(key: "market.detail.page.token.info.pair", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transact Faster via Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowFinishedFloatViewPledgeButtonTitle = Rswift.StringResource(key: "quota.pow.finished.float.view.pledge.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transact Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowCongestionWithPowAlertCancel = Rswift.StringResource(key: "workflow.congestion.with.pow.alert.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transact Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowCongestionWithoutPowAlertCancel = Rswift.StringResource(key: "workflow.congestion.without.pow.alert.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transact Now
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowCongestionWithoutPowAlertOk = Rswift.StringResource(key: "workflow.congestion.without.pow.alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinTransferUtf8stringItem0Title = Rswift.StringResource(key: "buildin.transfer.utf8string.item0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Completed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailSuccess = Rswift.StringResource(key: "eth.transaction.detail.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Completed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageStateSuccess = Rswift.StringResource(key: "vite.transaction.detail.page.state.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Confirmation
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let appSchemeHomePageBusyHeader = Rswift.StringResource(key: "app.scheme.home.page.busy.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailFailed = Rswift.StringResource(key: "eth.transaction.detail.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxFile = Rswift.StringResource(key: "grin.detail.txFile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxMethodFile = Rswift.StringResource(key: "grin.txMethod.file", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Finalized
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinFinalizedAlertTitle = Rswift.StringResource(key: "grin.finalized.alertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Hash
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailHash = Rswift.StringResource(key: "eth.transaction.detail.hash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Hash
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageHashTitle = Rswift.StringResource(key: "vite.transaction.detail.page.hash.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListPageTitle = Rswift.StringResource(key: "transaction.list.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxFileId = Rswift.StringResource(key: "grin.txFile.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxidTitle = Rswift.StringResource(key: "grin.txid.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Sent
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowFinishedFloatViewTitle = Rswift.StringResource(key: "quota.pow.finished.float.view.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction State
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxStatus = Rswift.StringResource(key: "grin.detail.txStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageTypeTitle = Rswift.StringResource(key: "vite.transaction.detail.page.type.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction file has been created, please make sure to share the file with the recipient(share as you like)and ask for a received file returned.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxFileCreatedAndCanShare = Rswift.StringResource(key: "grin.detail.txFileCreatedAndCanShare", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction has been canceled.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxCancelled = Rswift.StringResource(key: "grin.detail.txCancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction has been confirmed, after 10 confirmation, "Actual Amount" will go to "Spendable Amount".
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailConfirmLessThanThen = Rswift.StringResource(key: "grin.detail.confirmLessThanThen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction has been finalized and broadcast.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxFinaziledAndPosting = Rswift.StringResource(key: "grin.detail.txFinaziledAndPosting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction has been received by the recipient. Please finalize and broadcast the transaction.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinFinalizeDesc = Rswift.StringResource(key: "grin.finalize.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction has been received by the recipient. Please finalize and broadcast the transaction.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxbyfileFinalizeReceiveFileDesc = Rswift.StringResource(key: "grin.txbyfile.finalizeReceiveFileDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction has been received, please share the file with the sender, you can choose the way as you like.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxFileReecivedAndCanShare = Rswift.StringResource(key: "grin.detail.txFileReecivedAndCanShare", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction has been received.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxReceived = Rswift.StringResource(key: "grin.detail.txReceived", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction has completed.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxCompleted = Rswift.StringResource(key: "grin.detail.txCompleted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction has started to be broadcast, you can click "Repost" to try again if the transaction hasn't been confirmed for long
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxpostingAndCanRepost = Rswift.StringResource(key: "grin.detail.txpostingAndCanRepost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transaction is in broadcast, please wait for confirmation.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxisPostingPlsWait = Rswift.StringResource(key: "grin.detail.txisPostingPlsWait", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transactions Signed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostHomePageFreeHistoryTitle = Rswift.StringResource(key: "bifrost.home.page.free.history.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transactions are sent too frequent, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorRpcErrorCodeRefrenceSameSnapshootBlock = Rswift.StringResource(key: "vite.error.rpc.error.code.refrence.same.snapshoot.block", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transactions cost quota. Stake to Get Free Quota.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let introductionTipTitle = Rswift.StringResource(key: "introduction.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeTransferTitle = Rswift.StringResource(key: "bnb.txType.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinTransferUtf8stringFunctionTitle = Rswift.StringResource(key: "buildin.transfer.utf8string.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexHomePageHeaderButtonTransferTitle = Rswift.StringResource(key: "dex.home.page.header.button.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageButtonTransfer = Rswift.StringResource(key: "dex.token.detail.page.button.transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundDeposit = Rswift.StringResource(key: "fund.deposit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundWithdraw = Rswift.StringResource(key: "fund.withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameTransfer = Rswift.StringResource(key: "transaction.list.transaction.type.name.transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transferTitle = Rswift.StringResource(key: "transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundDepositAmount = Rswift.StringResource(key: "fund.deposit.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundWithdrawAmount = Rswift.StringResource(key: "fund.withdraw.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageListDexHeaterTitle = Rswift.StringResource(key: "dex.token.detail.page.list.dex.heater.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer Ownership
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinTransferOwnershipFunctionTitle = Rswift.StringResource(key: "buildin.coin.transfer.ownership.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer Token's Ownership
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexTransferTokenOwnerFunctionTitle = Rswift.StringResource(key: "buildin.dex.transfer.token.owner.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer Trading pair's Ownership
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinDexTransferPairFunctionTitle = Rswift.StringResource(key: "buildin.dex.transfer.pair.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer successful. Check exchange balance?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundDepositSuccess = Rswift.StringResource(key: "fund.DepositSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer-In
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageCellIn = Rswift.StringResource(key: "dex.token.detail.page.cell.in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Transfer-Out
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageCellOut = Rswift.StringResource(key: "dex.token.detail.page.cell.out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Tutorial
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let myPageTutorialCellTitle = Rswift.StringResource(key: "my.page.tutorial.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoType = Rswift.StringResource(key: "market.detail.page.token.info.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotHistoryPageFilterSideTitle = Rswift.StringResource(key: "spot.history.page.filter.side.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unable to revoke vote, you have to run PoW or stake VITE for TPS quota to revoke vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let votePageVoteInfoAlertQuota = Rswift.StringResource(key: "vote.page.voteInfo.alert.quota", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unable to transfer due to insufficient exchange balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundCannotWithDraw = Rswift.StringResource(key: "fund.cannotWithDraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unable to transfer due to insufficient wallet balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundCannotDeposit = Rswift.StringResource(key: "fund.cannotDeposit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unable to vote, you have to run PoW or stake VITE for TPS quota to vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let voteListAlertQuota = Rswift.StringResource(key: "vote.list.alert.quota", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unfinalized
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxTypeWaitToFinalize = Rswift.StringResource(key: "grin.txType.waitToFinalize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unfreeze Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeUnfreezeTokenTitle = Rswift.StringResource(key: "bnb.txType.unfreezeToken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unknown Error.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let airdropErrorTipUnknownError = Rswift.StringResource(key: "airdrop.error.tip.unknown.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unlock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let peldgeCancelPeldgeButtonTitle = Rswift.StringResource(key: "peldge.cancel.peldge.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unlocking Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageDetailUnlockingTitle = Rswift.StringResource(key: "mining.staking.page.detail.unlocking.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unreceived
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailUnconfirmedTitle = Rswift.StringResource(key: "balance.info.detail.unconfirmed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unreceived
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxTypeWaitToSign = Rswift.StringResource(key: "grin.txType.waitToSign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unreceived %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let walletHomeUnconfirmedTitle = Rswift.StringResource(key: "wallet.home.unconfirmed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unstake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockUnlockButtonTitle = Rswift.StringResource(key: "dividends.page.lock.unlock.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unstake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockConfirmButtonTitle = Rswift.StringResource(key: "dividends.page.unlock.confirm.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unstake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageWithdrawPageAlertOk = Rswift.StringResource(key: "mining.staking.page.withdraw.page.alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unstake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageWithdrawPageButtonTitle = Rswift.StringResource(key: "mining.staking.page.withdraw.page.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unstake VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageWithdrawPageAlertTitle = Rswift.StringResource(key: "mining.staking.page.withdraw.page.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unstake VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockConfirmTitle = Rswift.StringResource(key: "dividends.page.unlock.confirm.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unstaking Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockingAmount = Rswift.StringResource(key: "dividends.page.unlocking.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unstaking Status
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageLockDetailButtonTitle = Rswift.StringResource(key: "dividends.page.lock.detail.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Unstaking Status
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockListTitle = Rswift.StringResource(key: "dividends.page.unlock.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Untitled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let addressManageDefaultAddressName = Rswift.StringResource(key: "address.manage.default.address.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Update App
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let updateApp = Rswift.StringResource(key: "Update.app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Update Registration
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameRegisterUpdate = Rswift.StringResource(key: "transaction.list.transaction.type.name.registerUpdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Update SBP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationRegisterUpdateSbp = Rswift.StringResource(key: "bifrost.operation.register.update.sbp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Upload Log
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellUploadLogTitle = Rswift.StringResource(key: "system.page.cell.upload.log.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Use HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentUseHttp = Rswift.StringResource(key: "grin.sent.useHttp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Use Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentUseFile = Rswift.StringResource(key: "grin.sent.useFile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Use VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxUseVite = Rswift.StringResource(key: "grin.tx.useVite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Use password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageUsePassword = Rswift.StringResource(key: "confirm.transaction.page.use.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Username only supports less than 32 characters
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageErrorTypeValidWalletNameCount = Rswift.StringResource(key: "mnemonic.backup.page.error.type.validWalletNameCount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VIP Locked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageHeaderLockViteVip = Rswift.StringResource(key: "dex.token.detail.page.header.lock.vite.vip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VIP enjoy the privileges of 0.1% trading fee discount. Stake 10,000 VITE to become a VIP(Minimum Staking Duration: 30 days)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexVipTip = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.vip.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageToAddressTitle = Rswift.StringResource(key: "eth.vite.exchange.page.to.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentSwitch = Rswift.StringResource(key: "grin.sent.switch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinTxMethodVite = Rswift.StringResource(key: "grin.txMethod.vite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinViteAddress = Rswift.StringResource(key: "grin.vite.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VITE Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageViteContactsButtonTitle = Rswift.StringResource(key: "send.page.vite.contacts.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VITE Conversion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailExchangeVite = Rswift.StringResource(key: "balance.info.detail.exchange.vite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VITE Conversion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageEthViteExchangeTitle = Rswift.StringResource(key: "confirm.transaction.page.eth.vite.exchange.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VITE Conversion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethViteExchangePageTitle = Rswift.StringResource(key: "eth.vite.exchange.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: VITE Transaction Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailGatewaysend = Rswift.StringResource(key: "grin.detail.gatewaysend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Value (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexHomePageHeaderBtcValuationTitle = Rswift.StringResource(key: "dex.home.page.header.btc.valuation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Value must be greater than 0
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPagePostToastPriceZero = Rswift.StringResource(key: "spot.page.post.toast.price.zero", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Value must be greater than 0
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let spotPagePostToastVolZero = Rswift.StringResource(key: "spot.page.post.toast.vol.zero", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Verification Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let airdropValidationFailed = Rswift.StringResource(key: "airdrop.validationFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Verify
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageBiometryConfirmReason = Rswift.StringResource(key: "confirm.transaction.page.biometry.confirm.reason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Verify fingerprint to activate Touch ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let lockPageFingerprintAlterTitle = Rswift.StringResource(key: "lock.page.fingerprint.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Version
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageCellVersion = Rswift.StringResource(key: "aboutUs.page.cell.version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: View More Details on Etherscan
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let ethTransactionDetailGoButtonTitle = Rswift.StringResource(key: "eth.transaction.detail.go.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: View More Details on Vite Explorer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageLinkButtonTitle = Rswift.StringResource(key: "vite.transaction.detail.page.link.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageNewsCellOfficial = Rswift.StringResource(key: "discover.page.news.cell.official", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite Gateway Collection
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailGateway = Rswift.StringResource(key: "grin.detail.gateway", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenListPageSectionViteHeader = Rswift.StringResource(key: "token.list.page.section.vite.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let receivePageWalletName = Rswift.StringResource(key: "Receive.page.wallet.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite gateway confirmation has reached 10, if the state not changing to "Unreceived" for a long time, please try "Request for Vite gateway to resend".
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailGatewayConfirmConntBiggerThanTen = Rswift.StringResource(key: "grin.detail.gateway.confirmConntBiggerThanTen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite gateway has received the transaction, and will transfer to you after 10 confirmations.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailGatewayConfirmConntLessThanTen = Rswift.StringResource(key: "grin.detail.gateway.confirmConntLessThanTen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite gateway has received the transaction, and will transfer to you after 10 confirmations.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailGatewayReceived = Rswift.StringResource(key: "grin.detail.gatewayReceived", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite.net
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageCellPortalWebsite = Rswift.StringResource(key: "aboutUs.page.cell.portal.website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite.org
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageCellOfficialWebsite = Rswift.StringResource(key: "aboutUs.page.cell.official.website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vite.wiki
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let aboutUsPageCellBlogWebsite = Rswift.StringResource(key: "aboutUs.page.cell.blog.website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: ViteConnect Connected
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostConnectTipInWalletHome = Rswift.StringResource(key: "bifrost.connect.tip.in.wallet.home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: ViteConnect Connected
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostHomePageFreeHeader = Rswift.StringResource(key: "bifrost.home.page.free.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: ViteConnect is connected, switch address will break network connection. Make sure to switch address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostAlertSwitchAddressMessage = Rswift.StringResource(key: "bifrost.alert.switch.address.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: ViteX Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationVxDeposit = Rswift.StringResource(key: "bifrost.operation.vx.deposit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: ViteX Withdrawal
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationVxWithdraw = Rswift.StringResource(key: "bifrost.operation.vx.withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Volume
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageValueVolTitle = Rswift.StringResource(key: "market.detail.page.value.vol.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let balanceInfoDetailVote = Rswift.StringResource(key: "balance.info.detail.vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bnbTxTypeVoteTitle = Rswift.StringResource(key: "bnb.txType.vote.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinVoteFunctionTitle = Rswift.StringResource(key: "buildin.vote.function.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteVoteTransferTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.vote.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let vote = Rswift.StringResource(key: "vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let votePageTitle = Rswift.StringResource(key: "vote.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Vote revoking request is successfully sent
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowToastCancelVoteSuccess = Rswift.StringResource(key: "workflow.toast.cancel.vote.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Votes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinVoteItem1Title = Rswift.StringResource(key: "buildin.vote.item1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Votes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let voteListCount = Rswift.StringResource(key: "vote.list.count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostOperationVote = Rswift.StringResource(key: "bifrost.operation.vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameVote = Rswift.StringResource(key: "transaction.list.transaction.type.name.vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let votePageVoteStatusVoting = Rswift.StringResource(key: "vote.page.voteStatus.voting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Waiting for Smart Contract Response
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteTransactionDetailPageStateCallWait = Rswift.StringResource(key: "vite.transaction.detail.page.state.call.wait", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tabTitleWallet = Rswift.StringResource(key: "tab.title.wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tabbarItemTitleWallet = Rswift.StringResource(key: "tabbar.item.title.wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wallet Asset
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundTitleWallet = Rswift.StringResource(key: "fund.title.wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wallet Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundWalletFound = Rswift.StringResource(key: "fund.walletFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wallet Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageWalletBalanceTitle = Rswift.StringResource(key: "send.page.wallet.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wallet Management
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let manageWalletPageTitle = Rswift.StringResource(key: "manage.wallet.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wallet check will scan the chain and cancel all pending transactions, unlock any locked outputs, restore any missing outputs, and ensure your wallet's content is consistent with the chain's version.Will consume a large amount of cellular data, it is recommended to continue the process on Wi-Fi
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinWalletCheckDesc = Rswift.StringResource(key: "grin.wallet.check.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wallet name can not be empty
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let manageWalletPageErrorTypeName = Rswift.StringResource(key: "manage.wallet.page.error.type.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: We noticed that you don’t have any VITE locked for Quota. You can get free Quota for %@ more times today or lock VITE now.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowTipFloatViewMessage2 = Rswift.StringResource(key: "quota.pow.tip.float.view.message.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: We strongly advise against taking a screenshot of the seed phrase.  We suggest that you write down the seed phrase on a piece of paper and keep it in a safe place.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageAlterTitle = Rswift.StringResource(key: "mnemonic.backup.page.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Website
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPageWebside = Rswift.StringResource(key: "token.info.detail.page.webside", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: WhitePaper
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageTokenInfoPaper = Rswift.StringResource(key: "market.detail.page.token.info.paper", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: WhitePaper
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let tokenInfoDetailPagePaper = Rswift.StringResource(key: "token.info.detail.page.paper", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Winners
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let airdropVpower = Rswift.StringResource(key: "airdrop.vpower", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteCancelPledgeTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.cancel.pledge.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawBtnTitle = Rswift.StringResource(key: "crosschain.withdraw.btnTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexHomePageHeaderButtonWithdrawTitle = Rswift.StringResource(key: "dex.home.page.header.button.withdraw.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dexTokenDetailPageButtonWithdraw = Rswift.StringResource(key: "dex.token.detail.page.button.withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdraw All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawAll = Rswift.StringResource(key: "crosschain.withdraw.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdraw to Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let confirmTransactionPageViteDexWithdrawTransferTitle = Rswift.StringResource(key: "confirm.transaction.page.vite.dex.withdraw.transfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdraw to Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let fundTitleToWallet = Rswift.StringResource(key: "fund.title.toWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdrawal Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawAmount = Rswift.StringResource(key: "crosschain.withdraw.amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdrawal Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatusWithdrawFailed = Rswift.StringResource(key: "crosschain.status.withdraw.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdrawal History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawHistory = Rswift.StringResource(key: "crosschain.withdraw.history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdrawal List
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let miningStakingPageWithdrawPageTitle = Rswift.StringResource(key: "mining.staking.page.withdraw.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdrawal fee is charged by gateway
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainWithdrawFeeDesc = Rswift.StringResource(key: "crosschain.withdraw.fee.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdrawal is only applicable for staked amount larger than 10 VX.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let dividendsPageUnlockConfirmTip2 = Rswift.StringResource(key: "dividends.page.unlock.confirm.tip2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdrawal of staking quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameCancelPledge = Rswift.StringResource(key: "transaction.list.transaction.type.name.cancelPledge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdrawal of staking tokens
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let transactionListTransactionTypeNameCancelCoin = Rswift.StringResource(key: "transaction.list.transaction.type.name.cancelCoin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Withdrawing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let peldgeCancelPledgeWithdrawingTitle = Rswift.StringResource(key: "peldge.cancel.pledge.withdrawing.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Would you like to create a new seed phrase?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageAlterMessage = Rswift.StringResource(key: "mnemonic.backup.page.alter.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Write down your seed phrase on a piece of paper and keep it in a safe place.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageTip2 = Rswift.StringResource(key: "mnemonic.backup.page.tip2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wrong Invitation Code
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let createPageToastErrorInviteCode = Rswift.StringResource(key: "create.page.toast.error.invite.code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wrong Password!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let exportPageAlterPasswordError = Rswift.StringResource(key: "export.page.alter.password.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wrong address, please check the format
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let sendPageToastAddressError = Rswift.StringResource(key: "send.page.toast.address.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wrong format with transaction amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteUriAmountFormatError = Rswift.StringResource(key: "vite.uri.amount.format.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wrong password!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowConfirmPageToastPasswordError = Rswift.StringResource(key: "workflow.confirm.page.toast.password.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wrong password! Please try to import seed phrase instead
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let loginPageErrorToastTitle = Rswift.StringResource(key: "login.page.error.toast.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Wrong transfer address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainStatusWrongAddress = Rswift.StringResource(key: "crosschain.status.wrong.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: YES
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let buildinCoinIssuanceItem5YesValue = Rswift.StringResource(key: "buildin.coin.issuance.item5.yes.value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let crosschainTokenDetailIssuanceTrue = Rswift.StringResource(key: "crosschain.tokenDetail.issuance.true", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageAlterConfirm = Rswift.StringResource(key: "mnemonic.backup.page.alter.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You are going to visit a third party page which leaves Vite App. Your use on this page will abide by third party Term of User Agreement and Privacy Policy, Vite Labs has any supervision or control over the quality, content, reliability or security of the third party dApp, nor shall Vite Labs be liable for its use.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let walletHomeScanUrlAlertMessage = Rswift.StringResource(key: "wallet.home.scan.url.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You are making changes on ViteX & Web Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostHomePageBusyHeader = Rswift.StringResource(key: "bifrost.home.page.busy.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You can also get quota for any other address by %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowFastGetQuotaTip = Rswift.StringResource(key: "workflow.fast.get.quota.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You can only recover your account by mnemonic word after deleting an account, do you confirm to delete this account?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let systemPageCellDeleteWalletAlertTitle = Rswift.StringResource(key: "system.page.cell.delete.wallet.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You can transfer GRIN to any wallet supporting receiving GRIN through HTTP address, however we suggest using VITE address or file to transfer GRIN to users who use Vite wallet.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentUseHttpDesc = Rswift.StringResource(key: "grin.sent.useHttp.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You cannot make any transfer until you receive a transaction.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let viteErrorRpcErrorCodeNoTransactionBefore = Rswift.StringResource(key: "vite.error.rpc.error.code.no.transaction.before", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You cannot vote for now as there is no transaction record in your address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let voteListSearchNoTransactionBefore = Rswift.StringResource(key: "vote.list.search.no.transaction.before", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You have already received the transaction, if the state doesn't go to "Confirmed", please try "Request for Vite gateway to resend".
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinDetailTxReceivedAndCanAskGatewaytoSend = Rswift.StringResource(key: "grin.detail.txReceivedAndCanAskGatewaytoSend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You have no transaction yet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let bifrostHomePageFreeContent = Rswift.StringResource(key: "bifrost.home.page.free.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You have successfully sent GRIN transfer request
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentHttpSuccess = Rswift.StringResource(key: "grin.sent.http.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You have used up all your free Quota for today. Please lock VITE.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowTipFloatViewMessage1 = Rswift.StringResource(key: "quota.pow.tip.float.view.message.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You have visited a page which leaves Vite App, and you will be redirected to a third party dApp. Your use on this dApp will abide by the dApp's Term of User Agreement and Privacy Policy. Vite Labs has no supervision or control over the quality, content, reliability or security of the third party dApp, nor shall Vite Labs be liable for its use.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let discoverPageGameAlterTitle = Rswift.StringResource(key: "discover.page.game.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You have voted for %@, please make sure this action will overwrite current voting result
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let voteListAlertAlreadyVoted = Rswift.StringResource(key: "vote.list.alert.already.voted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You may withdraw your staked VITE after 3 days. If the quota you received from staking is sufficient for a transaction, you can skip this step of PoW.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowFinishedFloatViewH2 = Rswift.StringResource(key: "quota.pow.finished.float.view.h2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: You spent %1$@S in this PoW computation, and secured and used %2$@Quota.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let quotaPowFinishedFloatViewH1 = Rswift.StringResource(key: "quota.pow.finished.float.view.h1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Your GRIN transaction has started to be broadcast
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinFinalizedAlertDesc = Rswift.StringResource(key: "grin.finalized.alertDesc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Your HTTP address for receiving GRIN has been copied to the clipboard
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinReceiveByHttpAddressCopyed = Rswift.StringResource(key: "grin.receiveByHttp.addressCopyed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Your VITE address for receiving GRIN has been copied to the clipboard.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinReceiveByViteAddressCopyed = Rswift.StringResource(key: "grin.receiveByVite.addressCopyed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Your device not support airdrop.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let airdropErrorTipNotSupport = Rswift.StringResource(key: "airdrop.error.tip.not.support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Your password should contain at lease 8 characters
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupPageErrorTypePwdIllegal = Rswift.StringResource(key: "mnemonic.backup.page.error.type.pwd.illegal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: Your transaction has sent.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let grinSentViteSuccess = Rswift.StringResource(key: "grin.sent.vite.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: chg
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageValueDiffTitle = Rswift.StringResource(key: "market.detail.page.value.diff.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: chg%
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let marketDetailPageValueExtentTitle = Rswift.StringResource(key: "market.detail.page.value.extent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: clicking here
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let workflowFastGetQuotaLink = Rswift.StringResource(key: "workflow.fast.get.quota.link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// en translation: 中
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static let mnemonicBackupLanguageZh = Rswift.StringResource(key: "mnemonic.backup.language.zh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja-JP", "fr-FR", "fil-PH", "de-DE", "id-ID", "es-ES", "tr-TR", "ko-KR", "zh-Hans", "vi-VN", "ru-RU"], comment: nil)
      /// zh-Hans translation: 原生代幣
      /// 
      /// Locales: zh-Hans
      public static let tokenInfoDetailPageTypeValueNative = Rswift.StringResource(key: "token.info.detail.page.type.value.native", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 我的投票數
      /// 
      /// Locales: zh-Hans
      public static let votePageVoteInfoNoDePollsTitle = Rswift.StringResource(key: "vote.page.voteInfo.no​​dePolls.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 暫無投票
      /// 
      /// Locales: zh-Hans
      public static let votePageInfoNoDataTitle = Rswift.StringResource(key: "vote.page.info.no​​data.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 跨鏈代幣
      /// 
      /// Locales: zh-Hans
      public static let tokenInfoDetailPageTypeValueOther = Rswift.StringResource(key: "token.info.detail.page.type.value.other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      
      /// en translation: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailUnit(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.unit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation:      The advice comes from the using environment as below: 1.System device: %@ 2.System version:%@ 3.APP version: %@ 4.Language:%@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageEmailContent(_ value1: String, _ value2: String, _ value3: String, _ value4: String) -> String {
        return String(format: NSLocalizedString("aboutUs.page.email.content", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3, value4)
      }
      
      /// en translation:  Billion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func unitBillion(_: Void = ()) -> String {
        return NSLocalizedString("unit.Billion", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation:  Million
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func unitMillion(_: Void = ()) -> String {
        return NSLocalizedString("unit.Million", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation:  Trillion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func unitTrillion(_: Void = ()) -> String {
        return NSLocalizedString("unit.Trillion", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: %@ Chain Unconfirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatusWaitToConfirm(_ value1: String) -> String {
        return String(format: NSLocalizedString("crosschain.status.waitToConfirm", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ Confirmations
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionConfirmations(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction.list.transaction.confirmations", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ UTPS
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageQuotaContent(_ value1: String) -> String {
        return String(format: NSLocalizedString("send.page.quota.content", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ contact address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressListPageOtherTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("address.list.page.other.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ players are playing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageGameCellPalyNum(_ value1: String) -> String {
        return String(format: NSLocalizedString("discover.page.game.cell.palyNum", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@d ago
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageNewsCellTimeDay(_ value1: String) -> String {
        return String(format: NSLocalizedString("discover.page.news.cell.time.day", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@h ago
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageNewsCellTimeHour(_ value1: String) -> String {
        return String(format: NSLocalizedString("discover.page.news.cell.time.hour", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %d new asset(s)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenListPageIgnoreLabTitle(_ value1: Int) -> String {
        return String(format: NSLocalizedString("token.list.page.ignore.lab.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: (%@ Quota)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailUnconfirmedQuotaTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("balance.info.detail.unconfirmed.quota.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: (%@). Please check the transaction history before trying again
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageEthFailed(_ value1: String) -> String {
        return String(format: NSLocalizedString("send.page.eth.failed", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: 0 Quota/0 Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailPledgeNoneTip(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.pledge.none.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1 Day
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterDate1d(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.date.1d", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1 Month
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterDate1m(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.date.1m", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1 Week
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterDate1w(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.date.1w", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1. Initialization is required upon adding GRIN wallet 2. The process is expected to last 15 minutes 3. Do not interrupt or kill the APP during initialization 4. Initialization will consume a large amount of cellular data, it is recommended to continue the process on Wi-Fi.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinInitingDetail(_: Void = ()) -> String {
        return NSLocalizedString("grin.initing.detail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 12H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageKlineTypeHour12Title(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.kline.type.hour12.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1D
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageKlineTypeDay1Title(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.kline.type.day1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageKlineTypeHour1Title(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.kline.type.hour1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1W
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageKlineTypeWeek1Title(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.kline.type.week1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1m
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageKlineTypeMin1Title(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.kline.type.min1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 24H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageInfoVolTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.info.vol.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 24H Expected Mined
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningOrderPageHeaderEstimate(_: Void = ()) -> String {
        return NSLocalizedString("mining.order.page.header.estimate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 24H Expected Mined
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningTradingPageHeaderExpect(_: Void = ()) -> String {
        return NSLocalizedString("mining.trading.page.header.expect", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageKlineTypeHour2Title(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.kline.type.hour2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3 Months
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterDate3m(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.date.3m", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 30m
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageKlineTypeMin30Title(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.kline.type.min30.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 4H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageKlineTypeHour4Title(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.kline.type.hour4.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 6H
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageKlineTypeHour6Title(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.kline.type.hour6.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">About Cross-Chain Deposit</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Making a cross-chain deposit allows %@ to be mapped into the Vite network. After that, you will also be able to make a cross-chain withdrawal. %@ balance in your Vite wallet will be reduced accordingly when you make a cross-chain deposit from your Vite wallet.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositAbout(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("crosschain.deposit.about", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">About Cross-Chain Deposit</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Making a cross-chain deposit allows %@ to be mapped into the Vite network. After that, you will also be able to make a cross-chain withdrawal.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositOtherAbout(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("crosschain.deposit.other.about", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">About Voting</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">You can join and vote for 25 SBPs(Snapshot Block Producer), each round of voting lasts 75s, your votes equals the balance of your vote address. Your vote keeps the same the next rounds unless you revoke your vote or vote for another node. Random 23 out of top 25 candidates plus 2 out of candidates ranking 26th to 100th, 25 nodes in total will be elected as SBPs.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func popPageTipVote(_: Void = ()) -> String {
        return NSLocalizedString("pop.page.tip.vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">Understand VITE Conversion</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">You can convert ERC20 VITE  into VITE at Vite Pre-Mainnet through VITE conversion. During conversion, your ERC20 VITE will be transferred to Ethereum black hole address: 0x1111111111111111111111111111111111111111, and you will receive the same amount of VITE in your Vite address after the transaction to Ethereum black hole address has completed. During the conversion, fee of transaction to the Ethereum black hole address come from your current ETH address. After submitting the conversion, please wait at least 30 confirmations in Ethereum network, you can find the transaction history in conversion history.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func popPageTipEthViteExchange(_: Void = ()) -> String {
        return NSLocalizedString("pop.page.tip.ethViteExchange", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is Quota?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">In the Vite system, users do not purchase the gas required for a transaction by paying a fee, but acquire the computing resource through a quota-based model. Required quota for sending a transaction = the basic quota (request) + quota (the attached text data), quota required to accept a transaction = the basic quota (response). This quota-based resource configuration protocol allows users to obtain higher resource quotas in two ways: </p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">a.Staking VITE to obtain quota</p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">b.Running PoW</p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Unit of Quota: UTPS, Unit of Transaction per Second.</p><h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is Staking?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">In the Vite system, the user can stake VITE to obtain a certain amount of quota. The minimum value for staking is 134 VITE, and there is no maximum limit; meanwhile, Vite system also supports that the A-address stakes a part of the VITE and allocates the obtained quota to the B address. When users apply to stake, VITE will be sent to the smart contract address instead of another user, and only the user who applies for staking has access to manage the staking amount.</p><h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is PoW?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Proof of Work (PoW), is a protocol to confirm that you have done a certain amount of work, and is also an economic measure to deter DDoS attacks and other service abuse. It requires the initiator to conduct a certain amount of computing, which means that it may take some time for the computer. In the Vite system, users can obtain a free quota by running the PoW, and also can send a transaction without any annotated information through obtained quota.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func popPageTipQuota(_: Void = ()) -> String {
        return NSLocalizedString("pop.page.tip.quota", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: <p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">%@ you had voted for has stopped campaigning for SBP, you may vote again or revoke your vote. If you do not do so, your original vote will be recovered after %@ re-registering.</p>
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func popPageTipVoteLoser(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("pop.page.tip.vote.loser", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: A minimum of 10 VX must be staked to receive dividends. Submission of staking request allows for dividends starting the nearest distribution
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockConfirmTip(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.confirm.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawAboutfee(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.aboutfee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About Us
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageAboutUsCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.aboutUs.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageTfTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tf.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func manageWalletPageNameCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.name.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account balances will update after %@ network confirmations. Please be patient.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositMinComfirm(_ value1: String) -> String {
        return String(format: NSLocalizedString("crosschain.deposit.minComfirm", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Account name only supports Chinese and English characters as well as underscores.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageErrorTypeNameValid(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.error.type.nameValid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Active
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func votePageNodeStatusValidTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.nodeStatus.valid.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Actual Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinReceiveTureAmount(_: Void = ()) -> String {
        return NSLocalizedString("grin.receive.ture.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsHomePageAddButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.home.page.add.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageDetailAddButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.detail.add.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageAddressGenerateButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.address.generate.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageAddTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.add.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Custom Node
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func nodeSettingsPageAddButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("node.settings.page.add.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Custom PoW
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func powSettingsPageAddButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("pow.settings.page.add.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add New Full Node
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinNodeAddNode(_: Void = ()) -> String {
        return NSLocalizedString("grin.node.addNode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add up to maximum 100 addresses!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageAddressGenerateButtonToast(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.address.generate.button.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add your first address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsHomePageNoContactTip(_: Void = ()) -> String {
        return NSLocalizedString("contacts.home.page.no.contact.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Adding...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicAffirmPageAddLoading(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.page.add.loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostHomePageFreeAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.home.page.free.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func voteListAddress(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address Management
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func manageWalletPageAddressManageCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.addressManage.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address already exists
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageAddressGenerateButtonAlreadyToast(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.address.generate.button.already.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Addresses
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageAddressHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.address.header.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Adjust Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexAdjustFeesFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.adjust.fees.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Adjusted Maker Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexAdjustFeesItemMakerTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.adjust.fees.item.maker.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Adjusted Taker Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexAdjustFeesItemTakerTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.adjust.fees.item.taker.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Airdrop is only supported on iOS 11 and above.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func airdropErrorTipNeedUpdate(_: Void = ()) -> String {
        return NSLocalizedString("airdrop.error.tip.need.update", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsHomePageFilterAll(_: Void = ()) -> String {
        return NSLocalizedString("contacts.home.page.filter.all", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageExchangeAllButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.vite.exchange.page.exchange.all.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundDepositAll(_: Void = ()) -> String {
        return NSLocalizedString("fund.deposit.all", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageAllButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.all.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterAll(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.all", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Already exists
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func powSettingsPageNodeExistError(_: Void = ()) -> String {
        return NSLocalizedString("pow.settings.page.node.exist.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostCreateContractTitleAmount(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.create.contract.title.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationTitleAmount(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.title.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinReissueTokenItem3Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.reissue.token.item3.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexBecomeVipItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.become.vip.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexCancelStakingAsMiningItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.cancel.staking.as.mining.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexCancelVipItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.cancel.vip.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexLockVxItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.lock.vx.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexStakingAsMiningItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.staking.as.mining.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexUnLockVxItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.un.lock.vx.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinTransferCrossChainItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.transfer.cross.chain.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinTransferUtf8stringItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.transfer.utf8string.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionAmountTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.amount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockConfirmAmount(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.confirm.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockConfirmAmount(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlock.confirm.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailAmount(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentAmount(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTradeVolTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.trade.vol.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageConfirmAmountTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.confirm.amount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageAmountTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.amount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageDepthVol(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.depth.vol", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageVolBuyPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.vol.buy.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageVolSellPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.vol.sell.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transferAmount(_: Void = ()) -> String {
        return NSLocalizedString("transfer.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount exceeds the %@-%@ limit, please contact gateway@vite.org to send out.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawGatewayispoor(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("crosschain.withdraw.gatewayispoor", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Amount(%@)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageDepthVolTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("market.detail.page.depth.vol.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Amount: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exchangeAmount(_: Void = ()) -> String {
        return NSLocalizedString("exchange.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amt.: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCellVol(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.cell.vol", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: An ID conflict occurs, please re-submit later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorRpcErrorCodeIdConflict(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.id.conflict", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Anonymous
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoAnonymous(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.anonymous", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Approx %@ days
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageQuotaSnapshootHeightDesc(_ value1: String) -> String {
        return String(format: NSLocalizedString("quota.manage.page.quota.snapshoot.height.desc", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Are you sure to delete this address?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageDeleteAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.delete.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: As shown in the picture above, Vite will do the collection and remit for you when you choose to transfer or receive GRIN through HTTP address. There are transaction fees in both the two steps above.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinReceiveByHttpDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.receiveByHttp.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Asset
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tabTitleDex(_: Void = ()) -> String {
        return NSLocalizedString("tab.title.dex", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Assets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func walletHomeHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.header.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Assets ignored will not be informed again, are you sure to ignore the assets below?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenListPageIgnoreAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("token.list.page.ignore.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Auto Sign
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostHomePageFreeAutoSignTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.home.page.free.auto.sign.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Auto-Lock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellLoginPwd(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.login.pwd", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Auto-Receive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellAutoReceiveSettings(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.auto.receive.settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Automatic Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockAuto(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.auto", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Avail.: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageAvailable(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.available", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Available
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailAvailableAmountTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.available.amount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Available
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderAvailable(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.available", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundVitexFound(_: Void = ()) -> String {
        return NSLocalizedString("fund.vitexFound", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Available Date %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockListTime(_ value1: String) -> String {
        return String(format: NSLocalizedString("dividends.page.unlock.list.time", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Available Date: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageWithdrawPageLockTime(_ value1: String) -> String {
        return String(format: NSLocalizedString("mining.staking.page.withdraw.page.lock.time", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Available Stake Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockConfirmAmountTotal(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlock.confirm.amount.total", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Available Stake Balance：%@ VITE  It takes 7 days to return unstaked VITE coins to exchange balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageWithdrawPageAlertMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("mining.staking.page.withdraw.page.alert.message", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Avg.: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCellAverage(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.cell.average", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Awaiting Confirmation
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinBalanceAwaiting(_: Void = ()) -> String {
        return NSLocalizedString("grin.balance.awaiting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Awaiting Finalization
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxbyfileReceivedStatusSender(_: Void = ()) -> String {
        return NSLocalizedString("grin.txbyfile.receivedStatus.sender", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Awaiting Receiving
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxbyfileInitStatusReceiver(_: Void = ()) -> String {
        return NSLocalizedString("grin.txbyfile.initStatus.receiver", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Awaiting Signature
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostListPageStatusPending(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.list.page.status.pending", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BNB Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbSendPageAddressTitleLabelTitleLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.send.page.addressTitleLabel.titleLabel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BNB Contacts
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbSendPageEthContactsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.send.page.eth.contacts.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostAlertApproveSessionAnotherAddressCancel(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.alert.approve.session.another.address.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowConfirmPageBiometryAuthFailedBack(_: Void = ()) -> String {
        return NSLocalizedString("workflow.confirm.page.biometryAuthFailed.back", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back Up Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageTipButtonSkipTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.button.skip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back Up Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageTipSkipTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.skip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back Up Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupTipAlertCancelTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.tip.alert.cancel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back Up Now
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupTipAlertOkTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.tip.alert.ok.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backed Up
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageTipButtonNextTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.button.next.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backed Up
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageTipNextBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.nextBtn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup Instructions
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailBalanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.balance.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageMyBalanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.vite.exchange.page.my.balance.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageMyBalanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.my.balance.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func walletHomeBalanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.balance.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transferAvailable(_: Void = ()) -> String {
        return NSLocalizedString("transfer.available", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Become a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexBecomeVipFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.become.vip.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Become a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexVipTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.vip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Become a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageOpenVip(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.open.vip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Beneficiary
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func peldgeAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("peldge.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Beneficiary Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinReissueTokenItem2Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.reissue.token.item2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Benefits
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func airdropProfit(_: Void = ()) -> String {
        return NSLocalizedString("airdrop.profit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Binance Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenListPageSectionBnbHeader(_: Void = ()) -> String {
        return NSLocalizedString("token.list.page.section.bnb.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Biometric Verification
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func lockPageFingerprintBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.page.fingerprint.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailBlock(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.block", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block Height
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageHeightTitle(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.height.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Built-in contract error, please try again later(-35004)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorRpcErrorCodeContractDataIllegal(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.contract.data.illegal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Built-in contract method not exist, please try again later(-35006)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorRpcErrorCodeContractMethodNotExist(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.contract.method.not.exist", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bulk generate a specified number of addresses
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageAlertTip(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.alert.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Burn
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeBurnTokenTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.burnToken.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exchangeBuy(_: Void = ()) -> String {
        return NSLocalizedString("exchange.buy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageBuyButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.buy.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterSideBuy(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.side.buy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageButtonBuyTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.button.buy.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCellTypeBuy(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.cell.type.buy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexBuyTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("confirm.transaction.page.vite.dex.buy.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Buy VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exchangeCardTitle(_: Void = ()) -> String {
        return NSLocalizedString("exchange.card.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowTipFloatViewBuy1(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.tip.float.view.buy.1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: By clicking Next, you agree with the %@'s %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementAgree(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("crosschain.statement.agree", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: By using services from %@, you agree to be bound by %@ %@. If you do not agree to these terms, please refrain from using service from %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementOtherDesc1(_ value1: String, _ value2: String, _ value3: String, _ value4: String) -> String {
        return String(format: NSLocalizedString("crosschain.statement.other.desc1", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3, value4)
      }
      
      /// en translation: By using services from %@, you agree to be bound by %@ %@. If you do not agree to these terms, please refrain from using service from %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementViteDesc1(_ value1: String, _ value2: String, _ value3: String, _ value4: String) -> String {
        return String(format: NSLocalizedString("crosschain.statement.vite.desc1", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3, value4)
      }
      
      /// en translation: Call
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameContract(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.contract", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Call Contract Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageStateCallFailed(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.state.call.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Call Contract Succeeded
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageStateCallSuccess(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.state.call.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func cancelButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("cancel.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexCancelOrderTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.cancel.order.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func importPageAlertExistCancel(_: Void = ()) -> String {
        return NSLocalizedString("import.page.alert.exist.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupScanAlertCancelTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.scan.alert.cancel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaSubmitPopCancelBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.submit.pop.cancel.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageNotEnoughBalanceAlertButton(_: Void = ()) -> String {
        return NSLocalizedString("send.page.not.enough.balance.alert.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCellButtonCancelTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.cell.button.cancel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func submitCancel(_: Void = ()) -> String {
        return NSLocalizedString("Submit.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel Order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeCancelOrderTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.cancelOrder.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel Order on ViteX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationVxCancelOrder(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.vx.cancel.order", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel SBP Registration
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationCancelRegisterSbp(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.cancel.register.sbp", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel Staking as Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexCancelStakingAsMiningFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.cancel.staking.as.mining.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexCancelVipFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.cancel.vip.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexCancelVipTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.cancel.vip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCloseVip(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.close.vip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Canceled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostListPageStatusCanceled(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.list.page.status.canceled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Canceled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinCanceled(_: Void = ()) -> String {
        return NSLocalizedString("grin.canceled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Canceled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxCancele(_: Void = ()) -> String {
        return NSLocalizedString("grin.tx.Cancele", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Canceled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxTypeCanceled(_: Void = ()) -> String {
        return NSLocalizedString("grin.txType.Canceled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancelled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterStatusCanceled(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.status.canceled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Candidate Nodes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func voteListTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cannot be identified
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowConfirmPageBiometryAuthFailedTitle(_: Void = ()) -> String {
        return NSLocalizedString("workflow.confirm.page.biometryAuthFailed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Caution! Loss of mnemonic words will result in loss of all digital assets in the wallet.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageTipContent1(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.content1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketPercent(_: Void = ()) -> String {
        return NSLocalizedString("market.percent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change Password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func changePasswordPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("change.password.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change to Non-issuable
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinChangeToNonissuableFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.change.to.nonissuable.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Check
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinWalletCheck(_: Void = ()) -> String {
        return NSLocalizedString("grin.wallet.check", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Check Genesis Block Records
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListPageGenesisCellName(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.genesis.cell.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Check transaction history in Ethereum Explorer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailShowTransactionsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.show.transactions.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Claim Rewards
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationExtractReward(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.extract.reward", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterButtonClear(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.button.clear", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Close
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func close(_: Void = ()) -> String {
        return NSLocalizedString("Close", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Close
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageValueCloseTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.value.close.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Coin Forging Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailAddress(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Coinbase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailFromMine(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.fromMine", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Comfirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexVipConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.vip.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Comment
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinTransferUtf8stringItem2Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.transfer.utf8string.item2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Comment
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func receivePageTokenNoteLabel(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.token.note.label", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Completed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterStatusCompleted(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.status.completed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Computing PoW to Secure Quota for this Transaction...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaFloatViewTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.float.view.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Configurate Full Node.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinNodeConfigNode(_: Void = ()) -> String {
        return NSLocalizedString("grin.node.configNode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirm(_: Void = ()) -> String {
        return NSLocalizedString("Confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageEthConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.eth.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageGrinConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.grin.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteCallContractConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.call.contract.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteCancelVoteConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.cancel.vote.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexBuyConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.buy.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexCancelOrderConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.cancel.order.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexCancelVipConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.cancel.vip.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexDepositConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.deposit.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexSellConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.sell.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexWithdrawConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.withdraw.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageVitePledgeConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.pledge.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteVoteConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.vote.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func importPageAlertExistOk(_: Void = ()) -> String {
        return NSLocalizedString("import.page.alert.exist.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicAffirmPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupScanAlertOkTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.scan.alert.ok.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaSubmitPopSubmitBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.submit.pop.submit.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageAlertOk(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.alert.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func voteListConfirmRevote(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.confirm.revote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm account creation with the following mnemonic words?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupScanAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.scan.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm to Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageConfirmButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.confirm.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm to login
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostAlertApproveSessionAnotherAddressOk(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.alert.approve.session.another.address.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatusConfirmed(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.status.confirmed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxTypeConfirmed(_: Void = ()) -> String {
        return NSLocalizedString("grin.txType.confirmed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionConfirmationsFinished(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.confirmations.finished", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirmed Coinbase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxTypeConfirmedCoinbase(_: Void = ()) -> String {
        return NSLocalizedString("grin.txType.confirmedCoinbase", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connection Error, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostErrorMessageUnknown(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.error.message.unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connection time out, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostErrorMessageTimeout(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.error.message.timeout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsHomePageTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.home.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageContactsCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.contacts.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contact Us
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageCellContact(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contract Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostCreateContractTitleContractAddress(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.create.contract.title.contract.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contract Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationTitleContractAddress(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.title.contract.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contract Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contractConfirmInfo(_: Void = ()) -> String {
        return NSLocalizedString("contract.confirm.info", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contract Invoke
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Conversion Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageAmountTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.vite.exchange.page.amount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Conversion History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageExchangeHistoryButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.vite.exchange.page.exchange.history.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Convert
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageEthViteExchangeConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.eth.vite.exchange.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Convert
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageSendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.vite.exchange.page.send.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Convert %@ VITE at most
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageAmountPlaceholder(_ value1: String) -> String {
        return String(format: NSLocalizedString("eth.vite.exchange.page.amount.placeholder", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Copy
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxCopyId(_: Void = ()) -> String {
        return NSLocalizedString("grin.tx.copyId", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachHttpReceiveCopyHttpAddress(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.http.receive.copyHttpAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachViteReceiveCopyViteAddress(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.vite.receive.copyViteAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Countdown
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func airdropLeftTime(_: Void = ()) -> String {
        return NSLocalizedString("airdrop.leftTime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Creat and sync, 3 mins estimated
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinCreatSyncronizing(_: Void = ()) -> String {
        return NSLocalizedString("grin.creat.syncronizing", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageSubmitBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.submit.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinPayTitleCreat(_: Void = ()) -> String {
        return NSLocalizedString("grin.pay.title.creat", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create API
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationSignMessageTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.sign.message.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createAccount(_: Void = ()) -> String {
        return NSLocalizedString("create.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Contract
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostCreateContractTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.create.contract.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Created
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinReceiveSented(_: Void = ()) -> String {
        return NSLocalizedString("grin.receive.sented", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Created
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxFileInitStatus(_: Void = ()) -> String {
        return NSLocalizedString("grin.txFile.init.status", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Created
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxTypeSent(_: Void = ()) -> String {
        return NSLocalizedString("grin.txType.sent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Created
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxbyfileInitStatusSender(_: Void = ()) -> String {
        return NSLocalizedString("grin.txbyfile.initStatus.sender", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Creation Time
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinCreatTime(_: Void = ()) -> String {
        return NSLocalizedString("grin.creatTime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cross-Chain
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoTypeValueOther(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.type.value.other", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cross-Chain Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDeposit(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cross-Chain Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationAcrossChainWithdraw(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.across.chain.withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cross-Chain Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinTransferCrossChainFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.transfer.cross.chain.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cross-Chain Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdraw(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cross-Chain gateway
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoGateway(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.gateway", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cross-Chain gateway
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageGateway(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.gateway", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellChangeCurrency(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.change.currency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationSignMessageAddress(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.sign.message.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexAdjustFeesItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.adjust.fees.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexBecomeVipItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.become.vip.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexCancelStakeItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.cancel.stake.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexCancelStakingAsMiningItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.cancel.staking.as.mining.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexCancelVipItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.cancel.vip.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexLockVxItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.lock.vx.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexOpenTradingPairItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.open.trading.pair.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexRecoverTradingPairItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.recover.trading.pair.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexStakingAsMiningItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.staking.as.mining.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexSuspendTradingPairItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.suspend.trading.pair.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexUnLockVxItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.un.lock.vx.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Height
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageCellBlockHeight(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.blockHeight", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current is a beta version, Please don't deposit large amount in your account.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainBetaAlert(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.beta.alert", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current trading fees displayed on this page contains only the 0.2% ViteX base transaction fees, please note that operator fees shall be taken into consideration when calculating mining cost
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningTradingPageHeaderTotalEarningsAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("mining.trading.page.header.total.earnings.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currently Vite App only supports checking staking list, please go to Web Wallet to withdraw staked tokens on due date if needed.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func peldgeMessage(_: Void = ()) -> String {
        return NSLocalizedString("peldge.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Customer Service
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func gatewayInfoDetailPageEmail(_: Void = ()) -> String {
        return NSLocalizedString("gateway.info.detail.page.email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DApps
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageHeaderTitleGame(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.headerTitle.game", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DApps
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageVCWebTitleGame(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.VCWebTitle.game", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DEX Assets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexHomePageNavTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.home.page.nav.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Daily Transaction Limit %@ VITE; Unused Daily Limit: %@ VITE   
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exchangeLimitOneday(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("exchange.limit.oneday", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Data
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostCreateContractTitleData(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.create.contract.title.data", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Data
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationTitleData(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.title.data", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Date
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterDateTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.date.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Decimals
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem4Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item4.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Decimals
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailDigit(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.digit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Default Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageDefaultAddressCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.default.address.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageDeleteButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.delete.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete Current Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellDeleteWalletTitle(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.delete.wallet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeDepositTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.deposit.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.btnTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexHomePageHeaderButtonDepositTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.home.page.header.button.deposit.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageButtonDeposit(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.button.deposit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositAddress(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositAll(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.all", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositAmount(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatusFailed(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.status.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositHistory(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.history", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit by Gateway
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatusGatewayReceived(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.status.gatewayReceived", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit from Another Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositOtherwallet(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.otherwallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit from Vite Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositVitewallet(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.vitewallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit to Exchange
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexDepositTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.deposit.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit to Exchange
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundTitleToVitex(_: Void = ()) -> String {
        return NSLocalizedString("fund.title.toVitex", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Description
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailDesc(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Discover
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Discover
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tabTitleDiscover(_: Void = ()) -> String {
        return NSLocalizedString("tab.title.discover", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Do not ask again in 24 hours
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageConfirmTip(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.confirm.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Don't show me again
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinNotSeeAgain(_: Void = ()) -> String {
        return NSLocalizedString("grin.notSeeAgain", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func finish(_: Void = ()) -> String {
        return NSLocalizedString("Finish", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: EN
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupLanguageEn(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.language.en", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ETH Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethSendPageMyAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.send.page.my.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ETH Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageMyAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.vite.exchange.page.my.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ETH Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethSendPageEthContactsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.send.page.eth.contacts.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ecosystem
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageHeaderTitleActivity(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.headerTitle.activity", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ecosystem
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageVCWebTitleActivity(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.VCWebTitle.activity", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit Account Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageChangeWalletNameAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.change.wallet.name.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit Address Alias
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageChangeNameAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.change.name.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageEditTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.edit.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit Wallet Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func manageWalletPageAlterChangeName(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.alter.changeName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Editing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func manageWalletPageChangeNameLoading(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.changeName.loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Eligible for mining when price is greater than %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageBuyMiningTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.buy.mining.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Eligible for mining when price is less than %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageSellMiningTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.sell.mining.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Empty
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListPageEmpty(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter confirm password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func changePasswordPageNew2Title(_: Void = ()) -> String {
        return NSLocalizedString("change.password.page.new.2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter invitation code or scan invitation QR code to enjoy 10% off trading fees and premiere mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageInviteCodeTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.invite.code.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter new password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func changePasswordPageNew1Title(_: Void = ()) -> String {
        return NSLocalizedString("change.password.page.new.1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter the old password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func changePasswordPageOldTitle(_: Void = ()) -> String {
        return NSLocalizedString("change.password.page.old.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ethereum Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenListPageSectionEthHeader(_: Void = ()) -> String {
        return NSLocalizedString("token.list.page.section.eth.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exceed the limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatusTotExceedLimit(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.status.tot.exceed.limit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exchange
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketSwitch(_: Void = ()) -> String {
        return NSLocalizedString("market.switch", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exchange Asset
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundTitleVitex(_: Void = ()) -> String {
        return NSLocalizedString("fund.title.vitex", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exchange Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexVipBalance(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.vip.balance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exchange Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockConfirmAmountTotal(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.confirm.amount.total", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exchange Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundVitexAvailable(_: Void = ()) -> String {
        return NSLocalizedString("fund.vitex.available", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exchange Available Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageConfirmAvailableTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.confirm.available.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exchange Total Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundVitexAll(_: Void = ()) -> String {
        return NSLocalizedString("fund.vitex.all", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Explorer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoBrowser(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.browser", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Explorer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageBrowser(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.browser", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export Grin Seed Phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinExportMnemonic(_: Void = ()) -> String {
        return NSLocalizedString("grin.export.mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export Seed Phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exportPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export Seed Phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func manageWalletPageImportMnemonicCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.importMnemonic.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Face ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellLoginFaceId(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.login.faceId", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterStatusFailed(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.status.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to connect with the full node.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinNodeSelectCanNotConnect(_: Void = ()) -> String {
        return NSLocalizedString("grin.node.select.canNotConnect", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failure
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostListPageStatusFailed(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.list.page.status.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fast
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethPageGasFeeFastTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.page.gasFee.fast.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Favorites
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketFavourite(_: Void = ()) -> String {
        return NSLocalizedString("market.favourite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostCreateContractTitleFee(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.create.contract.title.fee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationTitleFee(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.title.fee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbSendPageFeeViewTitleLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.send.page.feeView.titleLabel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinTransferCrossChainItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.transfer.cross.chain.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionFeeTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.fee.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainFee(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.fee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fee of single cross-chain withdrawal: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawFeeDesc2(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.fee.desc2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Feedback
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageEmailTitle(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.email.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentFee(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.fee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningTradingPageCellFee(_: Void = ()) -> String {
        return NSLocalizedString("mining.trading.page.cell.fee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Filled: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCellDeal(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.cell.deal", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Finalize
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinPayTitleFinalize(_: Void = ()) -> String {
        return NSLocalizedString("grin.pay.title.finalize", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Finalize and Broadcast
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinFinalize(_: Void = ()) -> String {
        return NSLocalizedString("grin.finalize", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Free Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowTipFloatViewNotNow2(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.tip.float.view.notNow.2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Freeze Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeFreezeTokenTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.freezeToken.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: From
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transferFrom(_: Void = ()) -> String {
        return NSLocalizedString("transfer.from", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Full Node Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinNodeEditNodeAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.node.edit.nodeAddressTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GRIN Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSendPageViteContactsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.sendPageViteContactsButtonTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GRIN Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenListPageSectionGrinHeader(_: Void = ()) -> String {
        return NSLocalizedString("token.list.page.section.grin.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethPageGasFeeTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.page.gasFee.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailGasFee(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.gas.fee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailGasLimit(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.gas.limit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailGasPrice(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.gas.price", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gateway Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainGatewaydetailTitle(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.gatewaydetail.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gateway Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func gatewayInfoDetailPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("gateway.info.detail.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gateway Introduction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func gatewayInfoDetailPageBrief(_: Void = ()) -> String {
        return NSLocalizedString("gateway.info.detail.page.brief", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gateway Link
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func gatewayInfoDetailPageLink(_: Void = ()) -> String {
        return NSLocalizedString("gateway.info.detail.page.link", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gateway Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainGatewaydetailName(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.gatewaydetail.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gateway Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func gatewayInfoDetailPageName(_: Void = ()) -> String {
        return NSLocalizedString("gateway.info.detail.page.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gateway Official Site
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func gatewayInfoDetailPageWebside(_: Void = ()) -> String {
        return NSLocalizedString("gateway.info.detail.page.webside", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gateway URL
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainGatewaydetailHost(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.gatewaydetail.host", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Generate New Addresses
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Generate Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentCreatFile(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.creatFile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailPledge(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.pledge", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationPledge(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.pledge", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageVitePledgeTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.pledge.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowTipFloatViewTitle2(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.tip.float.view.title.2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get Started with ViteX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketAbout(_: Void = ()) -> String {
        return NSLocalizedString("market.about", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get TPS quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNamePledge(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.pledge", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get quota now
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowTipFloatViewPledge1(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.tip.float.view.pledge.1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Github
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoGithub(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.github", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Github
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageGithub(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.github", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Grin wallet initializing, please wait a moment.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinCreating(_: Void = ()) -> String {
        return NSLocalizedString("grin.creating", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Grin wallet temporarily unavailable. Access your account on another Grin supported wallet app with your Recovery Phrase.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinCloseTips(_: Void = ()) -> String {
        return NSLocalizedString("grin.close.tips", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinHttpAddress(_: Void = ()) -> String {
        return NSLocalizedString("grin.http.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentStillUseHttp(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.stillUseHttp", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxMethodHttp(_: Void = ()) -> String {
        return NSLocalizedString("grin.txMethod.http", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func airdropHelp(_: Void = ()) -> String {
        return NSLocalizedString("airdrop.help", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hide Small Balances
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexHomePageHeaderButtonHideSmallTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.home.page.header.button.hide.small.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: High
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageInfoHighTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.info.high.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: High
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageValueHighTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.value.high.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageListWalletHeaterTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.list.wallet.heater.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageActivityPageTitle2(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.activity.page.title2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageOrdersButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.orders.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I have already read, understood and I agree to our 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageCheckButton3Title(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.check.button3.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I know
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageTipAlertOk(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.tip.alert.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I know
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinIknow(_: Void = ()) -> String {
        return NSLocalizedString("grin.iknow", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I know
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinKnow(_: Void = ()) -> String {
        return NSLocalizedString("grin.know", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I understand if I forget or lose the mnemonic words, nobody can help to recover
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageCheckButton2Title(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.check.button2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I understand if I lose the mnemonic words, I would never find back my assets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageCheckButton1Title(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.check.button1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If the state stays "Unreceived" for a long time, please try "Request for Vite gateway to resend".
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxNotReceivedAndCanAskGatewaytoSend(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txNotReceivedAndCanAskGatewaytoSend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If you want to send GRIN to a Vite Wallet user, sending through VITE address is recommended for it is safer and cheaper.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentSuggestUseViteDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.suggest.useVite.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ignore
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenListPageIgnoreBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("token.list.page.ignore.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Illegal transfer amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSendIllegalAmmount(_: Void = ()) -> String {
        return NSLocalizedString("grin.send.illegalAmmount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func importAccount(_: Void = ()) -> String {
        return NSLocalizedString("import.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import success
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func importPageSubmitSuccess(_: Void = ()) -> String {
        return NSLocalizedString("import.page.submit.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func importPageSubmitLoading(_: Void = ()) -> String {
        return NSLocalizedString("import.page.submit.loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Important Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementTitle(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.statement.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Important reminder
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Importing mnemonic words is the only way to retrieve an account after deleting or reinstalling the App.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageTipContent2(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.content2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: In Order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderLockPlaceOrder(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.lock.place.order", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: In case of problems with verification or payment processing, please contact %@ support team at %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementOtherDesc2(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("crosschain.statement.other.desc2", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: In case of problems with verification or payment processing, please contact %@ support team at %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementViteDesc2(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("crosschain.statement.vite.desc2", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: In process
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageWithdrawPageButtonDisTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.withdraw.page.button.dis.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Inactive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func votePageNodeStatusInvalidTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.nodeStatus.invalid.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Incorrect seed phrase!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicAffirmAlterCheckTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.alter.check.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Initializing, click to view details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinInitingDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.initing.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Input Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func receivePageTokenAmountAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.token.amount.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Input Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func receivePageTokenAmountButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.token.amount.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Input a number between 1 and 100
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageAlertPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.alert.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Instant Purchase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exchangeTitley(_: Void = ()) -> String {
        return NSLocalizedString("exchange.titley", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Instantly Getting Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowFastGetQuotaTitle(_: Void = ()) -> String {
        return NSLocalizedString("workflow.fast.get.quota.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageNotEnoughBalanceAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.not.enough.balance.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageToastAmountError(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.amount.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatusFailedBecausePoor(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.status.failedBecausePoor", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethErrorRpcErrorCodeNotEnoughBalance(_: Void = ()) -> String {
        return NSLocalizedString("eth.error.rpc.error.code.not.enough.balance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorRpcErrorCodeNotEnoughBalance(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.not.enough.balance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient exchange balance, stake 10,000 VITE to become a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageOpenVipErrorToast(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.open.vip.error.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowTipFloatViewTitle1(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.tip.float.view.title.1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorRpcErrorCodeNotEnoughQuota(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.not.enough.quota", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient quota of PoW, we would recommend that you stake VITE to obtain quota.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaAlertNeedQuotaMessage(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.need.quota.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Introduction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainGatewaydetailAbstract(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.gatewaydetail.abstract", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Introduction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoBrief(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.brief", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Introduction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageBrief(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.brief", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func votePageVoteStatusVoteInvalid(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteStatus.voteInvalid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid node
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func nodeSettingsPageNodeInvalidError(_: Void = ()) -> String {
        return NSLocalizedString("node.settings.page.node.invalid.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invitation Code(Optional)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageInviteCodePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("create.page.invite.code.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Issuance Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Issuance Date
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailDate(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.date", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Issuance Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem7Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item7.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Issue Asset
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeIssueTokenTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.issueToken.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: It takes about 7 days to unlock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockConfirmTip(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlock.confirm.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Key
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinNodeEditApiSecretTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.node.edit.apiSecretTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellChangeLanguage(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.change.language", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Last Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketPrice(_: Void = ()) -> String {
        return NSLocalizedString("market.price", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Last Trades
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageSegmentLastTradesTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.segment.last.trades.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Latest Events
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageActivityPageTitle1(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.activity.page.title1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Limit Order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageButtonLimitBuyTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.button.limit.buy.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Limit of cross-chain withdrawal
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawAmountLimitTitle(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.amount.limit.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Listing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeListTokenTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.listToken.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Listing Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexOpenTradingPairItem2Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.open.trading.pair.item2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Live Mining Dashboard
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningPageHeaderTotalRealTime(_: Void = ()) -> String {
        return NSLocalizedString("mining.page.header.total.real.time", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageCellBlockHeightLoadingTip(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.blockHeight.loading.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func loading(_: Void = ()) -> String {
        return NSLocalizedString("Loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListPageHeaderRefreshRefreshing(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.header.refresh.refreshing", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading...
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteRefreshBackFooterRefreshingText(_: Void = ()) -> String {
        return NSLocalizedString("Vite.RefreshBackFooter.RefreshingText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lock Expiration Date: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageWithdrawPageWithdrawTime(_ value1: String) -> String {
        return String(format: NSLocalizedString("mining.staking.page.withdraw.page.withdraw.time", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Lock Expiration Snapshot Height: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageWithdrawPageHeight(_ value1: String) -> String {
        return String(format: NSLocalizedString("mining.staking.page.withdraw.page.height", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Lock VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowTipFloatViewPledge2(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.tip.float.view.pledge.2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lock period
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageQuotaSnapshootHeightTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.quota.snapshoot.height.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Locked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailPledgeAmountTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.pledge.amount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Locked Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageQuotaMoneyTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.quota.money.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Locked Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageMyPledgeTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.my.pledge.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Locked by Previous Transaction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinBalanceLocked(_: Void = ()) -> String {
        return NSLocalizedString("grin.balance.locked", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Locking Record
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func peldgeTitle(_: Void = ()) -> String {
        return NSLocalizedString("peldge.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Locking Record
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageCheckQuotaListBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.check.quotaList.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log Uploaded
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellUploadLogToastSuccess(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.upload.log.toast.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func loginPageBtnLogin(_: Void = ()) -> String {
        return NSLocalizedString("login.page.btn.login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login Error
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func toastErrorLogin(_: Void = ()) -> String {
        return NSLocalizedString("toast.error.login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login via password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func lockPagePwdBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.page.pwd.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellLogoutTitle(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.logout.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageLogoutLoading(_: Void = ()) -> String {
        return NSLocalizedString("system.page.logout.loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Low
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageInfoLowTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.info.low.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Low
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageValueLowTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.value.low.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Main
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexHomePageSegmentWallet(_: Void = ()) -> String {
        return NSLocalizedString("dex.home.page.segment.wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Main Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transferWalletAccount(_: Void = ()) -> String {
        return NSLocalizedString("transfer.wallet.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Make sure to logout ViteConnect?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostAlertQuitTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.alert.quit.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Make sure to stake %@ to obtain quota, you cannot withdraw until about 3 days after staking comes into effect.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaSubmitPopDesc(_ value1: String) -> String {
        return String(format: NSLocalizedString("quota.submit.pop.desc", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Market-Making
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningPageSegmentMaking(_: Void = ()) -> String {
        return NSLocalizedString("mining.page.segment.making", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Markets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Markets
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tabTitleMarket(_: Void = ()) -> String {
        return NSLocalizedString("tab.title.market", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Max Buy: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageBuyable(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.buyable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Max Sell: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageSellable(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.sellable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Max Supply
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem6Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item6.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Max amount of single cross-chain withdrawal: %@ %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawAmountLimitMax(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("crosschain.withdraw.amount.limit.max", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Max generation: 100 addresses; Manual address retrieval is required for all other but #1 address on the list
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageTipAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.tip.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Maximum Amount of Tx
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageMyMaxTxCountTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.my.max.tx.count.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Me
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tabbarItemTitleMy(_: Void = ()) -> String {
        return NSLocalizedString("tabbar.item.title.my", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Memo
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailNote(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.note", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Memo
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageRemarkTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.remark.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Memo
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageNoteTitle(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.note.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Min amount of single cross-chain withdrawal: %@ %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawAmountLimitMin(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("crosschain.withdraw.amount.limit.min", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Mine
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageAddMyAddressButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.add.my.address.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Minimum 1 VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockConfirmError(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.confirm.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Minimum 1 VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockConfirmError(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlock.confirm.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Minimum Deposit Amount 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositMin(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.min", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Minimum Withdrawal Amount 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawMin(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.min", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningTradingPageHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.trading.page.header.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tradingHomePageSegmentMining(_: Void = ()) -> String {
        return NSLocalizedString("trading.home.page.segment.mining", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningPageListTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.page.list.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mining Referrals
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageInviteCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.invite.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MintMsg
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeMintTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.mint.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mnemonic Words
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageMnemonicCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.mnemonic.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mnemonic Words Backup
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mnemonic Words Unbacked Up
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupTipAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.tip.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Modified successfully
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func changePasswordPageSuccessToast(_: Void = ()) -> String {
        return NSLocalizedString("change.password.page.success.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My %@ Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManagePageTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("address.manage.page.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: My %@ Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageMyAddressTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("send.page.my.address.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: My Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundWalletAddress(_: Void = ()) -> String {
        return NSLocalizedString("fund.walletAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My ETH Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawEthMyAddress(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.eth.myAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My ETH Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethReceivePageMyAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.receive.page.my.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My QRCode
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func receivePageMineTitle(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.mine.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Reward (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageMyTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.my.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Vite Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressListPageMyTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.list.page.my.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Votes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, vi-VN, ru-RU
      public static func votePageVoteInfoNodePollsTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteInfo.nodePolls.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NO
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem5NoValue(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item5.no.value", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NOTICE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func alterTitle(_: Void = ()) -> String {
        return NSLocalizedString("alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NOTICE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func walletHomeScanUrlAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.scan.url.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexAdjustFeesItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.adjust.fees.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexOpenTradingPairItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.open.trading.pair.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexRecoverTradingPairItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.recover.trading.pair.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexSuspendTradingPairItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.suspend.trading.pair.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexTransferPairItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.transfer.pair.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageNameTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.name.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketName(_: Void = ()) -> String {
        return NSLocalizedString("market.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Native
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoTypeValueNative(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.type.value.native", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Network Error
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func appSchemeNetworkError(_: Void = ()) -> String {
        return NSLocalizedString("app.scheme.network.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: News
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageHeaderTitleNews(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.headerTitle.news", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: News
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageVCWebTitleNews(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.VCWebTitle.news", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentNext(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.next", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageAmountToolbarButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.amount.toolbar.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailIssuanceFalse(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.issuance.false", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageAlterCancel(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.alter.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func no(_: Void = ()) -> String {
        return NSLocalizedString("No", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No %@ address yet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressListPageNoAddressTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("address.list.page.no.address.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: No %@ address yet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsHomePageSingleNoContactTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("contacts.home.page.single.no.contact.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: No QR code found
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func scanPageQccodeNotFound(_: Void = ()) -> String {
        return NSLocalizedString("Scan.page.qccode.not.found", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No VIP staked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCloseVipErrorToast(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.close.vip.error.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, vi-VN, ru-RU
      public static func votePageInfoNodataTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.info.nodata.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No more data
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteRefreshBackFooterNoMoreDataText(_: Void = ()) -> String {
        return NSLocalizedString("Vite.RefreshBackFooter.NoMoreDataText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageOrderEmpty(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.order.empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No result, please try another input
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func voteListSearchEmpty(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.search.empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Node Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteVoteNodeName(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.vote.node.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Node Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func nodeSettingsPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("node.settings.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Node Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellNodeSettings(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.node.settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not common stake, please try withdrawal where you placed the stake.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func peldgeCancelPledgeAgentErrorToast(_: Void = ()) -> String {
        return NSLocalizedString("peldge.cancel.pledge.agent.error.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Note that the selected trading pair %@ is being managed by an Unknown Operator. Trade at your own risk.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageAlertMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.alert.message", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostAlertTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.alert.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinNoticeTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.notice.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentSuggestUseViteTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.suggest.useVite.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningTradingPageHeaderTotalEarningsAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.trading.page.header.total.earnings.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupScanAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.scan.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func nodeSettingsPageSwitchNodeAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("node.settings.page.switch.node.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowCongestionWithPowAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("workflow.congestion.with.pow.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notice
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowCongestionWithoutPowAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("workflow.congestion.without.pow.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Now
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageNewsCellTimeMinute(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.news.cell.time.minute", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Official Forum
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageForumCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.forum.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Official Website
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainGatewaydetailWebset(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.gatewaydetail.webset", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Official website
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoOfficial(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.official", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ongoing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterStatusOpen(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.status.open", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Only %1$@ can be deposited to the address below. The minimum deposit is %2$@. Deposits less than %3$@ will be locked and unrecoverable.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositMinAmountDesc(_ value1: String, _ value2: String, _ value3: String) -> String {
        return String(format: NSLocalizedString("crosschain.deposit.minAmountDesc", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// en translation: Open
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageValueOpenTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.value.open.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open Orders
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageSegmentOpen(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.segment.open", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open Orders
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCurrentOrderTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.current.order.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open Trading Pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexOpenTradingPairFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.open.trading.pair.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open to Additional Issue
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailIssuance(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.issuance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Operation Successful
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostToastOperationSuccess(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.toast.operation.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Operation failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorOperationFailure(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.operation.failure", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Operator
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageSegmentOperatorIntoTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.segment.operator.into.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Operator
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketOperator(_: Void = ()) -> String {
        return NSLocalizedString("market.operator", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Operator address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoAddress(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order Cancelled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowToastCancelOrderSuccess(_: Void = ()) -> String {
        return NSLocalizedString("workflow.toast.cancel.order.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order Filter
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageSegmentHistory(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.segment.history", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order Placed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowToastPlaceOrderSuccess(_: Void = ()) -> String {
        return NSLocalizedString("workflow.toast.place.order.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order book
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageSegmentOrderBookTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.segment.order.book.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Orderly select seed phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicAffirmPageTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.page.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Orders
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Out of Fee
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethErrorRpcErrorCodeNotEnoughFee(_: Void = ()) -> String {
        return NSLocalizedString("eth.error.rpc.error.code.not.enough.fee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterTokenTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.token.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostHomePageFreeAutoSignConfirmTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.home.page.free.auto.sign.confirm.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Passwords do not match
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func changePasswordPageNewErrorToast(_: Void = ()) -> String {
        return NSLocalizedString("change.password.page.new.error.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Payment
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteCallContractTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.call.contract.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pending
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailPageStateCallWait(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.page.state.call.wait", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Permission Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationSignMessageType(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.sign.message.type", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pick up 10~1000
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func airdropEnabled(_: Void = ()) -> String {
        return NSLocalizedString("airdrop.enabled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Place Order
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeNewOrderTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.newOrder.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Place Order on ViteX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationVxOrder(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.vx.order", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please Input Password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exportPageAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.page.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please confirm that you'd like to get quota by staking 134 VITE from current address. You can withdraw the staked amount from the Stake History section 3 days later.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowFastGetQuotaMessage(_: Void = ()) -> String {
        return NSLocalizedString("workflow.fast.get.quota.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please confirm the following link %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostAlertApproveSessionMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("bifrost.alert.approve.session.message", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please confirm transaction information below
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func appSchemeHomePageBusyContent(_: Void = ()) -> String {
        return NSLocalizedString("app.scheme.home.page.busy.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please confirm transaction information below
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostHomePageBusyContent(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.home.page.busy.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please do use %@ together with the Deposit Address, or you will lose the token(s).
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositLabelDesc(_ value1: String) -> String {
        return String(format: NSLocalizedString("crosschain.deposit.labelDesc", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please enter a valid PoW URL
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func powSettingsPageAddAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("pow.settings.page.add.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter a valid node address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func nodeSettingsPageAddAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("node.settings.page.add.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter password to back up the Mnemonic Words.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupTipAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.tip.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter the amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPagePostToastVolEmpty(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.post.toast.vol.empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter the price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPagePostToastPriceEmpty(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.post.toast.price.empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter the same password!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageErrorTypeDifference(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.error.type.difference", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter transfer amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundDepositPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("fund.deposit.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter transfer amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundWithdrawPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("fund.withdraw.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please finalize the transaction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailPleaseFinalize(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.pleaseFinalize", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input a number
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageAddressGenerateButtonErrorToast(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.address.generate.button.error.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input account name or password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageErrorTypeName(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.error.type.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input amount, minimum 1 VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockConfirmPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.confirm.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input amount, minimum 1 VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockConfirmPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlock.confirm.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input amount, minimum 134 VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageConfirmAmountPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.confirm.amount.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input amount, minimum 134 VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageQuotaMoneyPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.quota.money.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageToastAmountEmpty(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.amount.empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input beneficiary address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaSubmitPageQuotaAddressPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("quota.submit.page.quota.address.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input new alias
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageChangeNameAlertPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.change.name.alert.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPagePwTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.pw.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPagePwTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.pw.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exportPageAlterTfPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("export.page.alter.tf.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input token name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transferSearchPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("transfer.search.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input token name or contract address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenListPageSearchTitle(_: Void = ()) -> String {
        return NSLocalizedString("token.list.page.search.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input your password again
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPagePwRepeateTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.pw.repeate.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input your seed phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func importPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("import.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please make sure to share the transaction file with sender
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinMakeSureToShare(_: Void = ()) -> String {
        return NSLocalizedString("grin.makeSureToShare", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please make sure to share the transaction file with sender
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxbyfileShareReceiveFileDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.txbyfile.shareReceiveFileDesc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please make sure to share the transaction file with the recipient and ask for a confirmation file.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxbyfileShareSentFileDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.txbyfile.shareSentFileDesc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please note that web wallet doesn't support native GRIN. If you receive the VITE transaction with GRIN file, you should contact the sender to cancel the transaction and resend GRIN.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinReceiveByViteDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.receiveByVite.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please scan the %@ code
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositScanLabel(_ value1: String) -> String {
        return String(format: NSLocalizedString("crosschain.deposit.scanLabel", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please scan the address QR code
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositScanAddress(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.scanAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please select the correct mainnet or you will be unable to retrieve any lost tokens.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositSelectDesc(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.selectDesc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please sign for the transaction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinShareFileDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.shareFile.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please sign for the transaction
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxbyfileReceiveSentFileDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.txbyfile.receiveSentFileDesc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please sign the transaction and share the file with the sender, you can choose whichever way you prefer.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailPleaseReciveAndShare(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.pleaseReciveAndShare", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please store your mnemonic words in a safe place.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageTipContent3(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.content3", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please wait for the recipient to open Vite wallet and receive the transaction.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailWaitHerOpenViteWalletToReceive(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.waitHerOpenViteWalletToReceive", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please wait for the transaction to be broadcast
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailPleaseFinalize2(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.pleaseFinalize2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PoW Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func powSettingsPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("pow.settings.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PoW Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellPowSettings(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.pow.settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Posting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxTypeFinalized(_: Void = ()) -> String {
        return NSLocalizedString("grin.txType.finalized", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTradePriceTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.trade.price.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageDepthPrice(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.depth.price", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPagePriceBuyPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.price.buy.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Price
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPagePriceSellPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.price.sell.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Price(%@)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageDepthPriceTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("market.detail.page.depth.price.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Price: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCellPrice(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.cell.price", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Processing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func loginPageLoadingTitle(_: Void = ()) -> String {
        return NSLocalizedString("login.page.loading.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Prompt
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func hint(_: Void = ()) -> String {
        return NSLocalizedString("Hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Proposal Request
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeProposalTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.proposal.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pull down to refresh
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListPageHeaderRefreshIdle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.header.refresh.idle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pull up to load more
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteRefreshBackFooterIdleText(_: Void = ()) -> String {
        return NSLocalizedString("vite.RefreshBackFooter.IdleText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Purchase History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exchangeHistory(_: Void = ()) -> String {
        return NSLocalizedString("exchange.history", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QRCode cannot be identified
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func scanPageQccodeNotIdentifiable(_: Void = ()) -> String {
        return NSLocalizedString("Scan.page.qccode.not.identifiable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quit(_: Void = ()) -> String {
        return NSLocalizedString("Quit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionQuotaTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.quota.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundQuotaSpend(_: Void = ()) -> String {
        return NSLocalizedString("fund.quotaSpend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageQuotaQuotaTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.quota.quota.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quota Available/Quota Limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailPledgeCountContent(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.pledge.count.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quota Available/Quota Limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageMyQuotaTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.my.quota.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quota Beneficiary
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageInputAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.input.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rate: 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exchangePrice(_: Void = ()) -> String {
        return NSLocalizedString("exchange.price", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ratio
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningInvitePageCellPer(_: Void = ()) -> String {
        return NSLocalizedString("mining.invite.page.cell.per", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Re-issuable
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem5Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item5.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Re-issue Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinReissueTokenFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.reissue.token.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailReveiceButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.reveice.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinReceiveBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.receive.BtnTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func receivePageTokenTitle(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.token.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinTransferCrossChainItem2Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.transfer.cross.chain.item2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive GRIN
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinReceiveTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.receive.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive GRIN though HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachHttpReceiveTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.http.receive.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive GRIN through Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachFileReceiveTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.file.receive.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive GRIN through VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachViteReceiveTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.vite.receive.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive and Share
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSignAndShare(_: Void = ()) -> String {
        return NSLocalizedString("grin.signAndShare", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Received
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxTypeReceived(_: Void = ()) -> String {
        return NSLocalizedString("grin.txType.received", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Received
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxbyfileReceivedStatusReceiver(_: Void = ()) -> String {
        return NSLocalizedString("grin.txbyfile.receivedStatus.receiver", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receiving Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailToAddress(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.to.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinTransferOwnershipItem2Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.transfer.ownership.item2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexTransferPairItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.transfer.pair.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexTransferTokenOwnerItem2Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.transfer.token.owner.item2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageToAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.to.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recover Trading Pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexRecoverTradingPairFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.recover.trading.pair.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recover and sync, 3 mins estimated
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinRecoverSyncronizing(_: Void = ()) -> String {
        return NSLocalizedString("grin.recover.syncronizing", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Referral
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningPageSegmentInvite(_: Void = ()) -> String {
        return NSLocalizedString("mining.page.segment.invite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Referrals
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningInvitePageDetailCountTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.invite.page.detail.count.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Referred Market-Making Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningInvitePageListMarketMakingTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.invite.page.list.market.making.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Referred Market-Making Proceeds
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningInvitePageDetailMarketMakingTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.invite.page.detail.market.making.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Referred Trading Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningInvitePageListTradingTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.invite.page.list.trading.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Referred Trading Proceeds
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningInvitePageDetailTradingTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.invite.page.detail.trading.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Refresh
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListPageNetworkError(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.network.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Regenerate
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageTipAnewBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.anewBtn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Register SBP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationRegisterSbp(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.register.sbp", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Registration
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameRegister(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.register", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Release to load more.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteRefreshBackFooterPullingText(_: Void = ()) -> String {
        return NSLocalizedString("Vite.RefreshBackFooter.PullingText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Release to refresh
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListPageHeaderRefreshPulling(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.header.refresh.pulling", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repost
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailRepoat(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.repoat", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repost
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxRepost(_: Void = ()) -> String {
        return NSLocalizedString("grin.tx.Repost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Request
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageTypeSend(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.type.send", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Request for Vite gateway to Resend
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailGatewayResend(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.gatewayResend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Response
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageTypeReceive(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.type.receive", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Restore Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func importPageSubmitBtn(_: Void = ()) -> String {
        return NSLocalizedString("import.page.submit.btn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retrieve
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexUnLockVxFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.un.lock.vx.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retrieve Rewards
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameExtractReward(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.extractReward", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retrieve Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexCancelStakeFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.cancel.stake.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retrieve Staking for Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationCancelCoin(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.cancel.coin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retrieve Staking for Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationCancelPledge(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.cancel.pledge", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retrieve staking request has sent
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowToastCancelPledgeSuccess(_: Void = ()) -> String {
        return NSLocalizedString("workflow.toast.cancel.pledge.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retrieving
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderLockViteMiningCancel(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.lock.vite.mining.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retrieving
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderLockVxCancel(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.lock.vx.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retry
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func retry(_: Void = ()) -> String {
        return NSLocalizedString("Retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retry
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowConfirmPagePasswordAuthFailedRetry(_: Void = ()) -> String {
        return NSLocalizedString("workflow.confirm.page.passwordAuthFailed.retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoke Registration
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameCancelRegister(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.cancelRegister", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationCancelVote(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.cancel.vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteCancelVoteTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.cancel.vote.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameCancelVote(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.cancelVote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func votePageVoteStatusCancelVoting(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteStatus.cancelVoting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reward
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reward
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tradingHomePageSegmentBonus(_: Void = ()) -> String {
        return NSLocalizedString("trading.home.page.segment.bonus", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reward Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.header.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reward Pool (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageTotalTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.total.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rewards Enquiry
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageRewardCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.reward.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Run PoW
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaAlertPowButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.pow.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SBP Candidates
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinVoteItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.vote.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageSaveButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.save.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func scanPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("Scan.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageScanAddressButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.scan.address.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan QR code to follow Vite WeChat Official Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageAboutUsWechatAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.aboutUs.wechat.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan and Send %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func receivePageTokenNameLabel(_ value1: String) -> String {
        return String(format: NSLocalizedString("Receive.page.token.name.label", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Scan the QR code below with your Vite app installed on another device.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageTip3(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip3", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketSearchhistory(_: Void = ()) -> String {
        return NSLocalizedString("market.searchhistory", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search for name or address of candidate nodes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func voteListSearch(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.search", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Security
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageSecurityCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.security.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Seed Phrase
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageTipLabTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.lab.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select Accounts
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func loginPageBtnChooseName(_: Void = ()) -> String {
        return NSLocalizedString("login.page.btn.chooseName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainChainSelectTitle(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.chain.select.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select Trading pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenMarketSelectorTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.market.selector.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select token type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageTypeSelectTitle(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.type.select.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select your account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func selectWalletAccount(_: Void = ()) -> String {
        return NSLocalizedString("select.wallet.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageSellButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.sell.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterSideSell(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.side.sell", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageButtonSellTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.button.sell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCellTypeSell(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.cell.type.sell", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sell %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexSellTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("confirm.transaction.page.vite.dex.sell.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailSendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.send.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationTransfer(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.transfer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageEthTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.eth.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageGrinTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.grin.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageButtonSend(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.button.send", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.btnTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageSendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.send.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send GRIN
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinFinalizeTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.finalize.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send GRIN
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send GRIN though HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachHttpSentTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.http.sent.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send GRIN through Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachFileSendTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.file.send.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send GRIN through VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachViteSentTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.vite.sent.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send GRIN through VITE address is sharing transaction file encrypted by Vite through VITE address, which ensures only the real recipient can decrypt the file.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentUseViteDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.useVite.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send Success
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowToastTransferSuccess(_: Void = ()) -> String {
        return NSLocalizedString("workflow.toast.transfer.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sending Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailFromAddress(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.from.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Service Mailbox
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainGatewaydetailEmail(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.gatewaydetail.email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Service Terms
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func gatewayInfoDetailPageAgreement(_: Void = ()) -> String {
        return NSLocalizedString("gateway.info.detail.page.agreement", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageSystemCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.system.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinShareFile(_: Void = ()) -> String {
        return NSLocalizedString("grin.shareFile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share Vite APP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageCellShareUs(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.shareUs", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Short in quota, you can acquire quota by running PoW or staking VITE.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaAlertPowAndQuotaMessage(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.pow.and.quota.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Signature Content
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationSignMessageContent(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.sign.message.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Signed Transactions Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostTaskDetailPageBusyHeader(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.task.detail.page.busy.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Signing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostListPageStatusProcessing(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.list.page.status.processing", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Signing Transaction List
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostListPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.list.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Single Transaction Limit: %@ - %@ VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exchangeLimitOnetime(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("exchange.limit.onetime", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Slate ID Copied.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailSlateCopied(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.slateCopied", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Slow
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethPageGasFeeSlowTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.page.gasFee.slow.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Snapshot block height is illegal, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorRpcErrorCodeRefrenceSnapshootBlockIllegal(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.refrence.snapshoot.block.illegal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Social Media
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoSocial(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.social", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Social Media
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageSocial(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.social", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong with network, click here to check account details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionNetErrorAndShowAccount(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.netErrorAndShowAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong with network, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorNetworkError(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.network.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something wrong with your seed phrase, please try again!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func importPageSubmitInvalidMnemonic(_: Void = ()) -> String {
        return NSLocalizedString("import.page.submit.invalid.mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Spendable
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinBalanceSpendable(_: Void = ()) -> String {
        return NSLocalizedString("grin.balance.spendable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Spendable Quota/Quota Limit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundQuotaInfo(_: Void = ()) -> String {
        return NSLocalizedString("fund.quotaInfo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Spot
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tradingHomePageSegmentSpot(_: Void = ()) -> String {
        return NSLocalizedString("trading.home.page.segment.spot", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexLockVxFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.lock.vx.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockConfirmButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.confirm.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockLockButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.lock.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageCellAmount(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.cell.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stake VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaAlertQuotaButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.quota.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stake VITE for Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageConfirmTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.confirm.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stake VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockConfirmTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.confirm.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderLockViteMining(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.lock.vite.mining", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderLockVx(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.lock.vx", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staked Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageDetailAmountTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.detail.amount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staked for Full Node
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderLockViteFullNode(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.lock.vite.full.node", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staked for Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderLockVitePledge(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.lock.vite.pledge", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staked for SBP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderLockViteSbp(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.lock.vite.sbp", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningPageSegmentStaking(_: Void = ()) -> String {
        return NSLocalizedString("mining.page.segment.staking", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockAmount(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking Amount for Becoming a VIP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexVipAmount(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.vip.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking List
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageDetailListButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.detail.list.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking amount should not be less than 134
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageToastMoneyError(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.toast.money.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking as Mining
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexStakingAsMiningFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.staking.as.mining.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking can be canceled after 3 days. Staked amount will be released after the 7-day waiting period
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageConfirmTip(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.confirm.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Start to Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachViteSendStartSend(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.vite.send.startSend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Status
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterStatusTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.status.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func changePasswordPageButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("change.password.page.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func submit(_: Void = ()) -> String {
        return NSLocalizedString("Submit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit Successful
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowToastSubmitSuccess(_: Void = ()) -> String {
        return NSLocalizedString("workflow.toast.submit.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit to lock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaManagePageSubmitBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.submit.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Success
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostListPageStatusFinished(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.list.page.status.finished", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Success
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowToastContractSuccess(_: Void = ()) -> String {
        return NSLocalizedString("workflow.toast.contract.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Successful Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func votePageVoteStatusVoteSuccess(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteStatus.voteSuccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Successfully added
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageSaveSuccessTip(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.save.success.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Successfully copied
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func copyed(_: Void = ()) -> String {
        return NSLocalizedString("copyed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Successfully copied!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func walletHomeToastCopyAddress(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.toast.copy.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Successfully saved
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func contactsEditPageEditSuccessTip(_: Void = ()) -> String {
        return NSLocalizedString("contacts.edit.page.edit.success.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Successfully send vote request
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowToastVoteSuccess(_: Void = ()) -> String {
        return NSLocalizedString("workflow.toast.vote.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Suspend Trading Pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexSuspendTradingPairFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.suspend.trading.pair.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Switch
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageAddressChangeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.vite.exchange.page.address.change.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Switch Account
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func lockPageChangeUserBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.page.changeUser.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Switch Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSwitchAddress(_: Void = ()) -> String {
        return NSLocalizedString("grin.switchAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Switch to %@ mnemonic words
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageSwitchModeTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("mnemonic.backup.page.switch.mode.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailShortname(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.shortname", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: System verify failed, please try again later (%@)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorRpcErrorCodeVerifyFailure(_ value1: String) -> String {
        return String(format: NSLocalizedString("vite.error.rpc.error.code.verify.failure", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Terms and Conditions
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageClauseButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.clause.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms of Service
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainGatewaydetailStatement(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.gatewaydetail.statement", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms of Service
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementDetail(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.statement.detail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The address you scanned now is not consistent with the one on web platform. Continue login with App address? (%@)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostAlertApproveSessionAnotherAddressMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("bifrost.alert.approve.session.another.address.message", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: The amount has to be positive
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageToastAmountZero(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.amount.zero", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The amount you entered exceeds available balance, please enter again
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundTooBig(_: Void = ()) -> String {
        return NSLocalizedString("fund.tooBig", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The amount you entered is invalid. A single transaction should be at least %@ VITE and at most %@ VITE, and the daily transaction limit is %@ VITE.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exchangeLimitAlert(_ value1: String, _ value2: String, _ value3: String) -> String {
        return String(format: NSLocalizedString("exchange.limit.alert", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// en translation: The current network is Mainnet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func powSettingsPageAddAlertTip(_: Void = ()) -> String {
        return NSLocalizedString("pow.settings.page.add.alert.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The current node is %1$@, and will be switched to %2$@. After switching, the App will be automatically closed, and you need to reopen the App.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func nodeSettingsPageSwitchNodeAlertMessage(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("node.settings.page.switch.node.alert.message", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: The current node is %@, network is Mainnet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func nodeSettingsPageAddAlertTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("node.settings.page.add.alert.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: The deposit amount cannot be less than 
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainDepositMinAlert(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.deposit.min.alert", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The destination address you transfer to is a contract, the note must be written with legal hexadecimal characters
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageToastContractAddressSupportHex(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.contract.address.support.hex", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The following backups are recommend for the security of your assets:
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageTip1(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The length of notes has reached limitations
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageToastNoteTooLong(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.note.too.long", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The minimum withdraw amount is 134 VITE, please stake enough VITE first.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func peldgeCancelPledgeAmountErrorToast(_: Void = ()) -> String {
        return NSLocalizedString("peldge.cancel.pledge.amount.error.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The network is currently in Dynamic Quota mode. This means your Quota Limit has been reduced and you can send fewer transactions per second. Do you still want to send a transaction now?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowCongestionWithoutPowAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("workflow.congestion.without.pow.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The network is currently in Dynamic Quota mode. Your Quota Limit has been reduced and your Spendable Quota is not enough to send this transaction. Please transact later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowCongestionWithPowAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("workflow.congestion.with.pow.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The node already exists
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func nodeSettingsPageNodeExistError(_: Void = ()) -> String {
        return NSLocalizedString("node.settings.page.node.exist.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The old password is wrong
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func changePasswordPageOldErrorToast(_: Void = ()) -> String {
        return NSLocalizedString("change.password.page.old.error.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The receipt has been confirmed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxFileReceivedStatus(_: Void = ()) -> String {
        return NSLocalizedString("grin.txFile.received.status", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The seed phrase you entered matches an existing account named '%@' on this device. Are you sure you want to overwrite that account?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func importPageAlertExistTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("import.page.alert.exist.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: The staking is less than 30 days and cannot be retrieved
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageCloseVipUnExpireErrorToast(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.close.vip.un.expire.error.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This Service is provided by %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementViteDesc0(_ value1: String) -> String {
        return String(format: NSLocalizedString("crosschain.statement.vite.desc0", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: This Service is provided by %@.  By using services from %@, you agree to be bound by %@%@. If you do not agree to these terms, please refrain from using service from %@.  In case of problems with verification or payment processing, please contact %@ support team at %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementViteDesc(_ value1: String, _ value2: String, _ value3: String, _ value4: String, _ value5: String, _ value6: String, _ value7: String) -> String {
        return String(format: NSLocalizedString("crosschain.statement.vite.desc", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3, value4, value5, value6, value7)
      }
      
      /// en translation: This Service is provided by %@. Vite Platform assumes no responsibility for the activities performed by %@ and does not play a role in the relationship between %@ and users of Vite Platform.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementOtherDesc0(_ value1: String, _ value2: String, _ value3: String) -> String {
        return String(format: NSLocalizedString("crosschain.statement.other.desc0", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// en translation: This Service is provided by %@. Vite Platform assumes no responsibility for the activities performed by %@ and does not play a role in the relationship between %@ and users of Vite Platform.  By using services from %@, you agree to be bound by %@ %@. If you do not agree to these terms, please refrain from using service from %@.  In case of problems with verification or payment processing, please contact %@ support team at %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatementOtherDesc(_ value1: String, _ value2: String, _ value3: String, _ value4: String, _ value5: String, _ value6: String, _ value7: String, _ value8: String, _ value9: String, _ value10: String) -> String {
        return String(format: NSLocalizedString("crosschain.statement.other.desc", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10)
      }
      
      /// en translation: This Transaction costs %@Quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaFloatViewTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("quota.float.view.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: This action will regenerate seed phrase, ready to go back?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicAffirmAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This is an estimated gas fee according to the current network traffic. The actual cost may differ.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethPageGasFeeNoticeTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.page.gasFee.notice.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This is your first VITE address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinThisIsFirstViteAddress(_: Void = ()) -> String {
        return NSLocalizedString("grin.thisIsFirstViteAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This page is provided by %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func webPageHostTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("web.page.host.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Time
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTradeTimeTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.trade.time.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Time
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageValueTimeTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.value.time.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Time available to unlock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func peldgeDeadline(_: Void = ()) -> String {
        return NSLocalizedString("peldge.deadline", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transferTo(_: Void = ()) -> String {
        return NSLocalizedString("transfer.to", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To transfer using Vite wallet, all you need to do is to open the file, click the "Receive and share" button, and return the confirm-to-receive file with the sender. After clicking "Receive and share",Vite wallet will show App usable in your mobile phone, you can choose whichever way you like, you can also save the file into your mobilephone and share by yourself. Vite wallet supports .grinslate file and .json file, and only when the file name containing "response" will it be recognized and opened successfully.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachFileReceiveDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.file.receive.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To transfer using Vite wallet, all you need to do is to share the transaction file with the recipient, open the file returned by the recipient by Vite wallet and finalize the transaction. After clicking "Share the transaction file", Vite wallet will show App usable in your mobile phone, you can choose whichever way you like, you can also save the file into your mobilephone and share by yourself.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTeachFileSendDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.teach.file.send.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageSegmentTokenInfoTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.segment.token.info.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transferToken(_: Void = ()) -> String {
        return NSLocalizedString("transfer.token", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokendetail(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokendetail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Details
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailId(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageId(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Info Error
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageTokenInfoError(_: Void = ()) -> String {
        return NSLocalizedString("send.page.token.info.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationCoin(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.coin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameCoin(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.coin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinChangeToNonissuableItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.change.to.nonissuable.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinReissueTokenItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.reissue.token.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinTransferOwnershipItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.transfer.ownership.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexTransferTokenOwnerItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.transfer.token.owner.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailName(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Name
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageName(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinChangeToNonissuableItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.change.to.nonissuable.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem2Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinReissueTokenItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.reissue.token.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinTransferOwnershipItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.transfer.ownership.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Symbol
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexTransferTokenOwnerItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.transfer.token.owner.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageType(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.type", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TokenID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoTokenId(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.token.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tokens in Circulation
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoTotal(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.total", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderTotal(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.total", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinBalanceTotal(_: Void = ()) -> String {
        return NSLocalizedString("grin.balance.total", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Income (VX)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningInvitePageHeaderTotalEarnings(_: Void = ()) -> String {
        return NSLocalizedString("mining.invite.page.header.total.earnings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Income (VX)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningOrderPageHeaderTotalEarnings(_: Void = ()) -> String {
        return NSLocalizedString("mining.order.page.header.total.earnings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Income (VX)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageHeaderTotalEarnings(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.header.total.earnings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailAmount(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Issuance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageTotal(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.total", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Reward (VX)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningTradingPageHeaderTotalEarnings(_: Void = ()) -> String {
        return NSLocalizedString("mining.trading.page.header.total.earnings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Supply
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem3Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item3.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Value (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexHomePageNavBtcValuationTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.home.page.nav.btc.valuation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total Value (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func walletHomeBtcTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.btc.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total value must be at least %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPagePostToastAmountMin(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.post.toast.amount.min", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Total: %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageTotal(_ value1: String) -> String {
        return String(format: NSLocalizedString("spot.page.total", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Total: ≈
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockCellTotal(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.cell.total", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Touch ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellLoginTouchId(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.login.touchId", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trade
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationSignMessageTypeTradeValue(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.sign.message.type.trade.value", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trade
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageButtonTrading(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.button.trading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trade
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tabTitleTrading(_: Void = ()) -> String {
        return NSLocalizedString("tab.title.trading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trading
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexHomePageSegmentDex(_: Void = ()) -> String {
        return NSLocalizedString("dex.home.page.segment.dex", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trading
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningPageSegmentTrading(_: Void = ()) -> String {
        return NSLocalizedString("mining.page.segment.trading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trading Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningInvitePageCellFeeAmount(_: Void = ()) -> String {
        return NSLocalizedString("mining.invite.page.cell.fee.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trading Fees
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningTradingPageHeaderFee(_: Void = ()) -> String {
        return NSLocalizedString("mining.trading.page.header.fee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trading Suspended
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPageButtonClosedTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.button.closed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trading Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transferDexAccount(_: Void = ()) -> String {
        return NSLocalizedString("transfer.dex.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trading pair
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoPair(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.pair", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transact Faster via Staking
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowFinishedFloatViewPledgeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.finished.float.view.pledge.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transact Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowCongestionWithPowAlertCancel(_: Void = ()) -> String {
        return NSLocalizedString("workflow.congestion.with.pow.alert.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transact Later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowCongestionWithoutPowAlertCancel(_: Void = ()) -> String {
        return NSLocalizedString("workflow.congestion.without.pow.alert.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transact Now
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowCongestionWithoutPowAlertOk(_: Void = ()) -> String {
        return NSLocalizedString("workflow.congestion.without.pow.alert.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinTransferUtf8stringItem0Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.transfer.utf8string.item0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Completed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailSuccess(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Completed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageStateSuccess(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.state.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Confirmation
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func appSchemeHomePageBusyHeader(_: Void = ()) -> String {
        return NSLocalizedString("app.scheme.home.page.busy.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailFailed(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxFile(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txFile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxMethodFile(_: Void = ()) -> String {
        return NSLocalizedString("grin.txMethod.file", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Finalized
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinFinalizedAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.finalized.alertTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Hash
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailHash(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.hash", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Hash
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageHashTitle(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.hash.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxFileId(_: Void = ()) -> String {
        return NSLocalizedString("grin.txFile.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxidTitle(_: Void = ()) -> String {
        return NSLocalizedString("grin.txid.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Sent
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowFinishedFloatViewTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.finished.float.view.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction State
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxStatus(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txStatus", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageTypeTitle(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.type.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction file has been created, please make sure to share the file with the recipient(share as you like)and ask for a received file returned.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxFileCreatedAndCanShare(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txFileCreatedAndCanShare", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction has been canceled.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxCancelled(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txCancelled", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction has been confirmed, after 10 confirmation, "Actual Amount" will go to "Spendable Amount".
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailConfirmLessThanThen(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.confirmLessThanThen", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction has been finalized and broadcast.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxFinaziledAndPosting(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txFinaziledAndPosting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction has been received by the recipient. Please finalize and broadcast the transaction.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinFinalizeDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.finalize.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction has been received by the recipient. Please finalize and broadcast the transaction.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxbyfileFinalizeReceiveFileDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.txbyfile.finalizeReceiveFileDesc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction has been received, please share the file with the sender, you can choose the way as you like.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxFileReecivedAndCanShare(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txFileReecivedAndCanShare", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction has been received.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxReceived(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txReceived", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction has completed.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxCompleted(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txCompleted", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction has started to be broadcast, you can click "Repost" to try again if the transaction hasn't been confirmed for long
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxpostingAndCanRepost(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txpostingAndCanRepost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction is in broadcast, please wait for confirmation.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxisPostingPlsWait(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txisPostingPlsWait", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions Signed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostHomePageFreeHistoryTitle(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.home.page.free.history.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions are sent too frequent, please try again later
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorRpcErrorCodeRefrenceSameSnapshootBlock(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.refrence.same.snapshoot.block", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions cost quota. Stake to Get Free Quota.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func introductionTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("introduction.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinTransferUtf8stringFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.transfer.utf8string.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexHomePageHeaderButtonTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.home.page.header.button.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageButtonTransfer(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.button.transfer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundDeposit(_: Void = ()) -> String {
        return NSLocalizedString("fund.deposit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundWithdraw(_: Void = ()) -> String {
        return NSLocalizedString("fund.withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameTransfer(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.transfer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transferTitle(_: Void = ()) -> String {
        return NSLocalizedString("transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundDepositAmount(_: Void = ()) -> String {
        return NSLocalizedString("fund.deposit.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundWithdrawAmount(_: Void = ()) -> String {
        return NSLocalizedString("fund.withdraw.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageListDexHeaterTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.list.dex.heater.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer Ownership
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinTransferOwnershipFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.transfer.ownership.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer Token's Ownership
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexTransferTokenOwnerFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.transfer.token.owner.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer Trading pair's Ownership
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinDexTransferPairFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.dex.transfer.pair.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer successful. Check exchange balance?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundDepositSuccess(_: Void = ()) -> String {
        return NSLocalizedString("fund.DepositSuccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer-In
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageCellIn(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.cell.in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer-Out
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageCellOut(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.cell.out", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tutorial
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func myPageTutorialCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.tutorial.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoType(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.type", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Type
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotHistoryPageFilterSideTitle(_: Void = ()) -> String {
        return NSLocalizedString("spot.history.page.filter.side.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to revoke vote, you have to run PoW or stake VITE for TPS quota to revoke vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func votePageVoteInfoAlertQuota(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteInfo.alert.quota", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to transfer due to insufficient exchange balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundCannotWithDraw(_: Void = ()) -> String {
        return NSLocalizedString("fund.cannotWithDraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to transfer due to insufficient wallet balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundCannotDeposit(_: Void = ()) -> String {
        return NSLocalizedString("fund.cannotDeposit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to vote, you have to run PoW or stake VITE for TPS quota to vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func voteListAlertQuota(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.alert.quota", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unfinalized
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxTypeWaitToFinalize(_: Void = ()) -> String {
        return NSLocalizedString("grin.txType.waitToFinalize", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unfreeze Token
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeUnfreezeTokenTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.unfreezeToken.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknown Error.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func airdropErrorTipUnknownError(_: Void = ()) -> String {
        return NSLocalizedString("airdrop.error.tip.unknown.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func peldgeCancelPeldgeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("peldge.cancel.peldge.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlocking Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageDetailUnlockingTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.detail.unlocking.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unreceived
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailUnconfirmedTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.unconfirmed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unreceived
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxTypeWaitToSign(_: Void = ()) -> String {
        return NSLocalizedString("grin.txType.waitToSign", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unreceived %@
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func walletHomeUnconfirmedTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("wallet.home.unconfirmed.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Unstake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockUnlockButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.unlock.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unstake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockConfirmButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlock.confirm.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unstake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageWithdrawPageAlertOk(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.withdraw.page.alert.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unstake
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageWithdrawPageButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.withdraw.page.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unstake VITE
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageWithdrawPageAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.withdraw.page.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unstake VX
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockConfirmTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlock.confirm.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unstaking Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockingAmount(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlocking.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unstaking Status
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageLockDetailButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.lock.detail.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unstaking Status
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockListTitle(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlock.list.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Untitled
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func addressManageDefaultAddressName(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.default.address.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Update App
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func updateApp(_: Void = ()) -> String {
        return NSLocalizedString("Update.app", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Update Registration
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameRegisterUpdate(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.registerUpdate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Update SBP
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationRegisterUpdateSbp(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.register.update.sbp", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Upload Log
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellUploadLogTitle(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.upload.log.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use HTTP Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentUseHttp(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.useHttp", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use Transaction File
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentUseFile(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.useFile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxUseVite(_: Void = ()) -> String {
        return NSLocalizedString("grin.tx.useVite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use password
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageUsePassword(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.use.password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username only supports less than 32 characters
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageErrorTypeValidWalletNameCount(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.error.type.validWalletNameCount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VIP Locked
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageHeaderLockViteVip(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.header.lock.vite.vip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VIP enjoy the privileges of 0.1% trading fee discount. Stake 10,000 VITE to become a VIP(Minimum Staking Duration: 30 days)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexVipTip(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.vip.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageToAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.vite.exchange.page.to.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentSwitch(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.switch", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinTxMethodVite(_: Void = ()) -> String {
        return NSLocalizedString("grin.txMethod.vite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VITE Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinViteAddress(_: Void = ()) -> String {
        return NSLocalizedString("grin.vite.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VITE Contact Address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageViteContactsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.vite.contacts.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VITE Conversion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailExchangeVite(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.exchange.vite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VITE Conversion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageEthViteExchangeTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.eth.vite.exchange.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VITE Conversion
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethViteExchangePageTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.vite.exchange.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: VITE Transaction Send
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailGatewaysend(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.gatewaysend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Value (BTC)
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexHomePageHeaderBtcValuationTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.home.page.header.btc.valuation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Value must be greater than 0
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPagePostToastPriceZero(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.post.toast.price.zero", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Value must be greater than 0
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func spotPagePostToastVolZero(_: Void = ()) -> String {
        return NSLocalizedString("spot.page.post.toast.vol.zero", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verification Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func airdropValidationFailed(_: Void = ()) -> String {
        return NSLocalizedString("airdrop.validationFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verify
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageBiometryConfirmReason(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.biometry.confirm.reason", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verify fingerprint to activate Touch ID
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func lockPageFingerprintAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.page.fingerprint.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Version
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageCellVersion(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.version", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View More Details on Etherscan
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func ethTransactionDetailGoButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("eth.transaction.detail.go.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View More Details on Vite Explorer
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageLinkButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.link.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageNewsCellOfficial(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.news.cell.official", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite Gateway Collection
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailGateway(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.gateway", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite Network
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenListPageSectionViteHeader(_: Void = ()) -> String {
        return NSLocalizedString("token.list.page.section.vite.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func receivePageWalletName(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.wallet.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite gateway confirmation has reached 10, if the state not changing to "Unreceived" for a long time, please try "Request for Vite gateway to resend".
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailGatewayConfirmConntBiggerThanTen(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.gateway.confirmConntBiggerThanTen", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite gateway has received the transaction, and will transfer to you after 10 confirmations.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailGatewayConfirmConntLessThanTen(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.gateway.confirmConntLessThanTen", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite gateway has received the transaction, and will transfer to you after 10 confirmations.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailGatewayReceived(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.gatewayReceived", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite.net
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageCellPortalWebsite(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.portal.website", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite.org
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageCellOfficialWebsite(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.official.website", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite.wiki
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func aboutUsPageCellBlogWebsite(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.blog.website", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ViteConnect Connected
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostConnectTipInWalletHome(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.connect.tip.in.wallet.home", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ViteConnect Connected
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostHomePageFreeHeader(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.home.page.free.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ViteConnect is connected, switch address will break network connection. Make sure to switch address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostAlertSwitchAddressMessage(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.alert.switch.address.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ViteX Deposit
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationVxDeposit(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.vx.deposit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ViteX Withdrawal
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationVxWithdraw(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.vx.withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Volume
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageValueVolTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.value.vol.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func balanceInfoDetailVote(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bnbTxTypeVoteTitle(_: Void = ()) -> String {
        return NSLocalizedString("bnb.txType.vote.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinVoteFunctionTitle(_: Void = ()) -> String {
        return NSLocalizedString("buildin.vote.function.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteVoteTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.vote.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func vote(_: Void = ()) -> String {
        return NSLocalizedString("vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func votePageTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote revoking request is successfully sent
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowToastCancelVoteSuccess(_: Void = ()) -> String {
        return NSLocalizedString("workflow.toast.cancel.vote.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Votes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinVoteItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("buildin.vote.item1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Votes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func voteListCount(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostOperationVote(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.operation.vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameVote(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Voting
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func votePageVoteStatusVoting(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteStatus.voting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Waiting for Smart Contract Response
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteTransactionDetailPageStateCallWait(_: Void = ()) -> String {
        return NSLocalizedString("vite.transaction.detail.page.state.call.wait", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tabTitleWallet(_: Void = ()) -> String {
        return NSLocalizedString("tab.title.wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tabbarItemTitleWallet(_: Void = ()) -> String {
        return NSLocalizedString("tabbar.item.title.wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet Asset
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundTitleWallet(_: Void = ()) -> String {
        return NSLocalizedString("fund.title.wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundWalletFound(_: Void = ()) -> String {
        return NSLocalizedString("fund.walletFound", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet Balance
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageWalletBalanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.wallet.balance.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet Management
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func manageWalletPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet check will scan the chain and cancel all pending transactions, unlock any locked outputs, restore any missing outputs, and ensure your wallet's content is consistent with the chain's version.Will consume a large amount of cellular data, it is recommended to continue the process on Wi-Fi
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinWalletCheckDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.wallet.check.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet name can not be empty
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func manageWalletPageErrorTypeName(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.error.type.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We noticed that you don’t have any VITE locked for Quota. You can get free Quota for %@ more times today or lock VITE now.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowTipFloatViewMessage2(_ value1: String) -> String {
        return String(format: NSLocalizedString("quota.pow.tip.float.view.message.2", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: We strongly advise against taking a screenshot of the seed phrase.  We suggest that you write down the seed phrase on a piece of paper and keep it in a safe place.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Website
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPageWebside(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.webside", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: WhitePaper
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageTokenInfoPaper(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.token.info.paper", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: WhitePaper
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func tokenInfoDetailPagePaper(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.paper", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Winners
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func airdropVpower(_: Void = ()) -> String {
        return NSLocalizedString("airdrop.vpower", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteCancelPledgeTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.cancel.pledge.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.btnTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexHomePageHeaderButtonWithdrawTitle(_: Void = ()) -> String {
        return NSLocalizedString("dex.home.page.header.button.withdraw.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dexTokenDetailPageButtonWithdraw(_: Void = ()) -> String {
        return NSLocalizedString("dex.token.detail.page.button.withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw All
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawAll(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.all", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw to Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func confirmTransactionPageViteDexWithdrawTransferTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vite.dex.withdraw.transfer.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw to Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func fundTitleToWallet(_: Void = ()) -> String {
        return NSLocalizedString("fund.title.toWallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal Amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawAmount(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal Failed
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatusWithdrawFailed(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.status.withdraw.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal History
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawHistory(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.history", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal List
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func miningStakingPageWithdrawPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("mining.staking.page.withdraw.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal fee is charged by gateway
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainWithdrawFeeDesc(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.withdraw.fee.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal is only applicable for staked amount larger than 10 VX.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func dividendsPageUnlockConfirmTip2(_: Void = ()) -> String {
        return NSLocalizedString("dividends.page.unlock.confirm.tip2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal of staking quota
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameCancelPledge(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.cancelPledge", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal of staking tokens
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func transactionListTransactionTypeNameCancelCoin(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.cancelCoin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawing
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func peldgeCancelPledgeWithdrawingTitle(_: Void = ()) -> String {
        return NSLocalizedString("peldge.cancel.pledge.withdrawing.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Would you like to create a new seed phrase?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageAlterMessage(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.alter.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Write down your seed phrase on a piece of paper and keep it in a safe place.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageTip2(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong Invitation Code
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func createPageToastErrorInviteCode(_: Void = ()) -> String {
        return NSLocalizedString("create.page.toast.error.invite.code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong Password!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func exportPageAlterPasswordError(_: Void = ()) -> String {
        return NSLocalizedString("export.page.alter.password.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong address, please check the format
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func sendPageToastAddressError(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.address.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong format with transaction amount
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteUriAmountFormatError(_: Void = ()) -> String {
        return NSLocalizedString("vite.uri.amount.format.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong password!
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowConfirmPageToastPasswordError(_: Void = ()) -> String {
        return NSLocalizedString("workflow.confirm.page.toast.password.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong password! Please try to import seed phrase instead
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func loginPageErrorToastTitle(_: Void = ()) -> String {
        return NSLocalizedString("login.page.error.toast.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong transfer address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainStatusWrongAddress(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.status.wrong.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: YES
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func buildinCoinIssuanceItem5YesValue(_: Void = ()) -> String {
        return NSLocalizedString("buildin.coin.issuance.item5.yes.value", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func crosschainTokenDetailIssuanceTrue(_: Void = ()) -> String {
        return NSLocalizedString("crosschain.tokenDetail.issuance.true", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageAlterConfirm(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.alter.confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func yes(_: Void = ()) -> String {
        return NSLocalizedString("Yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You are going to visit a third party page which leaves Vite App. Your use on this page will abide by third party Term of User Agreement and Privacy Policy, Vite Labs has any supervision or control over the quality, content, reliability or security of the third party dApp, nor shall Vite Labs be liable for its use.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func walletHomeScanUrlAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.scan.url.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You are making changes on ViteX & Web Wallet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostHomePageBusyHeader(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.home.page.busy.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You can also get quota for any other address by %@.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowFastGetQuotaTip(_ value1: String) -> String {
        return String(format: NSLocalizedString("workflow.fast.get.quota.tip", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: You can only recover your account by mnemonic word after deleting an account, do you confirm to delete this account?
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func systemPageCellDeleteWalletAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.delete.wallet.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You can transfer GRIN to any wallet supporting receiving GRIN through HTTP address, however we suggest using VITE address or file to transfer GRIN to users who use Vite wallet.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentUseHttpDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.useHttp.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You cannot make any transfer until you receive a transaction.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func viteErrorRpcErrorCodeNoTransactionBefore(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.no.transaction.before", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You cannot vote for now as there is no transaction record in your address
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func voteListSearchNoTransactionBefore(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.search.no.transaction.before", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have already received the transaction, if the state doesn't go to "Confirmed", please try "Request for Vite gateway to resend".
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinDetailTxReceivedAndCanAskGatewaytoSend(_: Void = ()) -> String {
        return NSLocalizedString("grin.detail.txReceivedAndCanAskGatewaytoSend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have no transaction yet
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func bifrostHomePageFreeContent(_: Void = ()) -> String {
        return NSLocalizedString("bifrost.home.page.free.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have successfully sent GRIN transfer request
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentHttpSuccess(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.http.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have used up all your free Quota for today. Please lock VITE.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowTipFloatViewMessage1(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.tip.float.view.message.1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have visited a page which leaves Vite App, and you will be redirected to a third party dApp. Your use on this dApp will abide by the dApp's Term of User Agreement and Privacy Policy. Vite Labs has no supervision or control over the quality, content, reliability or security of the third party dApp, nor shall Vite Labs be liable for its use.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func discoverPageGameAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("discover.page.game.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have voted for %@, please make sure this action will overwrite current voting result
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func voteListAlertAlreadyVoted(_ value1: String) -> String {
        return String(format: NSLocalizedString("vote.list.alert.already.voted", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: You may withdraw your staked VITE after 3 days. If the quota you received from staking is sufficient for a transaction, you can skip this step of PoW.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowFinishedFloatViewH2(_: Void = ()) -> String {
        return NSLocalizedString("quota.pow.finished.float.view.h2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You spent %1$@S in this PoW computation, and secured and used %2$@Quota.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func quotaPowFinishedFloatViewH1(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("quota.pow.finished.float.view.h1", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Your GRIN transaction has started to be broadcast
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinFinalizedAlertDesc(_: Void = ()) -> String {
        return NSLocalizedString("grin.finalized.alertDesc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your HTTP address for receiving GRIN has been copied to the clipboard
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinReceiveByHttpAddressCopyed(_: Void = ()) -> String {
        return NSLocalizedString("grin.receiveByHttp.addressCopyed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your VITE address for receiving GRIN has been copied to the clipboard.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinReceiveByViteAddressCopyed(_: Void = ()) -> String {
        return NSLocalizedString("grin.receiveByVite.addressCopyed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your device not support airdrop.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func airdropErrorTipNotSupport(_: Void = ()) -> String {
        return NSLocalizedString("airdrop.error.tip.not.support", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your password should contain at lease 8 characters
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupPageErrorTypePwdIllegal(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.error.type.pwd.illegal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your transaction has sent.
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func grinSentViteSuccess(_: Void = ()) -> String {
        return NSLocalizedString("grin.sent.vite.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: chg
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageValueDiffTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.value.diff.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: chg%
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func marketDetailPageValueExtentTitle(_: Void = ()) -> String {
        return NSLocalizedString("market.detail.page.value.extent.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: clicking here
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func workflowFastGetQuotaLink(_: Void = ()) -> String {
        return NSLocalizedString("workflow.fast.get.quota.link", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 中
      /// 
      /// Locales: en, ja-JP, fr-FR, fil-PH, de-DE, id-ID, es-ES, tr-TR, ko-KR, zh-Hans, vi-VN, ru-RU
      public static func mnemonicBackupLanguageZh(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.language.zh", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 原生代幣
      /// 
      /// Locales: zh-Hans
      public static func tokenInfoDetailPageTypeValueNative(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.type.value.native", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的投票數
      /// 
      /// Locales: zh-Hans
      public static func votePageVoteInfoNoDePollsTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteInfo.no​​dePolls.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 暫無投票
      /// 
      /// Locales: zh-Hans
      public static func votePageInfoNoDataTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.info.no​​data.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 跨鏈代幣
      /// 
      /// Locales: zh-Hans
      public static func tokenInfoDetailPageTypeValueOther(_: Void = ()) -> String {
        return NSLocalizedString("token.info.detail.page.type.value.other", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

public struct _R {
  fileprivate init() {}
}
